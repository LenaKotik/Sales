%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 1 0 240 375 
%%LanguageLevel: 2
%%Creator: CorelDRAW 2017
%%Title: 7556-Air Pods 2g Vector Full ...
%%CreationDate: Sat May 18 12:39:25 2019
%%DocumentProcessColors: Cyan Magenta Yellow Black 
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
/AutoFlatness false def
/AutoSteps 0 def
/CMYKMarks true def
/DocPsLevel 2 def
%Build: CorelDRAW 2017 Версия 19.1.0.419
/EpsFile true def
%%BeginResource: procset wCorel19Dict 19.0 0
/wCorel19Dict 300 dict def wCorel19Dict begin
%----------------------------------------------------------------------------
% Core Corel PostScript prolog functions
/bd{bind def}bind def/ld{load def}bd/xd{exch def}bd/rp{{pop}repeat}bd/dexec{
exch begin cvx exec end}bd/@cp/closepath ld/@gs/gsave ld/@gr/grestore ld/@np
/newpath ld/Tl/translate ld/$sv 0 def/@sv{/$sv save def}bd/@rs{$sv restore}bd
/spg/showpage ld/showpage{}bd currentscreen/@dsp xd/$dsp/@dsp def/$dsa xd/$dsf
xd/$sdf false def/$SDF false def/$Scra 0 def/SetScr/setscreen ld/@ss{2 index 0
eq{$dsf 3 1 roll 4 -1 roll pop}if exch $Scra add exch load SetScr}bd
/SeparationMode where{pop}{/SeparationMode/Composite def}ifelse
/SeparationPlateName where{pop}{/SeparationPlateName null def}ifelse
/SeparateInColor where{pop}{/SeparateInColor false def}ifelse/EpsFile where
{pop}{/EpsFile false def}ifelse/FillOverprint false def/$fil 0 def
/OutlineOverprint 0 def/$PF false def/$bkg false def/CurrentOverprint false def
matrix currentmatrix/$ctm xd/$ptm matrix def/$ttm matrix def/$stm matrix def
/$ffpnt true def/CorelDrawReencodeVect[16#0/grave 16#5/breve 16#6/dotaccent
16#8/ring 16#A/hungarumlaut 16#B/ogonek 16#C/caron 16#D/dotlessi
16#27/quotesingle 16#60/grave 16#7C/bar 16#80/Euro
16#82/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
16#88/circumflex/perthousand/Scaron/guilsinglleft/OE
16#91/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
16#98/tilde/trademark/scaron/guilsinglright/oe 16#9F/Ydieresis
16#A1/exclamdown/cent/sterling/currency/yen/brokenbar/section
16#a8/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/minus/registered/macron
16#b0/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
16#b8/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
16#c0/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
16#c8/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
16#d0/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
16#d8/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
16#e0/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
16#e8/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
16#f0/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
16#f8/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/get_ps_level/languagelevel where{pop systemdict/languagelevel get exec}{1}
ifelse def/Level2 get_ps_level 2 ge def/Level3 get_ps_level 3 ge def
/AdobeDistiller/product where{pop systemdict/setdistillerparams known product
(Adobe PostScript Parser)ne and}{false}ifelse def/InRipSeparation
AdobeDistiller{false}{Level2{currentpagedevice/Separations 2 copy known{get}{
pop pop false}ifelse}{false}ifelse}ifelse def/ColorSeparationLevel1 1 0 0 0
gsave setcmykcolor currentcmykcolor grestore add add add 0 ne 0 1 0 0 gsave
setcmykcolor currentcmykcolor grestore add add add 0 ne 0 0 1 0 gsave
setcmykcolor currentcmykcolor grestore add add add 0 ne 0 0 0 1 gsave
setcmykcolor currentcmykcolor grestore add add add 0 ne and and and not def
/ColorSeparation/LumSepsDict where{pop false}{/AldusSepsDict where{pop false}{
InRipSeparation{true}{ColorSeparationLevel1}ifelse}ifelse}ifelse def
/IsColorDevice/deviceinfo where{pop deviceinfo/Colors known{deviceinfo/Colors
get exec 1 gt}{false}ifelse}{/statusdict where{pop statusdict/processcolors
known{statusdict/processcolors get exec 1 gt}{false}ifelse}{false}ifelse}
ifelse def/get_simulate_devicen get_ps_level 2 eq{{SeparationMode/OnHost ne
InRipSeparation AdobeDistiller or and}bind}{false}ifelse def/DocGrayScaleSpace
[/DeviceGray]def/DocRgbSpace[/DeviceRGB]def/DocCmykSpace[/DeviceCMYK]def
/DocLabSpace[/CIEBasedABC <</BlackPoint[0 0 0]/WhitePoint[0.9637 1.0000 0.8241
]/RangeABC[0 100 -128 127 -128 127]/DecodeABC[{16 add 116 div}bind{500 div}
bind{200 div}bind]/MatrixABC[1 1 1 1 0 0 0 0 -1]/DecodeLMN[{dup 0.206897 ge{dup
dup mul mul}{0.137931 sub 0.128419 mul}ifelse 0.9637 mul}bind{dup 0.206897
ge{dup dup mul mul}{0.137931 sub 0.128419 mul}ifelse 1.0000 mul}bind{dup
0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul}ifelse 0.8241 mul}bind]
>>]def/validate_cie_colorspace_whitepoint{load dup aload pop/WhitePoint get 1
1.0 put pop}bd/set_cie_colorspaces{/DocGrayScaleSpaceCIE where{pop
/DocGrayScaleSpaceCIE validate_cie_colorspace_whitepoint/DocGrayScaleSpace xd
DocGrayScaleSpace aload pop begin pop/DecodeA where{pop DecodeA type/arraytype
eq{DecodeA aload pop/DecodeA exch def}if}if end}if/DocRgbSpaceCIE where{pop
/DocRgbSpaceCIE validate_cie_colorspace_whitepoint/DocRgbSpace xd}if
/DocCmykSpaceCIE where{pop/DocCmykSpaceCIE validate_cie_colorspace_whitepoint
/DocCmykSpace xd}if}bd/set_rendering_intent{Level3{findcolorrendering{
/ColorRendering findresource setcolorrendering}{dup/DefaultColorRendering eq{
pop}{/ColorRendering findresource setcolorrendering}}ifelse}{pop}ifelse}bd
/findcmykcustomcolor where{pop}{/findcmykcustomcolor{5 array astore}def}ifelse
/setcustomcolor where SeparationMode/OnHost ne and{pop}{/tint_cmyk_color{5 -1
roll dup 1 ge{pop}{4{dup 6 -1 roll mul exch}repeat pop}ifelse}bd
/setprocesscolor_5{SepMode_5 0 eq{SetCmyk_5}{SepsColor not{4 1 roll pop pop pop
1 exch sub SetGry}{SetCmyk_5}ifelse}ifelse}bd/setcustomcolor{exch aload pop
SepMode_5 0 eq{pop tint_cmyk_color setprocesscolor_5}{CurrentInkName_5 eq{4
index}{0}ifelse 6 1 roll 5 rp 1 sub neg SetGry}ifelse}bd}ifelse
/convert_rgb_to_cmyk{dup type/dicttype eq{}{3{1 exch sub 3 1 roll}repeat 3 copy
min min 3{dup 5 -1 roll sub neg exch}repeat}ifelse}bd/safe_setcolorspace{dup
currentcolorspace eq{pop}{setcolorspace}ifelse}bd/safe_setoverprint{dup type
/booleantype eq{dup currentoverprint ne{setoverprint}{pop}ifelse}{1 eq
setoverprint}ifelse}bd/is_cmyk_channel_name{/channel_name xd channel_name/Cyan
eq channel_name/Magenta eq or channel_name/Yellow eq or channel_name/Black eq
or{true}{false}ifelse}bd/is_rgb_channel_name{/channel_name xd channel_name/Red
eq channel_name/Green eq or channel_name/Blue eq or{true}{false}ifelse}bd
/is_spot_channel_name{/channel_name xd channel_name is_cmyk_channel_name
channel_name is_rgb_channel_name or channel_name/Gray eq or{false}{true}ifelse
}bd/spot_tint_transform_proc{/alternativeSpace xd/alternativeColors xd/tint xd
alternativeSpace DocLabSpace eq{/mixMethod/Additive def/altSpaceNumChannels 3
def}{alternativeSpace DocCmykSpace eq{/mixMethod/Subtractive def
/altSpaceNumChannels 4 def}{alternativeSpace DocRgbSpace eq{/mixMethod
/Additive def/altSpaceNumChannels 3 def}{alternativeSpace DocGrayScaleSpace eq
{/mixMethod/Additive def/altSpaceNumChannels 1 def}if}ifelse}ifelse}ifelse
alternativeSpace DocLabSpace eq{alternativeColors aload pop tint mul 3 1 roll
tint mul 3 1 roll dup 100 exch sub 1 tint sub mul add 3 1 roll}{/tintedColor
altSpaceNumChannels{0.0}repeat altSpaceNumChannels array astore def 0 1
altSpaceNumChannels 1 sub{/altChannelIndex exch def alternativeColors
altChannelIndex get mixMethod/Additive eq{1.0 exch sub tint mul 1.0 exch sub}{
tint mul}ifelse tintedColor altChannelIndex 3 2 roll put}for tintedColor aload
pop}ifelse}bd/devicen_colorant_mixer_proc{/numChannels xd/alternativeSpace xd
/channelNames xd/alternativeColors xd numColorants array astore/colorants xd
/is_spot_channel_name_loc{is_spot_channel_name}bind def alternativeSpace
DocCmykSpace eq{/mixMethod/Subtractive def/altSpaceNumChannels 4 def
/is_spot_channel_name_loc{is_cmyk_channel_name not}bind def}{alternativeSpace
DocRgbSpace eq{/mixMethod/Additive def/altSpaceNumChannels 3 def
/is_spot_channel_name_loc{is_rgb_channel_name not}bind def}{alternativeSpace
DocGrayScaleSpace eq{/mixMethod/Additive def/altSpaceNumChannels 1 def
/is_spot_channel_name_loc{/Gray ne}bind def}if}ifelse}ifelse mixMethod
/Additive eq{/mixedColor altSpaceNumChannels{0.0}repeat altSpaceNumChannels
array astore def/bProcessPlateTinted false def 0 1 numChannels 1 sub{
/channelIndex exch def channelNames channelIndex get is_spot_channel_name_loc
/bSpotChannel xd/sourceChannel colorants channelIndex get def/bWhiteBackground
0 mixedColor{add}forall altSpaceNumChannels div 0.999 gt bProcessPlateTinted
and def bSpotChannel bProcessPlateTinted not and{/bSpotChannel false def}if 0 1
altSpaceNumChannels 1 sub{/altChannelIndex exch def/mixedChannel mixedColor
altChannelIndex get def sourceChannel alternativeColors channelIndex get
altChannelIndex get 1.0 exch sub mul 1.0 exch sub dup 1.0 gt{pop 1.0}if dup 0.0
lt{pop 0.0}if bSpotChannel{sourceChannel 0.0 gt{mixedChannel mul}{pop
mixedChannel}ifelse}{/bProcessPlateTinted true def globaldict begin
/bSkipDeviceNImage where{pop false}{true}ifelse end DevicenImage and{pop
sourceChannel alternativeColors channelIndex get altChannelIndex get mul
mixedChannel add}{mixedChannel add}ifelse}ifelse dup 1.0 gt{pop 1.0}if dup 0.0
lt{pop 0.0}if mixedColor altChannelIndex 3 2 roll put}for}for}{/mixedColor
altSpaceNumChannels{1}repeat altSpaceNumChannels array astore def 0 1
altSpaceNumChannels 1 sub{/targetIndex exch def 0 1 numColorants 1 sub{
/sourceIndex exch def colorants sourceIndex get alternativeColors sourceIndex
get targetIndex get mul 1 exch sub mixedColor targetIndex get mul mixedColor
targetIndex 3 2 roll put}for mixedColor targetIndex 1 mixedColor targetIndex
get sub put}for}ifelse mixedColor aload pop}bd/ColorSpec 9 dict begin/color[]
def/names[]def/num 0 def/ColorModel null def/ColorSpace[]def/set_color{
ColorSeparationLevel1{convert_to_cmyk/color get aload pop setcmykcolor}{
ColorSpace safe_setcolorspace color aload pop setcolor}ifelse}bd
/separate_set_color{SeparationMode/OnHost eq{separate_color{/set_color dexec
true}{pop currentoverprint{false}{SeparateInColor{0 0 0 0 SetCmyk_5 true}{1
SetGry true}ifelse}ifelse}ifelse}{set_color true}ifelse}bd/separate_color{
currentdict false}bd/convert_to_cmyk{currentdict}bd currentdict end def
/GrayscaleColorSpec ColorSpec 9 dict copy begin/names{/Black}def/num 1 def
/ColorModel/Grayscale def/ColorSpace DocGrayScaleSpace def/separate_color{
currentdict false SeparationMode/OnHost eq{SeparationPlateName/Black eq{
SeparateInColor{pop convert_to_cmyk true}{pop true}ifelse}if}if}bd
/convert_to_cmyk{0 0 0 color aload pop 1 exch sub create_cmyk_color}bd
currentdict end def/create_grayscale_color{GrayscaleColorSpec 9 dict copy begin
/color exch 1 array astore def/ColorSpace DocGrayScaleSpace def currentdict end
}bd/RgbColorSpec ColorSpec 9 dict copy begin/names{/Red/Green/Blue}def/num 3
def/ColorModel/Rgb def/ColorSpace DocRgbSpace def/separate_color{
convert_to_cmyk/separate_color dexec}bd/convert_to_cmyk{color aload pop
convert_rgb_to_cmyk create_cmyk_color}bd currentdict end def/create_rgb_color{
RgbColorSpec 9 dict copy begin 3 array astore/color exch def/ColorSpace
DocRgbSpace def currentdict end}bd/HsbColorSpec ColorSpec 9 dict copy begin
/names{/Hue/Saturation/Brightness}def/num 3 def/ColorModel/Hsb def/ColorSpace
DocRgbSpace def/separate_color{convert_to_cmyk/separate_color dexec}bd
/convert_to_cmyk{color aload pop hsb2rgb convert_rgb_to_cmyk create_cmyk_color
}bd/convert_to_rgb{color aload pop hsb2rgb create_rgb_color}bd currentdict end
def/create_hsb_color{HsbColorSpec 9 dict copy begin 3 array astore/color exch
def/ColorSpace DocRgbSpace def currentdict end}bd/CmykColorSpec ColorSpec 9
dict copy begin/names{/Cyan/Magenta/Yellow/Black}def/num 4 def/ColorModel/Cmyk
def/ColorSpace DocCmykSpace def/separate_color{currentdict false
SeparationPlateIndex 0 ge SeparationPlateIndex 3 le and{color
SeparationPlateIndex get dup 0 gt{3 1 roll pop pop SeparateInColor{0 0 0 4
SeparationPlateIndex roll create_cmyk_color true}{1 exch sub
create_grayscale_color true}ifelse}{pop}ifelse}if}bd/convert_to_cmyk{
currentdict}bd currentdict end def/create_cmyk_color{CmykColorSpec 9 dict copy
begin 4 array astore/color exch def/ColorSpace DocCmykSpace def currentdict end
}bd/SpotColorSpec ColorSpec 9 dict copy begin/num 1 def/ColorModel/Spot def
/set_color{ColorSeparationLevel1{color aload pop get_cmyk_alternative_color
/color get aload pop names aload pop findcmykcustomcolor exch setcustomcolor}{
ColorSpace safe_setcolorspace color aload pop setcolor}ifelse}bd
/separate_color{currentdict false SeparationPlateIndex 4 eq{names aload pop
SeparationPlateName eq{color aload pop dup 0 gt{3 1 roll pop pop
SeparateInColor{pop convert_to_cmyk true}{1 exch sub create_grayscale_color
true}ifelse}{pop}ifelse}if}if}bd/convert_to_cmyk{/alternativeSpace ColorSpace 2
get def/tintTransformProc ColorSpace 3 get def alternativeSpace DocCmykSpace eq
{color aload pop tintTransformProc create_cmyk_color}{alternativeSpace
DocRgbSpace eq{color aload pop tintTransformProc create_rgb_color
/convert_to_cmyk dexec}{alternativeSpace DocGrayScaleSpace eq{0 0 0 color aload
pop 1 sub create_cmyk_color}{0 0 0 1 create_cmyk_color}ifelse}ifelse}ifelse}bd
/get_cmyk_alternative_color{/alternativeSpace ColorSpace 2 get def
alternativeSpace DocCmykSpace eq{alternativeColor aload pop create_cmyk_color}
{alternativeSpace DocRgbSpace eq{alternativeColor aload pop create_rgb_color
/convert_to_cmyk dexec}{alternativeSpace DocGrayScaleSpace eq{alternativeColor
aload pop create_grayscale_color/convert_to_cmyk dexec}{0 0 0 1
create_cmyk_color}ifelse}ifelse}ifelse}bd currentdict end def
/create_spot_colorspace{load/alternativeSpace xd/alternativeColor xd/name xd[
/Separation name alternativeSpace[alternativeColor alternativeSpace
/spot_tint_transform_proc cvx]cvx]}bd/create_spot_color{SpotColorSpec 9 dict
copy begin dup type/arraytype ne{create_spot_colorspace}if/ColorSpace xd/color
exch 1 array astore def ColorSpace 1 get 1 array astore/names xd currentdict
end}bd/DevicenColorSpec SpotColorSpec 9 dict copy begin/ColorModel/DeviceN def
/set_color{Level3{ColorSpace safe_setcolorspace color aload pop setcolor}{
ColorSpace 2 get setcolorspace color aload pop ColorSpace 3 get exec setcolor}
ifelse}bd/separate_color{currentdict false/PlateIndex -1 def 0 1 num 1 sub{dup
names exch get SeparationPlateName eq{/PlateIndex xd exit}if pop}for PlateIndex
0 ge{color PlateIndex get dup 0 gt{SeparateInColor{num 1 sub{0}repeat num
PlateIndex roll ColorSpace create_devicen_color/convert_to_cmyk dexec true}{1
exch sub create_grayscale_color true}ifelse 4 2 roll pop pop}{pop}ifelse}if}bd
/get_ink_as_spot{dup/indexInk xd dup color exch get exch names exch get[1.0 num
1 sub{0}repeat num indexInk roll ColorSpace 3 get exec]ColorSpace 2 get
create_spot_color}bd currentdict end def/create_devicen_colorspace{
/numColorants xd load/alternativeSpace xd bind/tintTransform exch def/names xd
[/DeviceN names alternativeSpace/tintTransform load]}bd/create_devicen_color{
DevicenColorSpec 9 dict copy begin dup type/arraytype ne{
create_devicen_colorspace}if/ColorSpace xd/num ColorSpace 1 get length def
/names ColorSpace 1 get def num array astore/color xd currentdict end}bd
/RegistrationColorSpec ColorSpec 9 dict copy begin/num 1 def/ColorModel
/Registration def/ColorSpace{[/Separation/All DocCmykSpace{dup dup dup}]}def
/names[/All]def/set_color{ColorSeparationLevel1{DocGrayScaleSpace
safe_setcolorspace color aload pop 1 exch sub setcolor}{ColorSpace
safe_setcolorspace color aload pop setcolor}ifelse}bd/separate_color{
SeparateInColor{convert_to_cmyk true}{color aload pop 1 exch sub
create_grayscale_color true}ifelse}bd/convert_to_cmyk{color aload pop dup dup
dup create_cmyk_color}bd currentdict end def/create_registration_color{
RegistrationColorSpec 9 dict copy begin 1 array astore/color xd currentdict end
}bd/LabColorSpec ColorSpec 9 dict copy begin/names{/L/a/b}def/num 3 def
/ColorModel/Lab def/ColorSpace DocLabSpace def/separate_color{convert_to_cmyk
/separate_color dexec}bd/convert_to_cmyk{0 0 0 0 create_cmyk_color}bd
currentdict end def/create_lab_color{LabColorSpec 9 dict copy begin 3 array
astore/color exch def/ColorSpace DocLabSpace def currentdict end}bd
/set_solid_fill{/FillColor xd/$fil 0 def}bd/set_outline{/OutlineColor xd}bd
/CheckLevelCompatibility{/DocPsLevel where{pop DocPsLevel get_ps_level gt{@np
/Courier findfont 12 scalefont setfont 72 144 m
(The PostScript level of Corel document is higher than the PostScript)show 72
132 m(level of this device. Change the PS Level in the Corel application)show
72 120 m(by selecting the PostScript tab in the print dialog, and selecting)
show 72 108 m(document level from the Compatibility drop down list.)show flush
spg quit}if}if}bd/@BeginSysCorelDict{systemdict/Corel30Dict known{systemdict
/Corel30Dict get exec}if systemdict/CorelLexDict known{1 systemdict
/CorelLexDict get exec}if}bd/@EndSysCorelDict{systemdict/Corel30Dict known
{end}if/EndCorelLexDict where{pop EndCorelLexDict}if}bd/AutoFlatness where{pop
AutoFlatness{/@ifl{dup currentflat exch sub 10 gt{
([Error: PathTooComplex; OffendingCommand: AnyPaintingOperator]\n)print flush
@np exit}{currentflat 2 add setflat}ifelse}bd/@fill/fill ld/fill{currentflat{
{@fill}stopped{@ifl}{exit}ifelse}bind loop setflat}bd/@eofill/eofill ld/eofill
{currentflat{{@eofill}stopped{@ifl}{exit}ifelse}bind loop setflat}bd/@clip
/clip ld/clip{currentflat{{@clip}stopped{@ifl}{exit}ifelse}bind loop setflat}
bd/@eoclip/eoclip ld/eoclip{currentflat{{@eoclip}stopped{@ifl}{exit}ifelse}
bind loop setflat}bd/@stroke/stroke ld/stroke{currentflat{{@stroke}stopped
{@ifl}{exit}ifelse}bind loop setflat}bd}if}if/@ssa Level2{{true
setstrokeadjust}}{{}}ifelse bd/d/setdash ld/j/setlinejoin ld/J/setlinecap ld/M
/setmiterlimit ld/w/setlinewidth ld/O{/FillOverprint xd}bd/R{/OutlineOverprint
xd}bd/W/eoclip ld/c/curveto ld/C/c ld/l/lineto ld/L/l ld/rl/rlineto ld/m
/moveto ld/n/newpath ld/N/newpath ld/P{11 rp}bd/u{}bd/U{}bd/A{pop}bd/q/@gs ld
/Q/@gr ld/&{}bd/@j{@sv @np}bd/@J{@rs}bd/g{1 exch sub 0 0 0 4 roll 3
create_cmyk_color set_solid_fill/$fil 0 def}bd/G{1 sub neg 0 0 0 4 -1 roll
create_cmyk_color set_outline}bd/i{dup 0 ne{setflat}{pop}ifelse}bd/v{4 -2 roll
2 copy 6 -2 roll c}bd/V/v ld/y{2 copy c}bd/Y/y ld/@w{matrix rotate/$ptm xd
matrix scale $ptm dup concatmatrix/$ptm xd 1 eq{$ptm exch dup concatmatrix
/$ptm xd}if/patternScallingMatrix where{pop patternScallingMatrix $ptm matrix
concatmatrix/$ptm xd}if 1 w}bd/@g{1 eq dup/$sdf xd{/$scp xd/$sca xd/$scf xd}if
}bd/@G{1 eq dup/$SDF xd{/$SCP xd/$SCA xd/$SCF xd}if}bd/@D{2 index 0 eq{$dsf 3 1
roll 4 -1 roll pop}if 3 copy exch $Scra add exch load SetScr/$dsp xd/$dsa xd
/$dsf xd}bd/$ngx{$SDF{$SCF SeparationMode/Composite eq{$SCA}{$dsa}ifelse $SCP
@ss}if}bd/min{2 copy le{pop}{exch pop}ifelse}bd/max{2 copy ge{pop}{exch pop}
ifelse}bd/in_range{3 -1 roll min max}bd/InRange/in_range load bd/@sqr{dup 0 rl
dup 0 exch rl neg 0 rl @cp}bd/currentscale{1 0 dtransform matrix defaultmatrix
idtransform dup mul exch dup mul add sqrt 0 1 dtransform matrix defaultmatrix
idtransform dup mul exch dup mul add sqrt}bd/@unscale{}bd/wDstChck{2 1 roll dup
3 -1 roll eq{1 add}if}bd/@dot{dup mul exch dup mul add 1 exch sub}bd/@lin{exch
pop abs 1 exch sub}bd/cmyk2rgb{3{dup 5 -1 roll add 1 exch sub dup 0 lt{pop 0}
if exch}repeat pop}bd/rgb2cmyk{3{1 exch sub 3 1 roll}repeat 3 copy min min 3{
dup 5 -1 roll sub neg exch}repeat}bd/rgb2g{2 index .299 mul 2 index .587 mul
add 1 index .114 mul add 4 1 roll pop pop pop}bd/WaldoColor_5 where{pop}{
/CorelImage systemdict/image get def/CorelSetGray systemdict/setgray get def
/CorelGetGray systemdict/currentgray get def/CorelSetTransfer systemdict
/settransfer get def/CorelGetTransfer systemdict/currenttransfer get def
/SetRgb/setrgbcolor ld/GetRgb/currentrgbcolor ld/SetGry/setgray ld/GetGry
/currentgray ld/SetRgb2 systemdict/setrgbcolor get def/GetRgb2 systemdict
/currentrgbcolor get def/SetHsb systemdict/sethsbcolor get def/GetHsb
systemdict/currenthsbcolor get def/rgb2hsb{SetRgb2 GetHsb}bd/hsb2rgb{3 -1 roll
dup floor sub 3 1 roll SetHsb GetRgb2}bd/setcmykcolor where{pop/LumSepsDict
where{pop/SetCmyk_5{LumSepsDict/setcmykcolor get exec}def}{/AldusSepsDict where
{pop/SetCmyk_5{AldusSepsDict/setcmykcolor get exec}def}{/SetCmyk_5
/setcmykcolor ld}ifelse}ifelse}{/setcmykcolor{create_cmyk_color
/separate_set_color dexec/$ffpnt xd}bd/SetCmyk_5{cmyk2rgb SetRgb}bd}ifelse
/currentcmykcolor where{pop/GetCmyk/currentcmykcolor ld}{/GetCmyk{GetRgb
rgb2cmyk}bd}ifelse/setoverprint where{pop}{/setoverprint{/CurrentOverprint xd}
bd}ifelse/currentoverprint where{pop}{/currentoverprint{CurrentOverprint}bd}
ifelse/colorimage where{pop/ColorImage{colorimage}def}{/ColorImage{/ncolors xd
/$multi xd $multi true eq{ncolors 3 eq{/daqB xd/daqG xd/daqR xd pop pop exch
pop abs{daqR pop daqG pop daqB pop}repeat}{/daqK xd/daqY xd/daqM xd/daqC xd pop
pop exch pop abs{daqC pop daqM pop daqY pop daqK pop}repeat}ifelse}{/dataaq xd
{dataaq ncolors dup 3 eq{/$dat xd 0 1 $dat length 3 div 1 sub{dup 3 mul $dat 1
index get 255 div $dat 2 index 1 add get 255 div $dat 3 index 2 add get 255 div
rgb2g 255 mul cvi exch pop $dat 3 1 roll put}for $dat 0 $dat length 3 idiv
getinterval pop}{4 eq{/$dat xd 0 1 $dat length 4 div 1 sub{dup 4 mul $dat 1
index get 255 div $dat 2 index 1 add get 255 div $dat 3 index 2 add get 255 div
$dat 4 index 3 add get 255 div cmyk2rgb rgb2g 255 mul cvi exch pop $dat 3 1
roll put}for $dat 0 $dat length ncolors idiv getinterval}if}ifelse}image}
ifelse}bd}ifelse/currentcmykcolor{GetCmyk}bd/sethsbcolor{hsb2rgb setrgbcolor}
bd/currenthsbcolor{currentrgbcolor rgb2hsb}bd/setgray{dup dup setrgbcolor}bd
/currentgray{currentrgbcolor rgb2g}bd/InsideDCS false def/IMAGE/image ld/image
{InsideDCS{IMAGE}{/EPSDict where{pop SeparationMode/Composite eq{IMAGE}{dup
type/dicttype eq{dup/ImageType get 1 ne{IMAGE}{dup dup/BitsPerComponent get 8
eq exch/BitsPerComponent get 1 eq or currentcolorspace 0 get DocGrayScaleSpace
eq and{SeparationPlateName(Black)eq{IMAGE}{dup/DataSource get/TCC xd/Height get
abs{TCC pop}repeat}ifelse}{IMAGE}ifelse}ifelse}{2 index 1 ne{
SeparationPlateName(Black)eq{IMAGE}{/TCC xd pop pop exch pop abs{TCC pop}
repeat}ifelse}{IMAGE}ifelse}ifelse}ifelse}{IMAGE}ifelse}ifelse}bd}ifelse/$fm 0
def/wfill{1 $fm eq{fill}{eofill}ifelse}bd/@Pf{@sv SeparationMode/Composite eq{
true}{$Psc 0 ne or $ink_5 3 eq or}ifelse{0 J 0 j[]0 d FillOverprint
safe_setoverprint FillColor/separate_set_color dexec pop $ctm setmatrix 72 1000
div dup matrix scale dup concat dup Bburx exch Bbury exch itransform ceiling
cvi/Bbury xd ceiling cvi/Bburx xd Bbllx exch Bblly exch itransform floor cvi
/Bblly xd floor cvi/Bbllx xd $Prm aload pop $Psn load exec}{1 SetGry wfill}
ifelse @rs @np}bd/F{matrix currentmatrix $sdf{$scf $sca $scp @ss}if
FillOverprint safe_setoverprint $fil 1 eq{CorelPtrnDoFill}{$fil 2 eq
{gradient_fill}{$fil 3 eq{@Pf}{get_simulate_devicen FillColor/ColorModel get
/DeviceN eq and{0 1 FillColor/num get 1 sub{dup 0 gt{true safe_setoverprint}if
FillColor/get_ink_as_spot dexec/set_color dexec @gs wfill @gr}for}{FillColor
/separate_set_color dexec{wfill}{@np}ifelse}ifelse}ifelse}ifelse}ifelse $sdf{
$dsf $dsa $dsp @ss}if setmatrix}bd/f{@cp F}bd/S{matrix currentmatrix $ctm
setmatrix $SDF{$SCF $SCA $SCP @ss}if OutlineOverprint safe_setoverprint
get_simulate_devicen OutlineColor/ColorModel get/DeviceN eq and{0 1
OutlineColor/num get 1 sub{dup 0 gt{true safe_setoverprint}if OutlineColor
/get_ink_as_spot dexec/set_color dexec matrix currentmatrix $ptm concat @gs
stroke @gr setmatrix}for}{OutlineColor/separate_set_color dexec{matrix
currentmatrix $ptm concat stroke setmatrix}{@np}ifelse}ifelse $SDF{$dsf $dsa
$dsp @ss}if setmatrix}bd/s{@cp S}bd/B{@gs F @gr S}bd/b{@cp B}bd/_E{5 array
astore exch cvlit xd}bd/@cc{currentfile $dat readhexstring pop}bd/@sm{/$ctm
$ctm currentmatrix def}bd/@E{/Bbury xd/Bburx xd/Bblly xd/Bbllx xd}bd/@c{@cp}bd
/@P{/$fil 3 def/$Psn xd/$Psc xd array astore/$Prm xd}bd/tcc{@cc}def/@B{@gs S
@gr F}bd/@b{@cp @B}bd/init_separation{/SeparationMode where{pop}{
/SeparationMode/Composite def}ifelse/SeparationPlateName where{pop}{
/SeparationPlateName null def}ifelse/SeparateInColor where{pop}{
/SeparateInColor false def}ifelse SeparationMode/Composite eq{
/SeparationPlateIndex -1 def}{/SeparationPlateIndex 4 def}ifelse/CmykPlates[
/Cyan/Magenta/Yellow/Black]def 0 1 3{dup CmykPlates exch get
SeparationPlateName eq{/SeparationPlateIndex xd exit}if pop}for
/CurrentInkName_5 SeparationPlateName def/$ink_5 SeparationPlateIndex def
SeparationMode/OnHost eq{/SepMode_5 2 def}{/SepMode_5 0 def}ifelse/SepsColor
SeparateInColor def}bd/init_separation_from_legacy{EpsFile{/SepMode_5 where{
pop SepMode_5 2 eq{/SeparationMode/OnHost def}{/SeparationMode/Composite def}
ifelse}if/CurrentInkName_5 where{pop/SeparationPlateName CurrentInkName_5 def}
if/$ink_5 where{pop/SeparationPlateIndex $ink_5 def}if/SepsColor where{pop
/SeparateInColor SepsColor def}if}if}bd init_separation_from_legacy/@whi{@gs
-72000 dup m -72000 72000 l 72000 dup l 72000 -72000 l @cp 1 SetGry fill @gr}
bd/@neg{[{1 exch sub}/exec cvx currenttransfer/exec cvx]cvx settransfer @whi}
bd/deflevel 0 def/@sax{/deflevel deflevel 1 add def}bd/@eax{/deflevel deflevel
dup 0 gt{1 sub}if def deflevel 0 gt{/eax load}{eax}ifelse}bd/eax{{exec}forall}
bd/@rax{deflevel 0 eq{@rs @sv}if}bd systemdict/pdfmark known not{/pdfmark
/cleartomark ld}if/wclip{1 $fm eq{clip}{eoclip}ifelse}bd
%----------------------------------------------------------------------------
% Raster images support
/set_image_clipping{concat 3 index 3 index m 3 index 1 index l 2 copy l 1 index
3 index l 3 index 3 index l clip pop pop pop pop}bd/set_image_parameters{/$frg
xd/$bkg xd/$ury xd/$urx xd/$lly xd/$llx xd/$ncl xd/$bts xd/$hei xd/$wid xd}bd
/output_image{/@cc xd @sm @gs set_image_clipping set_image_parameters
SeparationMode/OnHost eq EpsFile and{separate_output_image}{
output_composite_image}ifelse @gr $ctm setmatrix}bd/output_composite_image{
DocPsLevel 3 eq MaskedImage true eq and{output_masked_image}{$bts 1 gt
DocPsLevel 2 eq DocPsLevel 3 eq or and{DevicenImage{output_devicen_image}{
output_color_image}ifelse}{$bts 1 eq{output_monochrome_image}{
output_color_image_level1}ifelse}ifelse}ifelse}bd/separate_output_image{@gs
$bts 1 gt{separate_output_color_image}{separate_output_monochrome_image}ifelse
@gr not{currentoverprint not{1.0 SetGry wfill}if}if @np}bd/set_decode_filter{
ImageCompression/JPEG eq{/DCTDecode filter}{ImageCompression/RLE eq{
/RunLengthDecode filter}{ImageCompression/LZW eq{/LZWDecode filter}if}ifelse}
ifelse}bd/create_datasource{currentfile DevicenImage not get_ps_level 2 gt or{
/ASCII85Decode filter}if set_decode_filter}bd/set_image_strip_parameters{
/stripRows xd/numPlanes xd/stripBuffer $wid $bts mul $ncl mul stripRows mul 8
div ceiling cvi dup 65535 gt{pop $ncl $bts mul}if string def DevicenImage{
/readstrip{DataSource stripBuffer readhexstring pop}bd}{/readstrip{DataSource
stripBuffer readstring pop}bd}ifelse/stripHeight $lly $ury sub stripRows mul
$hei div def/stripOutBuffer $wid stripRows mul numPlanes mul 65535 min string
def/strip_img_dict 8 dict def strip_img_dict begin/ImageType 1 def/Width $wid
def/Height stripRows def/BitsPerComponent $bts def/Decode[numPlanes{0 1}
repeat]def/ImageMatrix[$wid 0 0 stripRows neg 0 $hei 0 gt{stripRows}{0}ifelse]
def/DataSource stripOutBuffer def end}bd/separate_output_color_image{
/plateContent false def $ncl 1 eq{SeparationPlateName/Black eq{
output_color_image/plateContent true def}if}{@np/DataSource create_datasource
def SeparateInColor{DocCmykSpace setcolorspace/numPlanes 4 def}{
DocGrayScaleSpace setcolorspace/numPlanes 1 def}ifelse/stripRows 65535 $wid
$bts mul $ncl numPlanes max mul 8 div div floor cvi 1 max def numPlanes
stripRows set_image_strip_parameters/maxStripIndex $hei stripRows div ceiling
cvi 1 sub def 0 1 maxStripIndex{/stripIndex exch def/$t_ury $ury stripHeight
stripIndex mul add ceiling cvi def/$t_lly $t_ury stripHeight add ceiling cvi
def stripIndex maxStripIndex eq{numPlanes $hei maxStripIndex stripRows mul sub
set_image_strip_parameters/$t_lly $t_ury stripHeight add ceiling cvi def}if
readstrip pop @gs 0 1 $wid stripRows mul 1 sub{/pixelIndex xd stripBuffer
pixelIndex $ncl mul $ncl getinterval{255 div}forall DevicenImage{
ImageDevicenSpace create_devicen_color}{$ncl 3 eq{create_rgb_color}{
create_cmyk_color}ifelse}ifelse/separate_color dexec{/plateContent true def
begin color aload pop end}{pop numPlanes[numPlanes 1 eq{1}{0}ifelse]cvx repeat
}ifelse numPlanes array astore/pixelSepIndex pixelIndex numPlanes mul def
/posColorant 0 def{stripOutBuffer pixelSepIndex posColorant add 3 -1 roll 255
mul cvi put/posColorant posColorant 1 add def}forall}for $llx $t_lly Tl $urx
$llx sub $t_ury $t_lly sub scale strip_img_dict image @gr}for $SDF{$dsf $dsa
$dsp @ss}if}ifelse plateContent}bd/separate_output_monochrome_image{
SeparationPlateName/Black eq{output_monochrome_image true}{false}ifelse}bd
/output_monochrome_image{$frg 1 eq{OutlineOverprint safe_setoverprint
ImageForegroundColor/separate_set_color dexec{1}{0}ifelse/$frg xd}{/$frg false
def}ifelse $bkg 1 eq{@gs $ctm setmatrix F @gr}if @np/$dat $wid $bts mul 8 div
ceiling cvi 65535 min string def $bkg $frg add 1 ge{$SDF{$SCF $SCA $SCP @ss}if
$llx $lly Tl $urx $llx sub $ury $lly sub scale $bkg 1 eq{FillColor
/separate_set_color dexec pop}if $wid $hei abs $bts 1 eq{$bkg 1 ge}{$bts 1 ge}
ifelse[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]/tcc load $bts 1 eq
{imagemask}{image}ifelse $SDF{$dsf $dsa $dsp @ss}if}{$hei abs{tcc pop}repeat}
ifelse}bd/output_color_image_level1{@np $ngx $llx $lly Tl $urx $llx sub $ury
$lly sub scale $wid $hei abs $bts[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse
]/$dat $wid $bts mul $ncl mul 8 div ceiling cvi 65535 min string def $msimage
false eq $ncl 1 eq or{/@cc load false $ncl ColorImage}{$wid $bts mul 8 div
ceiling cvi $ncl 3 eq{dup dup/$dat1 exch string def/$dat2 exch string def
/$dat3 exch string def/@cc1 load/@cc2 load/@cc3 load}{dup dup dup/$dat1 exch
string def/$dat2 exch string def/$dat3 exch string def/$dat4 exch string def
/@cc1 load/@cc2 load/@cc3 load/@cc4 load}ifelse true $ncl ColorImage}ifelse
$SDF{$dsf $dsa $dsp @ss}if}bd/@cc1{currentfile $dat1 readhexstring pop}bd/@cc2
{currentfile $dat2 readhexstring pop}bd/@cc3{currentfile $dat3 readhexstring
pop}bd/@cc4{currentfile $dat4 readhexstring pop}bd/$msimage false def
/ImageCompression/None def/MaskedImage false def/DevicenImage false def
/output_color_image{@np $ncl 1 eq{DocGrayScaleSpace}{$ncl 3 eq{DocRgbSpace}
{DocCmykSpace}ifelse}ifelse setcolorspace/$dat $wid $bts mul $ncl mul 8 div
ceiling cvi 65535 min string def $ngx $llx $lly Tl $urx $llx sub $ury $lly sub
scale 8 dict begin/ImageType 1 def/Width $wid def/Height $hei abs def
/BitsPerComponent $bts def/Decode[$ncl{0 1}repeat]def/ImageMatrix[$wid 0 0 $hei
neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource create_datasource def currentdict
end image $SDF{$dsf $dsa $dsp @ss}if}bd/simulate_devicen_image{@np $ngx
/colorantNames ImageDevicenSpace 1 get def/altColorSpace ImageDevicenSpace 2
get def/tintProc ImageDevicenSpace 3 get def/DataSource create_datasource def
/stripRows 65535 $wid $bts mul $ncl mul 8 div div floor cvi 1 max def 1
stripRows set_image_strip_parameters/maxStripIndex $hei stripRows div ceiling
cvi 1 sub def 0 1 maxStripIndex{/stripIndex exch def/$t_ury $ury stripHeight
stripIndex mul add ceiling cvi def/$t_lly $t_ury stripHeight add ceiling cvi
def stripIndex maxStripIndex eq{1 $hei maxStripIndex stripRows mul sub
set_image_strip_parameters/$t_lly $t_ury stripHeight add ceiling cvi def}if
readstrip pop @gs $llx $t_lly Tl $urx $llx sub $t_ury $t_lly sub scale 0 1 $ncl
1 sub{@gs/inkIndex exch def 0 1 stripOutBuffer length 1 sub{dup $ncl mul
inkIndex add stripBuffer exch get stripOutBuffer 3 1 roll put}for[/Separation
colorantNames inkIndex get altColorSpace{$ncl 1 sub{0}repeat $ncl inkIndex roll
tintProc}]setcolorspace inkIndex 0 gt{true setoverprint}if strip_img_dict image
@gr}for @gr}for $SDF{$dsf $dsa $dsp @ss}if}bd/output_devicen_image_alt{@np $ngx
/colorantNames ImageDevicenSpace 1 get def/altColorSpace ImageDevicenSpace 2
get def/tintProc ImageDevicenSpace 3 get def altColorSpace DocCmykSpace eq{
/numAltChannels 4 def}{altColorSpace DocRgbSpace eq{/numAltChannels 3 def}{
/numAltChannels 1 def}ifelse}ifelse/DataSource create_datasource def
altColorSpace setcolorspace/stripRows 65535 $wid $bts mul $ncl numAltChannels
max mul 8 div div floor cvi 1 max def numAltChannels stripRows
set_image_strip_parameters/maxStripIndex $hei stripRows div ceiling cvi 1 sub
def 0 1 maxStripIndex{/stripIndex exch def/$t_ury $ury stripHeight stripIndex
mul add ceiling cvi def/$t_lly $t_ury stripHeight add ceiling cvi def
stripIndex maxStripIndex eq{numAltChannels $hei maxStripIndex stripRows mul sub
set_image_strip_parameters/$t_lly $t_ury stripHeight add ceiling cvi def}if
readstrip pop @gs 0 1 stripBuffer length $ncl div cvi 1 sub{/pixelIndex xd
stripBuffer pixelIndex $ncl mul $ncl getinterval{255 div}forall tintProc exec
numAltChannels array astore/pixelAltIndex pixelIndex numAltChannels mul def
/posColorant 0 def{stripOutBuffer pixelAltIndex posColorant add 3 -1 roll 255
mul cvi put/posColorant posColorant 1 add def}forall}for $llx $t_lly Tl $urx
$llx sub $t_ury $t_lly sub scale strip_img_dict image @gr}for $SDF{$dsf $dsa
$dsp @ss}if}bd/output_devicen_image_native{@np $ngx ImageDevicenSpace
setcolorspace/scanline $wid $bts mul $ncl mul 8 div ceiling cvi 65535 min
string def/readscanline{currentfile scanline readhexstring pop}bind def $llx
$lly Tl $urx $llx sub $ury $lly sub scale 8 dict begin/ImageType 1 def/Width
$wid def/Height $hei abs def/BitsPerComponent $bts def/Decode[$ncl{0 1}repeat]
def/ImageMatrix[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource{
readscanline}def currentdict end image $SDF{$dsf $dsa $dsp @ss}if}bd
/output_devicen_image{Level3{output_devicen_image_native}{get_simulate_devicen
{simulate_devicen_image}{output_devicen_image_alt}ifelse}ifelse}bd
/output_masked_image{/$dat $wid $bts mul $ncl mul 8 div ceiling cvi 65535 min
string def $ngx DevicenImage{ImageDevicenSpace}{$ncl 1 eq{DocGrayScaleSpace}{
$ncl 3 eq{DocRgbSpace}{DocCmykSpace}ifelse}ifelse}ifelse setcolorspace $llx
$lly Tl $urx $llx sub $ury $lly sub scale/ImageDataDict 8 dict def
ImageDataDict begin/ImageType 1 def/Width $wid def/Height $hei abs def
/BitsPerComponent $bts def/Decode[$ncl{0 1}repeat]def/ImageMatrix[$wid 0 0 $hei
neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource create_datasource def end
/MaskedImageDict 7 dict def MaskedImageDict begin/ImageType 3 def
/InterleaveType 3 def/MaskDict ImageMaskDict def/DataDict ImageDataDict def end
MaskedImageDict image $SDF{$dsf $dsa $dsp @ss}if}bd/set_image_mask{/$mbts xd
/$mhei xd/$mwid xd/ImageMaskDict 8 dict def ImageMaskDict begin/ImageType 1 def
/Width $mwid def/Height $mhei abs def/BitsPerComponent $mbts def/DataSource
maskstream def/ImageMatrix[$mwid 0 0 $mhei neg 0 $mhei 0 gt{$mhei}{0}ifelse]
def/Decode[1 0]def end}bd/@daq{dup type/arraytype eq{aload pop}if}bd
/skip_image_body{8 rp/$ury xd/$urx xd/$lly xd/$llx xd/$ncl xd/$bts xd/$hei xd
/$wid xd DevicenImage not ImageCompression/JPEG eq or ImageCompression/RLE eq
or ImageCompression/LZW eq or{create_datasource flushfile}{/scanline $wid $bts
mul $ncl mul 8 div ceiling cvi dup 65535 gt{pop $bts $ncl mul}if string def
/upperBound $wid $hei mul $bts mul $ncl mul scanline length div cvi 1 sub def 0
1 upperBound{pop currentfile scanline readhexstring pop pop}for}ifelse}bd
/disable_raster_output{deflevel 0 eq{@rs}if/output_image load
/output_image_original exch def/output_image/skip_image_body load def
globaldict begin/bSkipDeviceNImage true def end deflevel 0 eq{@sv}if}def
/enable_raster_output{deflevel 0 eq{@rs}if/bSkipDeviceNImage where{
/bSkipDeviceNImage undef/output_image/output_image_original load def}if
deflevel 0 eq{@sv}if}def
end
%%EndResource
%%EndProlog
%%BeginSetup
wCorel19Dict begin
@BeginSysCorelDict
/$dcm matrix currentmatrix def
@ssa
1.00 setflat
/$fst 128 def
%%EndSetup

%%Page: 1 1
%%ViewingOrientation: 1 0 0 1
%%BoundingBox: 0 0 239 374
%LogicalPage: 1
%%BeginPageSetup
@sv
@sm
@sv
%%EndPageSetup
@rax %Note: Object
67.60375 0.88299 239.33395 259.50699 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000  create_rgb_color set_solid_fill
153.46885 19.36205 m
152.41776 19.36205 151.56680 20.21499 151.56680 21.26494 C
151.56680 22.31575 152.41776 23.16813 153.46885 23.16813 C
154.51994 23.16813 155.37175 22.31575 155.37175 21.26494 C
155.37175 20.21499 154.51994 19.36205 153.46885 19.36205 C
@c
145.03294 126.28091 m
142.88598 126.28091 141.14580 128.02082 141.14580 130.16891 C
141.14580 132.31786 142.88598 134.05691 145.03294 134.05691 C
161.90476 134.05691 L
164.05200 134.05691 165.79276 132.31786 165.79276 130.16891 C
165.79276 128.02082 164.05200 126.28091 161.90476 126.28091 C
145.03294 126.28091 L
@c
153.46885 201.17197 m
148.68595 201.17197 144.80674 205.04891 144.80674 209.83181 C
144.80674 214.61584 148.68595 218.49279 153.46885 218.49279 C
158.25288 218.49279 162.12983 214.61584 162.12983 209.83181 C
162.12983 205.04891 158.25288 201.17197 153.46885 201.17197 C
@c
232.35080 259.50699 m
185.28491 259.50699 L
184.58476 259.50699 184.01783 258.93893 184.01783 258.23877 C
184.01783 255.93789 L
184.01783 253.87682 182.03272 252.20580 179.97080 252.20580 C
126.96576 252.20580 L
124.90583 252.20580 122.91987 253.87682 122.91987 255.93789 C
122.91987 258.23877 L
122.91987 258.93893 122.35294 259.50699 121.65392 259.50699 C
74.58775 259.50699 L
74.43666 259.50699 74.31477 259.38397 74.31477 259.23373 C
74.30570 252.94394 74.35134 217.75181 74.45537 206.47191 C
74.57244 193.92690 73.22372 181.07291 79.14444 169.58381 C
84.08466 159.99676 92.63537 150.38277 105.39978 147.68391 C
106.96989 147.35197 108.61172 147.18784 110.25298 147.18784 C
111.83981 147.18784 113.42693 147.34091 114.94998 147.64479 C
117.05499 148.06488 117.44674 150.01880 117.59698 151.63398 C
119.30683 165.59093 L
119.36494 166.03795 119.42674 166.36791 119.54494 166.36791 C
119.54976 166.36791 L
119.66797 166.35883 119.69178 166.04192 119.70000 165.59093 C
119.70000 165.59093 120.23178 149.68091 120.23178 149.65200 C
120.25672 148.89090 120.27373 148.01272 119.62091 147.57194 C
118.02274 146.48797 115.96479 145.94683 114.24699 145.29883 C
111.45487 144.24491 108.65197 143.22586 105.84198 142.21786 C
102.94781 141.17698 100.04598 140.15480 97.14671 139.12696 C
94.96346 138.35282 80.56346 133.75276 72.70243 131.40595 C
69.66454 130.49887 67.60375 130.16976 67.60375 130.16976 C
67.60375 130.16976 69.66539 129.83981 72.70583 128.93074 C
80.56630 126.58479 94.96346 121.98586 97.14671 121.21285 C
100.04598 120.18274 102.94781 119.16085 105.84198 118.12082 C
108.65197 117.11282 111.45487 116.09291 114.24699 115.03984 C
115.96479 114.39099 118.02274 113.85184 119.62091 112.76589 C
120.27373 112.32482 120.25672 111.44693 120.23178 110.68583 C
120.23178 110.65691 119.70000 94.74718 119.70000 94.74718 C
119.69178 94.29704 119.66797 93.97928 119.54976 93.97020 C
119.54494 93.97020 L
119.42674 93.97020 119.36494 94.30016 119.30683 94.74718 C
117.59698 108.70384 L
117.43795 110.44885 116.77691 112.55499 114.89896 112.83874 C
113.09698 113.11087 111.13398 113.38583 109.19282 113.38583 C
107.90079 113.38583 106.61783 113.26280 105.39978 112.93795 C
93.22554 109.67584 85.05836 103.68992 79.14444 91.03805 C
71.79052 75.30605 74.28728 66.41121 74.17134 53.86706 C
74.06759 42.58687 74.02252 7.44520 74.03074 1.15597 C
74.03074 1.00545 74.15376 0.88299 74.30372 0.88299 C
122.86375 0.88299 L
122.86375 0.98617 L
122.86375 3.25616 124.70485 5.02526 126.97597 5.02526 C
179.96173 5.02526 L
182.23200 5.02526 184.07282 3.25616 184.07282 0.98617 C
184.07282 0.88299 L
232.63398 0.88299 L
232.78394 0.88299 232.90696 1.00545 232.90696 1.15597 C
232.91575 7.44520 232.86983 42.58687 232.76580 53.86706 C
232.64986 66.41121 234.86400 74.45622 227.50980 90.18822 C
221.99981 101.97496 213.30879 109.50094 201.53792 112.65392 C
200.10898 113.03575 198.23386 113.16699 196.50387 113.16699 C
194.54400 113.16699 192.76980 112.99890 192.03874 112.83874 C
189.99099 112.38775 189.35887 110.34198 189.34072 108.70384 C
187.62973 94.74718 L
187.57276 94.30016 187.51096 93.97020 187.39276 93.97020 C
187.38879 93.97020 L
187.27087 93.97928 187.24677 94.29704 187.23798 94.74718 C
187.23798 94.74718 186.70677 110.65691 186.70479 110.68583 C
186.68098 111.44693 186.66397 112.32482 187.31679 112.76589 C
188.91496 113.85184 190.97291 114.39099 192.69099 115.03984 C
195.48397 116.09291 198.28687 117.11282 201.09600 118.12082 C
203.99074 119.16085 206.89285 120.18274 209.79099 121.21285 C
211.97395 121.98586 226.37083 126.58479 234.23272 128.93074 C
237.27288 129.83981 239.33395 130.16976 239.33395 130.16976 C
239.33395 130.16976 237.27373 130.49887 234.23499 131.40595 C
226.37480 133.75276 211.97480 138.35282 209.79099 139.12696 C
206.89285 140.15480 203.99074 141.17698 201.09600 142.21786 C
198.28687 143.22586 195.48397 144.24491 192.69099 145.29883 C
190.97291 145.94683 188.91496 146.48797 187.31679 147.57194 C
186.66397 148.01272 186.68098 148.89090 186.70479 149.65200 C
186.70677 149.68091 187.23798 165.59093 187.23798 165.59093 C
187.24677 166.04192 187.27087 166.35883 187.38879 166.36791 C
187.39276 166.36791 L
187.51096 166.36791 187.57276 166.03795 187.62973 165.59093 C
189.34072 151.63398 L
189.35887 149.99584 189.91474 147.95688 191.98885 147.64479 C
193.86085 147.36274 195.98485 147.07474 198.07994 147.07474 C
199.25773 147.07474 200.42674 147.16573 201.53792 147.39987 C
214.32784 150.10384 222.07096 157.62898 227.79298 168.73285 C
233.71398 180.22195 232.36583 193.92690 232.48290 206.47191 C
232.58693 217.75181 232.63200 252.94394 232.62378 259.23373 C
232.62378 259.38397 232.50076 259.50699 232.35080 259.50699 C
@c
153.46885 19.11203 m
154.65600 19.11203 155.62176 20.07808 155.62176 21.26494 C
155.62176 22.45209 154.65600 23.41814 153.46885 23.41814 C
152.28198 23.41814 151.31679 22.45209 151.31679 21.26494 C
151.31679 20.07808 152.28198 19.11203 153.46885 19.11203 C
@c
145.03294 126.03090 m
161.90476 126.03090 L
164.18693 126.03090 166.04277 127.88674 166.04277 130.16891 C
166.04277 132.45080 164.18693 134.30693 161.90476 134.30693 C
145.03294 134.30693 L
142.75191 134.30693 140.89578 132.45080 140.89578 130.16891 C
140.89578 127.88674 142.75191 126.03090 145.03294 126.03090 C
@c
153.46885 200.92195 m
158.38299 200.92195 162.37984 204.91880 162.37984 209.83181 C
162.37984 214.74595 158.38299 218.74280 153.46885 218.74280 C
148.55499 218.74280 144.55672 214.74595 144.55672 209.83181 C
144.55672 204.91880 148.55499 200.92195 153.46885 200.92195 C
@c
232.35080 259.25698 m
232.37376 259.23288 L
232.38198 252.61795 232.33691 217.76882 232.23288 206.47389 C
232.21276 204.37682 232.23487 202.20491 232.25499 200.10387 C
232.36384 189.41584 232.47496 178.36384 227.57074 168.84680 C
221.29597 156.67200 213.25096 150.13276 201.48690 147.64479 C
200.46586 147.42879 199.35184 147.32476 198.07994 147.32476 C
195.97691 147.32476 193.85178 147.61786 192.02598 147.89197 C
189.86173 148.21682 189.60293 150.61890 189.58876 151.66488 C
187.87890 165.62381 L
187.81285 166.13376 187.74879 166.61679 187.37178 166.61679 C
187.37093 166.61679 L
187.00894 166.59099 186.99789 166.10797 186.98797 165.60000 C
186.93298 163.97093 186.45676 149.68687 186.45477 149.65994 C
186.43181 148.91386 186.39694 147.89197 187.17591 147.36472 C
188.41380 146.52482 189.88583 146.01600 191.30882 145.52476 C
191.75187 145.37083 192.18784 145.21975 192.60283 145.06384 C
195.63676 143.91893 198.69080 142.81483 201.01096 141.98173 C
203.17975 141.20277 205.35279 140.43373 207.52498 139.66498 C
209.70794 138.89083 L
211.89600 138.11499 226.27786 133.52088 234.16299 131.16699 C
235.77477 130.68482 237.12094 130.36394 238.02973 130.16976 C
237.11981 129.97389 235.77279 129.65386 234.15987 129.17197 C
226.28098 126.81780 211.89997 122.22397 209.70794 121.44699 C
207.55672 120.68476 L
205.37490 119.91288 203.19194 119.13874 201.01096 118.35581 C
198.69874 117.52583 195.65376 116.42485 192.60283 115.27398 C
192.18784 115.11694 191.75187 114.96586 191.30797 114.81279 C
189.88498 114.32098 188.41380 113.81272 187.17591 112.97282 C
186.39694 112.44472 186.43181 111.42397 186.45477 110.67987 C
186.45676 110.65096 186.93298 96.36718 186.98797 94.74123 C
186.99789 94.22929 187.00894 93.74712 187.39276 93.72019 C
187.74879 93.72019 187.81285 94.20350 187.87890 94.71628 C
189.59074 108.70186 L
189.59981 109.48677 189.80476 112.09096 192.09288 112.59383 C
192.82280 112.75483 194.57178 112.91698 196.50387 112.91698 C
197.90872 112.91698 199.91282 112.82995 201.47272 112.41298 C
213.13389 109.28891 221.81783 101.77483 227.28274 90.08220 C
233.13175 77.56696 232.90072 69.88620 232.63200 60.99335 C
232.56283 58.72989 232.49197 56.39074 232.51578 53.86422 C
232.61981 42.57609 232.66573 7.76324 232.63398 1.13357 C
184.32085 1.13357 L
184.24375 3.46706 182.35672 5.27528 179.96173 5.27528 C
126.97597 5.27528 L
124.57984 5.27528 122.69480 3.46706 122.61798 1.13357 C
74.28076 1.15597 L
74.27169 7.77515 74.31874 42.60614 74.42135 53.86422 C
74.44743 56.55288 74.35134 59.08309 74.25978 61.52825 C
73.91452 70.69975 73.61546 78.62088 79.37065 90.93175 C
84.97871 102.92683 92.53729 109.23279 105.46384 112.69587 C
106.57077 112.99181 107.78995 113.13581 109.19282 113.13581 C
111.09600 113.13581 113.03688 112.86595 114.86183 112.59099 C
116.73978 112.30781 117.22592 110.01997 117.34894 108.67380 C
119.05880 94.71515 L
119.12598 94.20406 119.18891 93.72104 119.56677 93.72104 C
119.56791 93.72104 L
119.92876 93.74712 119.93981 94.20803 119.94973 94.73811 C
120.00472 96.36718 120.48180 110.65096 120.48180 110.67789 C
120.50674 111.42397 120.54076 112.44472 119.76180 112.97282 C
118.52476 113.81272 117.05272 114.32098 115.62973 114.81279 C
115.18696 114.96586 114.75099 115.11694 114.33572 115.27398 C
111.28677 116.42485 108.23981 117.52498 105.92674 118.35581 C
103.74094 119.14072 101.55288 119.91600 99.36454 120.69099 C
97.22948 121.44699 L
95.03858 122.22397 80.65644 126.81780 72.77754 129.17197 C
71.16435 129.65386 69.81732 129.97389 68.90769 130.16976 C
69.81676 130.36394 71.16350 130.68482 72.77443 131.16699 C
80.65843 133.51975 95.04057 138.11499 97.22948 138.89083 C
99.39827 139.65987 L
101.57499 140.42976 103.75285 141.20079 105.92674 141.98173 C
108.24775 142.81597 111.30378 143.91978 114.33572 145.06384 C
114.75099 145.21975 115.18583 145.37197 115.62973 145.52476 C
117.05272 146.01600 118.52476 146.52482 119.76180 147.36472 C
120.54076 147.89197 120.50674 148.91386 120.48180 149.65795 C
120.48180 149.68687 120.00472 163.97093 119.94973 165.59688 C
119.93981 166.13093 119.92876 166.59099 119.54494 166.61792 C
119.18891 166.61792 119.12598 166.13490 119.05880 165.62183 C
117.34781 151.65694 L
117.18680 149.92186 116.77975 148.26472 114.90094 147.88998 C
113.39575 147.58980 111.83187 147.43786 110.25298 147.43786 C
108.60775 147.43786 106.99087 147.60283 105.45080 147.92882 C
90.93458 150.99789 82.87767 162.88583 79.36668 169.69776 C
74.46671 179.20687 74.57528 189.84983 74.68157 200.14299 C
74.70255 202.22079 74.72580 204.36888 74.70567 206.47389 C
74.60334 217.56784 74.55572 252.83991 74.58775 259.25698 C
121.65392 259.25698 L
122.21376 259.25698 122.66986 258.79975 122.66986 258.23877 C
122.66986 255.93789 L
122.66986 253.81786 124.67792 251.95578 126.96576 251.95578 C
179.97080 251.95578 L
182.26091 251.95578 184.26784 253.81786 184.26784 255.93789 C
184.26784 258.23877 L
184.26784 258.79975 184.72479 259.25698 185.28491 259.25698 C
232.35080 259.25698 L
@c
F

@rax %Note: Object
67.60375 263.46784 239.33395 374.39093 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000  create_rgb_color set_solid_fill
232.21077 374.39093 m
74.76973 374.39093 L
75.28394 368.81093 76.47676 363.63883 79.14472 358.45994 C
84.08466 348.87288 92.63565 339.25890 105.39893 336.56088 C
106.96989 336.22894 108.61087 336.06482 110.25298 336.06482 C
111.83981 336.06482 113.42693 336.21789 114.94998 336.52176 C
117.05584 336.94186 117.44589 338.89578 117.59698 340.51096 C
119.30683 354.46876 L
119.36494 354.91380 119.42674 355.24375 119.54494 355.24375 C
119.54976 355.24375 L
119.66797 355.23581 119.69093 354.91890 119.70085 354.46876 C
119.70085 354.46876 120.23178 338.55789 120.23178 338.52898 C
120.25672 337.76787 120.27288 336.88998 119.62091 336.44891 C
118.02274 335.36494 115.96479 334.82381 114.24699 334.17496 C
111.45487 333.12076 108.65083 332.10283 105.84198 331.09398 C
102.94696 330.05480 100.04485 329.03178 97.14671 328.00394 C
94.96346 327.22980 80.56346 322.62973 72.70299 320.28293 C
69.66454 319.37499 67.60375 319.04589 67.60375 319.04589 C
67.60375 319.04589 69.66595 318.71594 72.70583 317.80800 C
80.56573 315.46091 94.96346 310.86198 97.14671 310.08784 C
100.04485 309.06000 102.94696 308.03783 105.84198 306.99780 C
108.65083 305.98980 111.45487 304.97074 114.24699 303.91682 C
115.96479 303.26797 118.02274 302.72797 119.62091 301.64287 C
120.27288 301.20180 120.25672 300.32391 120.23178 299.56280 C
120.23178 299.53389 119.70085 283.62274 119.70085 283.62274 C
119.69093 283.17288 119.66797 282.85597 119.54976 282.84775 C
119.54778 282.84690 119.54693 282.84690 119.54494 282.84690 C
119.42674 282.84690 119.36494 283.17685 119.30683 283.62274 C
117.59698 297.58082 L
117.43795 299.32583 116.77578 301.43197 114.89783 301.71487 C
113.09783 301.98699 111.13483 302.26195 109.19282 302.26195 C
107.90079 302.26195 106.61896 302.13978 105.39893 301.81493 C
93.22554 298.55282 84.77490 292.56690 78.86069 279.91474 C
75.88261 273.54387 74.52057 268.29383 73.94598 263.46784 C
122.23077 263.46784 L
122.91279 264.74400 L
123.96274 266.70784 126.36198 267.74787 128.58973 267.74787 C
178.81994 267.74787 L
181.02274 267.74787 182.76293 267.10186 183.80183 265.16098 C
184.70693 263.46784 L
232.73178 263.47181 L
232.06677 267.98400 230.65398 272.94293 227.79298 279.06491 C
222.28299 290.85194 213.30879 298.37792 201.53792 301.53090 C
200.10784 301.91272 198.23272 302.04397 196.50274 302.04397 C
194.54287 302.04397 192.76980 301.87587 192.03874 301.71487 C
189.99184 301.26472 189.35773 299.21896 189.34186 297.58082 C
187.63087 283.62274 L
187.57191 283.17685 187.51096 282.84690 187.39276 282.84690 C
187.39191 282.84690 187.38992 282.84690 187.38879 282.84775 C
187.27087 282.85597 187.24677 283.17288 187.23685 283.62274 C
187.23685 283.62274 186.70677 299.53389 186.70592 299.56280 C
186.68098 300.32391 186.66397 301.20180 187.31594 301.64287 C
188.91496 302.72797 190.97291 303.26797 192.68986 303.91682 C
195.48198 304.97074 198.28687 305.98980 201.09600 306.99780 C
203.99074 308.03783 206.89285 309.06000 209.79184 310.08784 C
211.97395 310.86198 226.37083 315.46091 234.23187 317.80800 C
237.27288 318.71594 239.33395 319.04589 239.33395 319.04589 C
239.33395 319.04589 237.27288 319.37499 234.23386 320.28293 C
226.37395 322.62973 211.97480 327.22980 209.79184 328.00394 C
206.89285 329.03178 203.99074 330.05480 201.09600 331.09398 C
198.28687 332.10283 195.48198 333.12076 192.68986 334.17496 C
190.97291 334.82381 188.91496 335.36494 187.31594 336.44891 C
186.66397 336.88998 186.68098 337.76787 186.70592 338.52898 C
186.70677 338.55789 187.23685 354.46876 187.23685 354.46876 C
187.24677 354.91890 187.27087 355.23581 187.38879 355.24375 C
187.39276 355.24375 L
187.51096 355.24375 187.57191 354.91380 187.63087 354.46876 C
189.34186 340.51096 L
189.35773 338.87282 189.91474 336.83386 191.98800 336.52176 C
193.86000 336.24000 195.98400 335.95087 198.07994 335.95087 C
199.25773 335.95087 200.42674 336.04186 201.53792 336.27685 C
214.32784 338.98082 222.06983 346.50595 227.79298 357.60983 C
230.53691 362.93386 231.71981 368.45093 232.21077 374.39093 C
@c
231.93893 374.14091 m
231.37483 367.63087 229.98387 362.40775 227.57074 357.72378 C
221.29597 345.54784 213.25096 339.00888 201.48576 336.52176 C
200.46586 336.30576 199.35184 336.20088 198.07994 336.20088 C
195.97691 336.20088 193.85178 336.49398 192.02485 336.76894 C
189.86088 337.09493 189.60293 339.49587 189.58989 340.54072 C
187.87890 354.50079 L
187.81285 355.01187 187.74879 355.49376 187.37178 355.49376 C
187.37093 355.49376 L
187.00894 355.46882 186.99789 354.98494 186.98683 354.47698 C
186.93298 352.84791 186.45676 338.56384 186.45591 338.53776 C
186.43181 337.79083 186.39694 336.76894 187.17591 336.24198 C
188.41380 335.40180 189.88583 334.89298 191.30995 334.40088 C
191.75272 334.24781 192.18784 334.09786 192.60283 333.94082 C
195.64186 332.79392 198.69194 331.69096 201.01096 330.85899 C
203.18088 330.07890 205.35392 329.30986 207.52696 328.54082 C
209.70794 327.76781 L
211.89798 326.99197 226.27899 322.39672 234.16299 320.04283 C
235.77392 319.56180 237.12094 319.24176 238.02973 319.04589 C
237.11981 318.85087 235.77279 318.52998 234.15987 318.04781 C
226.28381 315.69676 211.90082 311.10094 209.70794 310.32397 C
207.52696 309.55096 L
205.35392 308.78192 203.18088 308.01288 201.01096 307.23279 C
198.69676 306.40195 195.64894 305.30098 192.60283 304.15096 C
192.18784 303.99392 191.75187 303.84397 191.30882 303.68976 C
189.88583 303.19880 188.41380 302.68998 187.17591 301.84980 C
186.39780 301.32198 186.43181 300.30094 186.45591 299.55685 C
186.45676 299.52794 186.93298 285.24387 186.98683 283.61792 C
186.99789 283.10598 187.00894 282.62296 187.39276 282.59688 C
187.74879 282.59688 187.81285 283.07991 187.87890 283.59298 C
189.59187 297.57798 L
189.59981 298.36488 189.80476 300.96794 192.09288 301.47080 C
192.82195 301.63181 194.57093 301.79395 196.50274 301.79395 C
197.90872 301.79395 199.91282 301.70580 201.47386 301.28995 C
213.34876 298.10778 222.12794 290.59483 227.56592 278.95890 C
230.13780 273.45798 231.68976 268.60677 232.44180 263.72183 C
184.85688 263.71786 L
184.02293 265.27890 L
183.02882 267.13389 181.37594 267.99789 178.81994 267.99789 C
128.58973 267.99789 L
126.48898 267.99789 123.85191 267.02787 122.69197 264.86192 C
122.08082 263.71786 L
74.22888 263.71786 L
74.89162 269.02091 76.43962 274.14283 79.08775 279.80872 C
84.59178 291.58583 92.48088 298.09474 105.46384 301.57285 C
106.56992 301.86879 107.78995 302.01194 109.19282 302.01194 C
111.09685 302.01194 113.03688 301.74378 114.86098 301.46797 C
116.73978 301.18479 117.22592 298.89694 117.34894 297.55077 C
119.05880 283.59099 L
119.12598 283.07991 119.18891 282.59773 119.56592 282.59773 C
119.92876 282.62296 119.93981 283.08387 119.95087 283.61480 C
120.00472 285.24387 120.48180 299.52794 120.48180 299.55487 C
120.50674 300.30094 120.54076 301.32198 119.76180 301.84980 C
118.52277 302.68998 117.05272 303.19880 115.62888 303.68976 C
115.18583 303.84397 114.74986 303.99392 114.33572 304.15096 C
111.28791 305.30098 108.24094 306.40195 105.92674 307.23279 C
103.75682 308.01288 101.58378 308.78192 99.41074 309.55096 C
97.22948 310.32397 L
95.03575 311.10094 80.65247 315.69676 72.77698 318.04781 C
71.16463 318.52998 69.81676 318.85087 68.90769 319.04589 C
69.81591 319.24176 71.16350 319.56180 72.77357 320.04283 C
80.65757 322.39672 95.03972 326.99197 97.22948 327.76781 C
99.41074 328.54082 L
101.58378 329.30986 103.75682 330.07890 105.92674 330.85899 C
108.24491 331.69096 111.29698 332.79392 114.33572 333.94082 C
114.74986 334.09786 115.18583 334.24781 115.62888 334.40088 C
117.05187 334.89298 118.52277 335.40180 119.76180 336.24198 C
120.54076 336.76894 120.50674 337.79083 120.48180 338.53493 C
120.48180 338.56384 120.00472 352.84791 119.95087 354.47386 C
119.93981 355.00791 119.92876 355.46882 119.54494 355.49376 C
119.18891 355.49376 119.12598 355.01187 119.05880 354.49880 C
117.34781 340.53392 L
117.18680 338.79883 116.77890 337.14085 114.89981 336.76696 C
113.39575 336.46677 111.83187 336.31483 110.25298 336.31483 C
108.60690 336.31483 106.99087 336.47981 105.45080 336.80580 C
90.93458 339.87373 82.87795 351.76195 79.36668 358.57474 C
77.00258 363.16091 75.62693 368.11474 75.04356 374.14091 C
231.93893 374.14091 L
@c
F

@rax %Note: Object
1.73339 136.02643 71.57395 256.76050 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000  create_rgb_color set_solid_fill
35.98923 180.78746 m
36.83934 180.78746 37.53014 180.09751 37.53014 179.24740 C
37.53014 178.39757 36.83934 177.70649 35.98923 177.70649 C
35.13912 177.70649 34.44690 178.39757 34.44690 179.24740 C
34.44690 180.09751 35.13912 180.78746 35.98923 180.78746 C
@c
35.96343 155.28557 m
37.31698 155.28557 38.41824 154.18346 38.41824 152.82850 C
38.41824 146.53247 L
38.41824 145.17751 37.31698 144.07654 35.96343 144.07654 C
34.60791 144.07654 33.50721 145.17751 33.50721 146.53247 C
33.50721 152.82850 L
33.50721 154.18346 34.60791 155.28557 35.96343 155.28557 C
@c
37.13613 136.02643 m
48.21420 136.02643 59.86630 140.52047 66.25729 148.50454 C
66.52913 148.84441 66.37124 149.61146 65.61496 149.61146 C
63.90992 149.61146 62.52945 150.99449 62.52945 152.69953 C
62.52945 154.40258 63.90992 155.78561 65.61496 155.78561 C
66.57817 155.78561 67.43934 155.34340 68.00513 154.65146 C
68.26195 154.33654 68.70926 154.06157 69.10214 154.06157 C
69.37200 154.06157 69.61606 154.19140 69.75723 154.52957 C
72.80731 161.90050 72.85720 171.88356 63.23811 172.88844 C
62.98016 172.91650 62.72192 172.92954 62.46539 172.92954 C
60.28413 172.92954 58.12526 172.02756 56.01628 171.40847 C
54.24321 170.88860 52.71931 170.39764 51.04942 170.39764 C
50.49893 170.39764 49.93398 170.45036 49.33843 170.57254 C
41.23928 172.24044 43.45143 187.47241 51.34110 187.47241 C
64.74898 187.47241 L
64.74898 255.90954 L
64.74898 256.37953 64.36828 256.76050 63.89830 256.76050 C
8.41124 256.76050 L
7.94239 256.76050 7.56113 256.37953 7.56113 255.90954 C
7.56113 187.47241 L
20.21244 187.47241 L
27.95414 187.47241 30.14646 171.94762 22.38917 170.30863 C
21.83102 170.19043 21.28337 170.14054 20.74309 170.14054 C
18.86825 170.14054 17.07392 170.75254 15.17726 171.31550 C
13.72394 171.74750 12.20031 172.05052 10.69710 172.05052 C
9.67011 172.05052 8.65446 171.90850 7.67594 171.57061 C
3.83102 170.24343 2.12315 167.70643 1.80028 163.65061 C
0.55531 148.02945 16.99313 138.95745 30.54501 136.58343 C
32.68602 136.20954 34.90016 136.02643 37.13613 136.02643 C
@c
35.98923 181.03748 m
35.00135 181.03748 34.19745 180.23443 34.19745 179.24740 C
34.19745 178.26038 35.00135 177.45647 35.98923 177.45647 C
36.97597 177.45647 37.78016 178.26038 37.78016 179.24740 C
37.78016 180.23443 36.97597 181.03748 35.98923 181.03748 C
@c
35.96343 155.53559 m
34.47014 155.53559 33.25720 154.32151 33.25720 152.82850 C
33.25720 146.53247 L
33.25720 145.04060 34.47014 143.82652 35.96343 143.82652 C
37.45446 143.82652 38.66825 145.04060 38.66825 146.53247 C
38.66825 152.82850 L
38.66825 154.32151 37.45446 155.53559 35.96343 155.53559 C
@c
37.13613 136.27644 m
34.89307 136.27644 32.68998 136.46353 30.58809 136.83146 C
16.01802 139.38151 0.87194 148.85660 2.04945 163.63049 C
2.37402 167.70643 4.13490 170.08356 7.75843 171.33562 C
8.65134 171.64261 9.64006 171.80050 10.69710 171.80050 C
12.02315 171.80050 13.46542 171.56154 15.10526 171.07654 C
15.75014 170.88350 L
17.44526 170.37241 19.04513 169.89052 20.74309 169.89052 C
21.33014 169.89052 21.88545 169.94551 22.44132 170.06343 C
26.43931 170.90844 27.81496 175.24063 27.40592 179.15839 C
26.96117 183.41348 24.34706 187.72243 20.21244 187.72243 C
7.81115 187.72243 L
7.81115 255.90954 L
7.81115 256.24063 8.08016 256.51049 8.41124 256.51049 C
63.89830 256.51049 L
64.22910 256.51049 64.49896 256.24063 64.49896 255.90954 C
64.49896 187.72243 L
51.34110 187.72243 L
47.11890 187.72243 44.48013 183.49739 44.05408 179.32252 C
43.66120 175.46343 45.12699 171.18539 49.28740 170.32847 C
49.87899 170.20658 50.45528 170.14762 51.04942 170.14762 C
52.63030 170.14762 54.04819 170.56545 55.69002 171.05244 C
56.08743 171.16951 L
56.56422 171.30954 57.04526 171.46346 57.52828 171.61937 C
59.14431 172.14038 60.81506 172.67953 62.46539 172.67953 C
62.71824 172.67953 62.97024 172.66564 63.21231 172.64041 C
66.34006 172.31357 68.60608 171.00454 69.94743 168.75354 C
72.30728 164.79043 71.27717 158.85638 69.52507 154.62454 C
69.43691 154.41137 69.30227 154.31159 69.10214 154.31159 C
68.81499 154.31159 68.43543 154.52050 68.19817 154.81049 C
67.56123 155.58860 66.62013 156.03562 65.61496 156.03562 C
63.77528 156.03562 62.27915 154.53836 62.27915 152.69953 C
62.27915 150.85843 63.77528 149.36145 65.61496 149.36145 C
65.90013 149.36145 66.02712 149.22454 66.08296 149.10746 C
66.16545 148.93654 66.13342 148.74945 66.06227 148.66044 C
60.03921 141.13644 48.68532 136.27644 37.13613 136.27644 C
@c
F

@rax %Note: Object
1.79972 4.82995 71.64028 125.56403 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000  create_rgb_color set_solid_fill
36.05556 80.80299 m
36.90567 80.80299 37.59647 81.49294 37.59647 82.34306 C
37.59647 83.19288 36.90567 83.88397 36.05556 83.88397 C
35.20545 83.88397 34.51323 83.19288 34.51323 82.34306 C
34.51323 81.49294 35.20545 80.80299 36.05556 80.80299 C
@c
36.02976 106.30488 m
37.38331 106.30488 38.48457 107.40699 38.48457 108.76195 C
38.48457 115.05798 L
38.48457 116.41294 37.38331 117.51392 36.02976 117.51392 C
34.67424 117.51392 33.57354 116.41294 33.57354 115.05798 C
33.57354 108.76195 L
33.57354 107.40699 34.67424 106.30488 36.02976 106.30488 C
@c
37.20246 125.56403 m
48.28054 125.56403 59.93263 121.06998 66.32362 113.08592 C
66.59546 112.74605 66.43757 111.97899 65.68129 111.97899 C
63.97625 111.97899 62.59578 110.59597 62.59578 108.89093 C
62.59578 107.18787 63.97625 105.80485 65.68129 105.80485 C
66.64450 105.80485 67.50567 106.24706 68.07146 106.93899 C
68.32828 107.25392 68.77559 107.52888 69.16847 107.52888 C
69.43833 107.52888 69.68239 107.39906 69.82356 107.06088 C
72.87364 99.68995 72.92353 89.70690 63.30444 88.70202 C
63.04649 88.67395 62.78825 88.66091 62.53172 88.66091 C
60.35046 88.66091 58.19159 89.56290 56.08261 90.18198 C
54.30954 90.70186 52.78564 91.19282 51.11575 91.19282 C
50.56526 91.19282 50.00031 91.14009 49.40476 91.01792 C
41.30561 89.35002 43.51776 74.11805 51.40743 74.11805 C
64.81531 74.11805 L
64.81531 5.68091 L
64.81531 5.21093 64.43461 4.82995 63.96463 4.82995 C
8.47757 4.82995 L
8.00872 4.82995 7.62746 5.21093 7.62746 5.68091 C
7.62746 74.11805 L
20.27877 74.11805 L
28.02047 74.11805 30.21279 89.64283 22.45550 91.28183 C
21.89735 91.40003 21.34970 91.44992 20.80942 91.44992 C
18.93458 91.44992 17.14025 90.83792 15.24359 90.27496 C
13.79027 89.84296 12.26665 89.53994 10.76343 89.53994 C
9.73644 89.53994 8.72079 89.68195 7.74227 90.01984 C
3.89735 91.34702 2.18948 93.88403 1.86661 97.93984 C
0.62164 113.56101 17.05946 122.63301 30.61134 125.00702 C
32.75235 125.38091 34.96649 125.56403 37.20246 125.56403 C
@c
36.05556 80.55298 m
35.06769 80.55298 34.26378 81.35603 34.26378 82.34306 C
34.26378 83.33008 35.06769 84.13398 36.05556 84.13398 C
37.04230 84.13398 37.84649 83.33008 37.84649 82.34306 C
37.84649 81.35603 37.04230 80.55298 36.05556 80.55298 C
@c
36.02976 106.05487 m
34.53647 106.05487 33.32353 107.26894 33.32353 108.76195 C
33.32353 115.05798 L
33.32353 116.54986 34.53647 117.76394 36.02976 117.76394 C
37.52079 117.76394 38.73458 116.54986 38.73458 115.05798 C
38.73458 108.76195 L
38.73458 107.26894 37.52079 106.05487 36.02976 106.05487 C
@c
37.20246 125.31402 m
34.95940 125.31402 32.75631 125.12693 30.65443 124.75899 C
16.08435 122.20894 0.93827 112.73386 2.11578 97.95997 C
2.44035 93.88403 4.20123 91.50690 7.82476 90.25483 C
8.71767 89.94784 9.70639 89.78995 10.76343 89.78995 C
12.08948 89.78995 13.53175 90.02891 15.17159 90.51392 C
15.81647 90.70696 L
17.51159 91.21805 19.11146 91.69994 20.80942 91.69994 C
21.39647 91.69994 21.95178 91.64494 22.50765 91.52702 C
26.50564 90.68202 27.88129 86.34983 27.47225 82.43206 C
27.02750 78.17698 24.41339 73.86803 20.27877 73.86803 C
7.87748 73.86803 L
7.87748 5.68091 L
7.87748 5.34983 8.14649 5.07997 8.47757 5.07997 C
63.96463 5.07997 L
64.29543 5.07997 64.56529 5.34983 64.56529 5.68091 C
64.56529 73.86803 L
51.40743 73.86803 L
47.18523 73.86803 44.54646 78.09307 44.12041 82.26794 C
43.72753 86.12702 45.19332 90.40507 49.35373 91.26198 C
49.94532 91.38387 50.52161 91.44283 51.11575 91.44283 C
52.69663 91.44283 54.11452 91.02501 55.75635 90.53802 C
56.15376 90.42094 L
56.63055 90.28091 57.11159 90.12699 57.59461 89.97109 C
59.21065 89.45008 60.88139 88.91093 62.53172 88.91093 C
62.78457 88.91093 63.03657 88.92482 63.27865 88.95005 C
66.40639 89.27688 68.67241 90.58592 70.01376 92.83691 C
72.37361 96.80003 71.34350 102.73408 69.59140 106.96592 C
69.50324 107.17909 69.36860 107.27887 69.16847 107.27887 C
68.88132 107.27887 68.50176 107.06995 68.26450 106.77997 C
67.62756 106.00186 66.68646 105.55483 65.68129 105.55483 C
63.84161 105.55483 62.34548 107.05209 62.34548 108.89093 C
62.34548 110.73203 63.84161 112.22901 65.68129 112.22901 C
65.96646 112.22901 66.09345 112.36592 66.14929 112.48299 C
66.23178 112.65392 66.19975 112.84101 66.12860 112.93002 C
60.10554 120.45402 48.75165 125.31402 37.20246 125.31402 C
@c
F

%%PageTrailer
@rs
@rs
%%Trailer
@EndSysCorelDict
end
%%DocumentSuppliedResources: procset wCorel19Dict 19.0 0
%%EOF
