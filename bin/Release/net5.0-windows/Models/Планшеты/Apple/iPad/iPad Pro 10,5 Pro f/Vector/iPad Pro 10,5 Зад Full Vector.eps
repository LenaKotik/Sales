%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 45 42 557 774 
%%LanguageLevel: 2
%%Creator: CorelDRAW 2017
%%Title: iPad Pro 10,5 Зад Full Vector...
%%CreationDate: Thu May 30 17:43:06 2019
%%DocumentProcessColors: Cyan Magenta Yellow Black 
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
/AutoFlatness false def
/AutoSteps 0 def
/CMYKMarks true def
/DocPsLevel 2 def
%Build: CorelDRAW 2017 Версия 19.1.0.419
/EpsFile true def
%%BeginResource: procset wCorel19Dict 19.0 0
/wCorel19Dict 300 dict def wCorel19Dict begin
%----------------------------------------------------------------------------
% Core Corel PostScript prolog functions
/bd{bind def}bind def/ld{load def}bd/xd{exch def}bd/rp{{pop}repeat}bd/dexec{
exch begin cvx exec end}bd/@cp/closepath ld/@gs/gsave ld/@gr/grestore ld/@np
/newpath ld/Tl/translate ld/$sv 0 def/@sv{/$sv save def}bd/@rs{$sv restore}bd
/spg/showpage ld/showpage{}bd currentscreen/@dsp xd/$dsp/@dsp def/$dsa xd/$dsf
xd/$sdf false def/$SDF false def/$Scra 0 def/SetScr/setscreen ld/@ss{2 index 0
eq{$dsf 3 1 roll 4 -1 roll pop}if exch $Scra add exch load SetScr}bd
/SeparationMode where{pop}{/SeparationMode/Composite def}ifelse
/SeparationPlateName where{pop}{/SeparationPlateName null def}ifelse
/SeparateInColor where{pop}{/SeparateInColor false def}ifelse/EpsFile where
{pop}{/EpsFile false def}ifelse/FillOverprint false def/$fil 0 def
/OutlineOverprint 0 def/$PF false def/$bkg false def/CurrentOverprint false def
matrix currentmatrix/$ctm xd/$ptm matrix def/$ttm matrix def/$stm matrix def
/$ffpnt true def/CorelDrawReencodeVect[16#0/grave 16#5/breve 16#6/dotaccent
16#8/ring 16#A/hungarumlaut 16#B/ogonek 16#C/caron 16#D/dotlessi
16#27/quotesingle 16#60/grave 16#7C/bar 16#80/Euro
16#82/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
16#88/circumflex/perthousand/Scaron/guilsinglleft/OE
16#91/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
16#98/tilde/trademark/scaron/guilsinglright/oe 16#9F/Ydieresis
16#A1/exclamdown/cent/sterling/currency/yen/brokenbar/section
16#a8/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/minus/registered/macron
16#b0/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
16#b8/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
16#c0/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
16#c8/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
16#d0/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
16#d8/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
16#e0/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
16#e8/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
16#f0/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
16#f8/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/get_ps_level/languagelevel where{pop systemdict/languagelevel get exec}{1}
ifelse def/Level2 get_ps_level 2 ge def/Level3 get_ps_level 3 ge def
/AdobeDistiller/product where{pop systemdict/setdistillerparams known product
(Adobe PostScript Parser)ne and}{false}ifelse def/InRipSeparation
AdobeDistiller{false}{Level2{currentpagedevice/Separations 2 copy known{get}{
pop pop false}ifelse}{false}ifelse}ifelse def/ColorSeparationLevel1 1 0 0 0
gsave setcmykcolor currentcmykcolor grestore add add add 0 ne 0 1 0 0 gsave
setcmykcolor currentcmykcolor grestore add add add 0 ne 0 0 1 0 gsave
setcmykcolor currentcmykcolor grestore add add add 0 ne 0 0 0 1 gsave
setcmykcolor currentcmykcolor grestore add add add 0 ne and and and not def
/ColorSeparation/LumSepsDict where{pop false}{/AldusSepsDict where{pop false}{
InRipSeparation{true}{ColorSeparationLevel1}ifelse}ifelse}ifelse def
/IsColorDevice/deviceinfo where{pop deviceinfo/Colors known{deviceinfo/Colors
get exec 1 gt}{false}ifelse}{/statusdict where{pop statusdict/processcolors
known{statusdict/processcolors get exec 1 gt}{false}ifelse}{false}ifelse}
ifelse def/get_simulate_devicen get_ps_level 2 eq{{SeparationMode/OnHost ne
InRipSeparation AdobeDistiller or and}bind}{false}ifelse def/DocGrayScaleSpace
[/DeviceGray]def/DocRgbSpace[/DeviceRGB]def/DocCmykSpace[/DeviceCMYK]def
/DocLabSpace[/CIEBasedABC <</BlackPoint[0 0 0]/WhitePoint[0.9637 1.0000 0.8241
]/RangeABC[0 100 -128 127 -128 127]/DecodeABC[{16 add 116 div}bind{500 div}
bind{200 div}bind]/MatrixABC[1 1 1 1 0 0 0 0 -1]/DecodeLMN[{dup 0.206897 ge{dup
dup mul mul}{0.137931 sub 0.128419 mul}ifelse 0.9637 mul}bind{dup 0.206897
ge{dup dup mul mul}{0.137931 sub 0.128419 mul}ifelse 1.0000 mul}bind{dup
0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul}ifelse 0.8241 mul}bind]
>>]def/validate_cie_colorspace_whitepoint{load dup aload pop/WhitePoint get 1
1.0 put pop}bd/set_cie_colorspaces{/DocGrayScaleSpaceCIE where{pop
/DocGrayScaleSpaceCIE validate_cie_colorspace_whitepoint/DocGrayScaleSpace xd
DocGrayScaleSpace aload pop begin pop/DecodeA where{pop DecodeA type/arraytype
eq{DecodeA aload pop/DecodeA exch def}if}if end}if/DocRgbSpaceCIE where{pop
/DocRgbSpaceCIE validate_cie_colorspace_whitepoint/DocRgbSpace xd}if
/DocCmykSpaceCIE where{pop/DocCmykSpaceCIE validate_cie_colorspace_whitepoint
/DocCmykSpace xd}if}bd/set_rendering_intent{Level3{findcolorrendering{
/ColorRendering findresource setcolorrendering}{dup/DefaultColorRendering eq{
pop}{/ColorRendering findresource setcolorrendering}}ifelse}{pop}ifelse}bd
/findcmykcustomcolor where{pop}{/findcmykcustomcolor{5 array astore}def}ifelse
/setcustomcolor where SeparationMode/OnHost ne and{pop}{/tint_cmyk_color{5 -1
roll dup 1 ge{pop}{4{dup 6 -1 roll mul exch}repeat pop}ifelse}bd
/setprocesscolor_5{SepMode_5 0 eq{SetCmyk_5}{SepsColor not{4 1 roll pop pop pop
1 exch sub SetGry}{SetCmyk_5}ifelse}ifelse}bd/setcustomcolor{exch aload pop
SepMode_5 0 eq{pop tint_cmyk_color setprocesscolor_5}{CurrentInkName_5 eq{4
index}{0}ifelse 6 1 roll 5 rp 1 sub neg SetGry}ifelse}bd}ifelse
/convert_rgb_to_cmyk{dup type/dicttype eq{}{3{1 exch sub 3 1 roll}repeat 3 copy
min min 3{dup 5 -1 roll sub neg exch}repeat}ifelse}bd/safe_setcolorspace{dup
currentcolorspace eq{pop}{setcolorspace}ifelse}bd/safe_setoverprint{dup type
/booleantype eq{dup currentoverprint ne{setoverprint}{pop}ifelse}{1 eq
setoverprint}ifelse}bd/is_cmyk_channel_name{/channel_name xd channel_name/Cyan
eq channel_name/Magenta eq or channel_name/Yellow eq or channel_name/Black eq
or{true}{false}ifelse}bd/is_rgb_channel_name{/channel_name xd channel_name/Red
eq channel_name/Green eq or channel_name/Blue eq or{true}{false}ifelse}bd
/is_spot_channel_name{/channel_name xd channel_name is_cmyk_channel_name
channel_name is_rgb_channel_name or channel_name/Gray eq or{false}{true}ifelse
}bd/spot_tint_transform_proc{/alternativeSpace xd/alternativeColors xd/tint xd
alternativeSpace DocLabSpace eq{/mixMethod/Additive def/altSpaceNumChannels 3
def}{alternativeSpace DocCmykSpace eq{/mixMethod/Subtractive def
/altSpaceNumChannels 4 def}{alternativeSpace DocRgbSpace eq{/mixMethod
/Additive def/altSpaceNumChannels 3 def}{alternativeSpace DocGrayScaleSpace eq
{/mixMethod/Additive def/altSpaceNumChannels 1 def}if}ifelse}ifelse}ifelse
alternativeSpace DocLabSpace eq{alternativeColors aload pop tint mul 3 1 roll
tint mul 3 1 roll dup 100 exch sub 1 tint sub mul add 3 1 roll}{/tintedColor
altSpaceNumChannels{0.0}repeat altSpaceNumChannels array astore def 0 1
altSpaceNumChannels 1 sub{/altChannelIndex exch def alternativeColors
altChannelIndex get mixMethod/Additive eq{1.0 exch sub tint mul 1.0 exch sub}{
tint mul}ifelse tintedColor altChannelIndex 3 2 roll put}for tintedColor aload
pop}ifelse}bd/devicen_colorant_mixer_proc{/numChannels xd/alternativeSpace xd
/channelNames xd/alternativeColors xd numColorants array astore/colorants xd
/is_spot_channel_name_loc{is_spot_channel_name}bind def alternativeSpace
DocCmykSpace eq{/mixMethod/Subtractive def/altSpaceNumChannels 4 def
/is_spot_channel_name_loc{is_cmyk_channel_name not}bind def}{alternativeSpace
DocRgbSpace eq{/mixMethod/Additive def/altSpaceNumChannels 3 def
/is_spot_channel_name_loc{is_rgb_channel_name not}bind def}{alternativeSpace
DocGrayScaleSpace eq{/mixMethod/Additive def/altSpaceNumChannels 1 def
/is_spot_channel_name_loc{/Gray ne}bind def}if}ifelse}ifelse mixMethod
/Additive eq{/mixedColor altSpaceNumChannels{0.0}repeat altSpaceNumChannels
array astore def/bProcessPlateTinted false def 0 1 numChannels 1 sub{
/channelIndex exch def channelNames channelIndex get is_spot_channel_name_loc
/bSpotChannel xd/sourceChannel colorants channelIndex get def/bWhiteBackground
0 mixedColor{add}forall altSpaceNumChannels div 0.999 gt bProcessPlateTinted
and def bSpotChannel bProcessPlateTinted not and{/bSpotChannel false def}if 0 1
altSpaceNumChannels 1 sub{/altChannelIndex exch def/mixedChannel mixedColor
altChannelIndex get def sourceChannel alternativeColors channelIndex get
altChannelIndex get 1.0 exch sub mul 1.0 exch sub dup 1.0 gt{pop 1.0}if dup 0.0
lt{pop 0.0}if bSpotChannel{sourceChannel 0.0 gt{mixedChannel mul}{pop
mixedChannel}ifelse}{/bProcessPlateTinted true def globaldict begin
/bSkipDeviceNImage where{pop false}{true}ifelse end DevicenImage and{pop
sourceChannel alternativeColors channelIndex get altChannelIndex get mul
mixedChannel add}{mixedChannel add}ifelse}ifelse dup 1.0 gt{pop 1.0}if dup 0.0
lt{pop 0.0}if mixedColor altChannelIndex 3 2 roll put}for}for}{/mixedColor
altSpaceNumChannels{1}repeat altSpaceNumChannels array astore def 0 1
altSpaceNumChannels 1 sub{/targetIndex exch def 0 1 numColorants 1 sub{
/sourceIndex exch def colorants sourceIndex get alternativeColors sourceIndex
get targetIndex get mul 1 exch sub mixedColor targetIndex get mul mixedColor
targetIndex 3 2 roll put}for mixedColor targetIndex 1 mixedColor targetIndex
get sub put}for}ifelse mixedColor aload pop}bd/ColorSpec 9 dict begin/color[]
def/names[]def/num 0 def/ColorModel null def/ColorSpace[]def/set_color{
ColorSeparationLevel1{convert_to_cmyk/color get aload pop setcmykcolor}{
ColorSpace safe_setcolorspace color aload pop setcolor}ifelse}bd
/separate_set_color{SeparationMode/OnHost eq{separate_color{/set_color dexec
true}{pop currentoverprint{false}{SeparateInColor{0 0 0 0 SetCmyk_5 true}{1
SetGry true}ifelse}ifelse}ifelse}{set_color true}ifelse}bd/separate_color{
currentdict false}bd/convert_to_cmyk{currentdict}bd currentdict end def
/GrayscaleColorSpec ColorSpec 9 dict copy begin/names{/Black}def/num 1 def
/ColorModel/Grayscale def/ColorSpace DocGrayScaleSpace def/separate_color{
currentdict false SeparationMode/OnHost eq{SeparationPlateName/Black eq{
SeparateInColor{pop convert_to_cmyk true}{pop true}ifelse}if}if}bd
/convert_to_cmyk{0 0 0 color aload pop 1 exch sub create_cmyk_color}bd
currentdict end def/create_grayscale_color{GrayscaleColorSpec 9 dict copy begin
/color exch 1 array astore def/ColorSpace DocGrayScaleSpace def currentdict end
}bd/RgbColorSpec ColorSpec 9 dict copy begin/names{/Red/Green/Blue}def/num 3
def/ColorModel/Rgb def/ColorSpace DocRgbSpace def/separate_color{
convert_to_cmyk/separate_color dexec}bd/convert_to_cmyk{color aload pop
convert_rgb_to_cmyk create_cmyk_color}bd currentdict end def/create_rgb_color{
RgbColorSpec 9 dict copy begin 3 array astore/color exch def/ColorSpace
DocRgbSpace def currentdict end}bd/HsbColorSpec ColorSpec 9 dict copy begin
/names{/Hue/Saturation/Brightness}def/num 3 def/ColorModel/Hsb def/ColorSpace
DocRgbSpace def/separate_color{convert_to_cmyk/separate_color dexec}bd
/convert_to_cmyk{color aload pop hsb2rgb convert_rgb_to_cmyk create_cmyk_color
}bd/convert_to_rgb{color aload pop hsb2rgb create_rgb_color}bd currentdict end
def/create_hsb_color{HsbColorSpec 9 dict copy begin 3 array astore/color exch
def/ColorSpace DocRgbSpace def currentdict end}bd/CmykColorSpec ColorSpec 9
dict copy begin/names{/Cyan/Magenta/Yellow/Black}def/num 4 def/ColorModel/Cmyk
def/ColorSpace DocCmykSpace def/separate_color{currentdict false
SeparationPlateIndex 0 ge SeparationPlateIndex 3 le and{color
SeparationPlateIndex get dup 0 gt{3 1 roll pop pop SeparateInColor{0 0 0 4
SeparationPlateIndex roll create_cmyk_color true}{1 exch sub
create_grayscale_color true}ifelse}{pop}ifelse}if}bd/convert_to_cmyk{
currentdict}bd currentdict end def/create_cmyk_color{CmykColorSpec 9 dict copy
begin 4 array astore/color exch def/ColorSpace DocCmykSpace def currentdict end
}bd/SpotColorSpec ColorSpec 9 dict copy begin/num 1 def/ColorModel/Spot def
/set_color{ColorSeparationLevel1{color aload pop get_cmyk_alternative_color
/color get aload pop names aload pop findcmykcustomcolor exch setcustomcolor}{
ColorSpace safe_setcolorspace color aload pop setcolor}ifelse}bd
/separate_color{currentdict false SeparationPlateIndex 4 eq{names aload pop
SeparationPlateName eq{color aload pop dup 0 gt{3 1 roll pop pop
SeparateInColor{pop convert_to_cmyk true}{1 exch sub create_grayscale_color
true}ifelse}{pop}ifelse}if}if}bd/convert_to_cmyk{/alternativeSpace ColorSpace 2
get def/tintTransformProc ColorSpace 3 get def alternativeSpace DocCmykSpace eq
{color aload pop tintTransformProc create_cmyk_color}{alternativeSpace
DocRgbSpace eq{color aload pop tintTransformProc create_rgb_color
/convert_to_cmyk dexec}{alternativeSpace DocGrayScaleSpace eq{0 0 0 color aload
pop 1 sub create_cmyk_color}{0 0 0 1 create_cmyk_color}ifelse}ifelse}ifelse}bd
/get_cmyk_alternative_color{/alternativeSpace ColorSpace 2 get def
alternativeSpace DocCmykSpace eq{alternativeColor aload pop create_cmyk_color}
{alternativeSpace DocRgbSpace eq{alternativeColor aload pop create_rgb_color
/convert_to_cmyk dexec}{alternativeSpace DocGrayScaleSpace eq{alternativeColor
aload pop create_grayscale_color/convert_to_cmyk dexec}{0 0 0 1
create_cmyk_color}ifelse}ifelse}ifelse}bd currentdict end def
/create_spot_colorspace{load/alternativeSpace xd/alternativeColor xd/name xd[
/Separation name alternativeSpace[alternativeColor alternativeSpace
/spot_tint_transform_proc cvx]cvx]}bd/create_spot_color{SpotColorSpec 9 dict
copy begin dup type/arraytype ne{create_spot_colorspace}if/ColorSpace xd/color
exch 1 array astore def ColorSpace 1 get 1 array astore/names xd currentdict
end}bd/DevicenColorSpec SpotColorSpec 9 dict copy begin/ColorModel/DeviceN def
/set_color{Level3{ColorSpace safe_setcolorspace color aload pop setcolor}{
ColorSpace 2 get setcolorspace color aload pop ColorSpace 3 get exec setcolor}
ifelse}bd/separate_color{currentdict false/PlateIndex -1 def 0 1 num 1 sub{dup
names exch get SeparationPlateName eq{/PlateIndex xd exit}if pop}for PlateIndex
0 ge{color PlateIndex get dup 0 gt{SeparateInColor{num 1 sub{0}repeat num
PlateIndex roll ColorSpace create_devicen_color/convert_to_cmyk dexec true}{1
exch sub create_grayscale_color true}ifelse 4 2 roll pop pop}{pop}ifelse}if}bd
/get_ink_as_spot{dup/indexInk xd dup color exch get exch names exch get[1.0 num
1 sub{0}repeat num indexInk roll ColorSpace 3 get exec]ColorSpace 2 get
create_spot_color}bd currentdict end def/create_devicen_colorspace{
/numColorants xd load/alternativeSpace xd bind/tintTransform exch def/names xd
[/DeviceN names alternativeSpace/tintTransform load]}bd/create_devicen_color{
DevicenColorSpec 9 dict copy begin dup type/arraytype ne{
create_devicen_colorspace}if/ColorSpace xd/num ColorSpace 1 get length def
/names ColorSpace 1 get def num array astore/color xd currentdict end}bd
/RegistrationColorSpec ColorSpec 9 dict copy begin/num 1 def/ColorModel
/Registration def/ColorSpace{[/Separation/All DocCmykSpace{dup dup dup}]}def
/names[/All]def/set_color{ColorSeparationLevel1{DocGrayScaleSpace
safe_setcolorspace color aload pop 1 exch sub setcolor}{ColorSpace
safe_setcolorspace color aload pop setcolor}ifelse}bd/separate_color{
SeparateInColor{convert_to_cmyk true}{color aload pop 1 exch sub
create_grayscale_color true}ifelse}bd/convert_to_cmyk{color aload pop dup dup
dup create_cmyk_color}bd currentdict end def/create_registration_color{
RegistrationColorSpec 9 dict copy begin 1 array astore/color xd currentdict end
}bd/LabColorSpec ColorSpec 9 dict copy begin/names{/L/a/b}def/num 3 def
/ColorModel/Lab def/ColorSpace DocLabSpace def/separate_color{convert_to_cmyk
/separate_color dexec}bd/convert_to_cmyk{0 0 0 0 create_cmyk_color}bd
currentdict end def/create_lab_color{LabColorSpec 9 dict copy begin 3 array
astore/color exch def/ColorSpace DocLabSpace def currentdict end}bd
/set_solid_fill{/FillColor xd/$fil 0 def}bd/set_outline{/OutlineColor xd}bd
/CheckLevelCompatibility{/DocPsLevel where{pop DocPsLevel get_ps_level gt{@np
/Courier findfont 12 scalefont setfont 72 144 m
(The PostScript level of Corel document is higher than the PostScript)show 72
132 m(level of this device. Change the PS Level in the Corel application)show
72 120 m(by selecting the PostScript tab in the print dialog, and selecting)
show 72 108 m(document level from the Compatibility drop down list.)show flush
spg quit}if}if}bd/@BeginSysCorelDict{systemdict/Corel30Dict known{systemdict
/Corel30Dict get exec}if systemdict/CorelLexDict known{1 systemdict
/CorelLexDict get exec}if}bd/@EndSysCorelDict{systemdict/Corel30Dict known
{end}if/EndCorelLexDict where{pop EndCorelLexDict}if}bd/AutoFlatness where{pop
AutoFlatness{/@ifl{dup currentflat exch sub 10 gt{
([Error: PathTooComplex; OffendingCommand: AnyPaintingOperator]\n)print flush
@np exit}{currentflat 2 add setflat}ifelse}bd/@fill/fill ld/fill{currentflat{
{@fill}stopped{@ifl}{exit}ifelse}bind loop setflat}bd/@eofill/eofill ld/eofill
{currentflat{{@eofill}stopped{@ifl}{exit}ifelse}bind loop setflat}bd/@clip
/clip ld/clip{currentflat{{@clip}stopped{@ifl}{exit}ifelse}bind loop setflat}
bd/@eoclip/eoclip ld/eoclip{currentflat{{@eoclip}stopped{@ifl}{exit}ifelse}
bind loop setflat}bd/@stroke/stroke ld/stroke{currentflat{{@stroke}stopped
{@ifl}{exit}ifelse}bind loop setflat}bd}if}if/@ssa Level2{{true
setstrokeadjust}}{{}}ifelse bd/d/setdash ld/j/setlinejoin ld/J/setlinecap ld/M
/setmiterlimit ld/w/setlinewidth ld/O{/FillOverprint xd}bd/R{/OutlineOverprint
xd}bd/W/eoclip ld/c/curveto ld/C/c ld/l/lineto ld/L/l ld/rl/rlineto ld/m
/moveto ld/n/newpath ld/N/newpath ld/P{11 rp}bd/u{}bd/U{}bd/A{pop}bd/q/@gs ld
/Q/@gr ld/&{}bd/@j{@sv @np}bd/@J{@rs}bd/g{1 exch sub 0 0 0 4 roll 3
create_cmyk_color set_solid_fill/$fil 0 def}bd/G{1 sub neg 0 0 0 4 -1 roll
create_cmyk_color set_outline}bd/i{dup 0 ne{setflat}{pop}ifelse}bd/v{4 -2 roll
2 copy 6 -2 roll c}bd/V/v ld/y{2 copy c}bd/Y/y ld/@w{matrix rotate/$ptm xd
matrix scale $ptm dup concatmatrix/$ptm xd 1 eq{$ptm exch dup concatmatrix
/$ptm xd}if/patternScallingMatrix where{pop patternScallingMatrix $ptm matrix
concatmatrix/$ptm xd}if 1 w}bd/@g{1 eq dup/$sdf xd{/$scp xd/$sca xd/$scf xd}if
}bd/@G{1 eq dup/$SDF xd{/$SCP xd/$SCA xd/$SCF xd}if}bd/@D{2 index 0 eq{$dsf 3 1
roll 4 -1 roll pop}if 3 copy exch $Scra add exch load SetScr/$dsp xd/$dsa xd
/$dsf xd}bd/$ngx{$SDF{$SCF SeparationMode/Composite eq{$SCA}{$dsa}ifelse $SCP
@ss}if}bd/min{2 copy le{pop}{exch pop}ifelse}bd/max{2 copy ge{pop}{exch pop}
ifelse}bd/in_range{3 -1 roll min max}bd/InRange/in_range load bd/@sqr{dup 0 rl
dup 0 exch rl neg 0 rl @cp}bd/currentscale{1 0 dtransform matrix defaultmatrix
idtransform dup mul exch dup mul add sqrt 0 1 dtransform matrix defaultmatrix
idtransform dup mul exch dup mul add sqrt}bd/@unscale{}bd/wDstChck{2 1 roll dup
3 -1 roll eq{1 add}if}bd/@dot{dup mul exch dup mul add 1 exch sub}bd/@lin{exch
pop abs 1 exch sub}bd/cmyk2rgb{3{dup 5 -1 roll add 1 exch sub dup 0 lt{pop 0}
if exch}repeat pop}bd/rgb2cmyk{3{1 exch sub 3 1 roll}repeat 3 copy min min 3{
dup 5 -1 roll sub neg exch}repeat}bd/rgb2g{2 index .299 mul 2 index .587 mul
add 1 index .114 mul add 4 1 roll pop pop pop}bd/WaldoColor_5 where{pop}{
/CorelImage systemdict/image get def/CorelSetGray systemdict/setgray get def
/CorelGetGray systemdict/currentgray get def/CorelSetTransfer systemdict
/settransfer get def/CorelGetTransfer systemdict/currenttransfer get def
/SetRgb/setrgbcolor ld/GetRgb/currentrgbcolor ld/SetGry/setgray ld/GetGry
/currentgray ld/SetRgb2 systemdict/setrgbcolor get def/GetRgb2 systemdict
/currentrgbcolor get def/SetHsb systemdict/sethsbcolor get def/GetHsb
systemdict/currenthsbcolor get def/rgb2hsb{SetRgb2 GetHsb}bd/hsb2rgb{3 -1 roll
dup floor sub 3 1 roll SetHsb GetRgb2}bd/setcmykcolor where{pop/LumSepsDict
where{pop/SetCmyk_5{LumSepsDict/setcmykcolor get exec}def}{/AldusSepsDict where
{pop/SetCmyk_5{AldusSepsDict/setcmykcolor get exec}def}{/SetCmyk_5
/setcmykcolor ld}ifelse}ifelse}{/setcmykcolor{create_cmyk_color
/separate_set_color dexec/$ffpnt xd}bd/SetCmyk_5{cmyk2rgb SetRgb}bd}ifelse
/currentcmykcolor where{pop/GetCmyk/currentcmykcolor ld}{/GetCmyk{GetRgb
rgb2cmyk}bd}ifelse/setoverprint where{pop}{/setoverprint{/CurrentOverprint xd}
bd}ifelse/currentoverprint where{pop}{/currentoverprint{CurrentOverprint}bd}
ifelse/colorimage where{pop/ColorImage{colorimage}def}{/ColorImage{/ncolors xd
/$multi xd $multi true eq{ncolors 3 eq{/daqB xd/daqG xd/daqR xd pop pop exch
pop abs{daqR pop daqG pop daqB pop}repeat}{/daqK xd/daqY xd/daqM xd/daqC xd pop
pop exch pop abs{daqC pop daqM pop daqY pop daqK pop}repeat}ifelse}{/dataaq xd
{dataaq ncolors dup 3 eq{/$dat xd 0 1 $dat length 3 div 1 sub{dup 3 mul $dat 1
index get 255 div $dat 2 index 1 add get 255 div $dat 3 index 2 add get 255 div
rgb2g 255 mul cvi exch pop $dat 3 1 roll put}for $dat 0 $dat length 3 idiv
getinterval pop}{4 eq{/$dat xd 0 1 $dat length 4 div 1 sub{dup 4 mul $dat 1
index get 255 div $dat 2 index 1 add get 255 div $dat 3 index 2 add get 255 div
$dat 4 index 3 add get 255 div cmyk2rgb rgb2g 255 mul cvi exch pop $dat 3 1
roll put}for $dat 0 $dat length ncolors idiv getinterval}if}ifelse}image}
ifelse}bd}ifelse/currentcmykcolor{GetCmyk}bd/sethsbcolor{hsb2rgb setrgbcolor}
bd/currenthsbcolor{currentrgbcolor rgb2hsb}bd/setgray{dup dup setrgbcolor}bd
/currentgray{currentrgbcolor rgb2g}bd/InsideDCS false def/IMAGE/image ld/image
{InsideDCS{IMAGE}{/EPSDict where{pop SeparationMode/Composite eq{IMAGE}{dup
type/dicttype eq{dup/ImageType get 1 ne{IMAGE}{dup dup/BitsPerComponent get 8
eq exch/BitsPerComponent get 1 eq or currentcolorspace 0 get DocGrayScaleSpace
eq and{SeparationPlateName(Black)eq{IMAGE}{dup/DataSource get/TCC xd/Height get
abs{TCC pop}repeat}ifelse}{IMAGE}ifelse}ifelse}{2 index 1 ne{
SeparationPlateName(Black)eq{IMAGE}{/TCC xd pop pop exch pop abs{TCC pop}
repeat}ifelse}{IMAGE}ifelse}ifelse}ifelse}{IMAGE}ifelse}ifelse}bd}ifelse/$fm 0
def/wfill{1 $fm eq{fill}{eofill}ifelse}bd/@Pf{@sv SeparationMode/Composite eq{
true}{$Psc 0 ne or $ink_5 3 eq or}ifelse{0 J 0 j[]0 d FillOverprint
safe_setoverprint FillColor/separate_set_color dexec pop $ctm setmatrix 72 1000
div dup matrix scale dup concat dup Bburx exch Bbury exch itransform ceiling
cvi/Bbury xd ceiling cvi/Bburx xd Bbllx exch Bblly exch itransform floor cvi
/Bblly xd floor cvi/Bbllx xd $Prm aload pop $Psn load exec}{1 SetGry wfill}
ifelse @rs @np}bd/F{matrix currentmatrix $sdf{$scf $sca $scp @ss}if
FillOverprint safe_setoverprint $fil 1 eq{CorelPtrnDoFill}{$fil 2 eq
{gradient_fill}{$fil 3 eq{@Pf}{get_simulate_devicen FillColor/ColorModel get
/DeviceN eq and{0 1 FillColor/num get 1 sub{dup 0 gt{true safe_setoverprint}if
FillColor/get_ink_as_spot dexec/set_color dexec @gs wfill @gr}for}{FillColor
/separate_set_color dexec{wfill}{@np}ifelse}ifelse}ifelse}ifelse}ifelse $sdf{
$dsf $dsa $dsp @ss}if setmatrix}bd/f{@cp F}bd/S{matrix currentmatrix $ctm
setmatrix $SDF{$SCF $SCA $SCP @ss}if OutlineOverprint safe_setoverprint
get_simulate_devicen OutlineColor/ColorModel get/DeviceN eq and{0 1
OutlineColor/num get 1 sub{dup 0 gt{true safe_setoverprint}if OutlineColor
/get_ink_as_spot dexec/set_color dexec matrix currentmatrix $ptm concat @gs
stroke @gr setmatrix}for}{OutlineColor/separate_set_color dexec{matrix
currentmatrix $ptm concat stroke setmatrix}{@np}ifelse}ifelse $SDF{$dsf $dsa
$dsp @ss}if setmatrix}bd/s{@cp S}bd/B{@gs F @gr S}bd/b{@cp B}bd/_E{5 array
astore exch cvlit xd}bd/@cc{currentfile $dat readhexstring pop}bd/@sm{/$ctm
$ctm currentmatrix def}bd/@E{/Bbury xd/Bburx xd/Bblly xd/Bbllx xd}bd/@c{@cp}bd
/@P{/$fil 3 def/$Psn xd/$Psc xd array astore/$Prm xd}bd/tcc{@cc}def/@B{@gs S
@gr F}bd/@b{@cp @B}bd/init_separation{/SeparationMode where{pop}{
/SeparationMode/Composite def}ifelse/SeparationPlateName where{pop}{
/SeparationPlateName null def}ifelse/SeparateInColor where{pop}{
/SeparateInColor false def}ifelse SeparationMode/Composite eq{
/SeparationPlateIndex -1 def}{/SeparationPlateIndex 4 def}ifelse/CmykPlates[
/Cyan/Magenta/Yellow/Black]def 0 1 3{dup CmykPlates exch get
SeparationPlateName eq{/SeparationPlateIndex xd exit}if pop}for
/CurrentInkName_5 SeparationPlateName def/$ink_5 SeparationPlateIndex def
SeparationMode/OnHost eq{/SepMode_5 2 def}{/SepMode_5 0 def}ifelse/SepsColor
SeparateInColor def}bd/init_separation_from_legacy{EpsFile{/SepMode_5 where{
pop SepMode_5 2 eq{/SeparationMode/OnHost def}{/SeparationMode/Composite def}
ifelse}if/CurrentInkName_5 where{pop/SeparationPlateName CurrentInkName_5 def}
if/$ink_5 where{pop/SeparationPlateIndex $ink_5 def}if/SepsColor where{pop
/SeparateInColor SepsColor def}if}if}bd init_separation_from_legacy/@whi{@gs
-72000 dup m -72000 72000 l 72000 dup l 72000 -72000 l @cp 1 SetGry fill @gr}
bd/@neg{[{1 exch sub}/exec cvx currenttransfer/exec cvx]cvx settransfer @whi}
bd/deflevel 0 def/@sax{/deflevel deflevel 1 add def}bd/@eax{/deflevel deflevel
dup 0 gt{1 sub}if def deflevel 0 gt{/eax load}{eax}ifelse}bd/eax{{exec}forall}
bd/@rax{deflevel 0 eq{@rs @sv}if}bd systemdict/pdfmark known not{/pdfmark
/cleartomark ld}if/wclip{1 $fm eq{clip}{eoclip}ifelse}bd
%----------------------------------------------------------------------------
% Raster images support
/set_image_clipping{concat 3 index 3 index m 3 index 1 index l 2 copy l 1 index
3 index l 3 index 3 index l clip pop pop pop pop}bd/set_image_parameters{/$frg
xd/$bkg xd/$ury xd/$urx xd/$lly xd/$llx xd/$ncl xd/$bts xd/$hei xd/$wid xd}bd
/output_image{/@cc xd @sm @gs set_image_clipping set_image_parameters
SeparationMode/OnHost eq EpsFile and{separate_output_image}{
output_composite_image}ifelse @gr $ctm setmatrix}bd/output_composite_image{
DocPsLevel 3 eq MaskedImage true eq and{output_masked_image}{$bts 1 gt
DocPsLevel 2 eq DocPsLevel 3 eq or and{DevicenImage{output_devicen_image}{
output_color_image}ifelse}{$bts 1 eq{output_monochrome_image}{
output_color_image_level1}ifelse}ifelse}ifelse}bd/separate_output_image{@gs
$bts 1 gt{separate_output_color_image}{separate_output_monochrome_image}ifelse
@gr not{currentoverprint not{1.0 SetGry wfill}if}if @np}bd/set_decode_filter{
ImageCompression/JPEG eq{/DCTDecode filter}{ImageCompression/RLE eq{
/RunLengthDecode filter}{ImageCompression/LZW eq{/LZWDecode filter}if}ifelse}
ifelse}bd/create_datasource{currentfile DevicenImage not get_ps_level 2 gt or{
/ASCII85Decode filter}if set_decode_filter}bd/set_image_strip_parameters{
/stripRows xd/numPlanes xd/stripBuffer $wid $bts mul $ncl mul stripRows mul 8
div ceiling cvi dup 65535 gt{pop $ncl $bts mul}if string def DevicenImage{
/readstrip{DataSource stripBuffer readhexstring pop}bd}{/readstrip{DataSource
stripBuffer readstring pop}bd}ifelse/stripHeight $lly $ury sub stripRows mul
$hei div def/stripOutBuffer $wid stripRows mul numPlanes mul 65535 min string
def/strip_img_dict 8 dict def strip_img_dict begin/ImageType 1 def/Width $wid
def/Height stripRows def/BitsPerComponent $bts def/Decode[numPlanes{0 1}
repeat]def/ImageMatrix[$wid 0 0 stripRows neg 0 $hei 0 gt{stripRows}{0}ifelse]
def/DataSource stripOutBuffer def end}bd/separate_output_color_image{
/plateContent false def $ncl 1 eq{SeparationPlateName/Black eq{
output_color_image/plateContent true def}if}{@np/DataSource create_datasource
def SeparateInColor{DocCmykSpace setcolorspace/numPlanes 4 def}{
DocGrayScaleSpace setcolorspace/numPlanes 1 def}ifelse/stripRows 65535 $wid
$bts mul $ncl numPlanes max mul 8 div div floor cvi 1 max def numPlanes
stripRows set_image_strip_parameters/maxStripIndex $hei stripRows div ceiling
cvi 1 sub def 0 1 maxStripIndex{/stripIndex exch def/$t_ury $ury stripHeight
stripIndex mul add ceiling cvi def/$t_lly $t_ury stripHeight add ceiling cvi
def stripIndex maxStripIndex eq{numPlanes $hei maxStripIndex stripRows mul sub
set_image_strip_parameters/$t_lly $t_ury stripHeight add ceiling cvi def}if
readstrip pop @gs 0 1 $wid stripRows mul 1 sub{/pixelIndex xd stripBuffer
pixelIndex $ncl mul $ncl getinterval{255 div}forall DevicenImage{
ImageDevicenSpace create_devicen_color}{$ncl 3 eq{create_rgb_color}{
create_cmyk_color}ifelse}ifelse/separate_color dexec{/plateContent true def
begin color aload pop end}{pop numPlanes[numPlanes 1 eq{1}{0}ifelse]cvx repeat
}ifelse numPlanes array astore/pixelSepIndex pixelIndex numPlanes mul def
/posColorant 0 def{stripOutBuffer pixelSepIndex posColorant add 3 -1 roll 255
mul cvi put/posColorant posColorant 1 add def}forall}for $llx $t_lly Tl $urx
$llx sub $t_ury $t_lly sub scale strip_img_dict image @gr}for $SDF{$dsf $dsa
$dsp @ss}if}ifelse plateContent}bd/separate_output_monochrome_image{
SeparationPlateName/Black eq{output_monochrome_image true}{false}ifelse}bd
/output_monochrome_image{$frg 1 eq{OutlineOverprint safe_setoverprint
ImageForegroundColor/separate_set_color dexec{1}{0}ifelse/$frg xd}{/$frg false
def}ifelse $bkg 1 eq{@gs $ctm setmatrix F @gr}if @np/$dat $wid $bts mul 8 div
ceiling cvi 65535 min string def $bkg $frg add 1 ge{$SDF{$SCF $SCA $SCP @ss}if
$llx $lly Tl $urx $llx sub $ury $lly sub scale $bkg 1 eq{FillColor
/separate_set_color dexec pop}if $wid $hei abs $bts 1 eq{$bkg 1 ge}{$bts 1 ge}
ifelse[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]/tcc load $bts 1 eq
{imagemask}{image}ifelse $SDF{$dsf $dsa $dsp @ss}if}{$hei abs{tcc pop}repeat}
ifelse}bd/output_color_image_level1{@np $ngx $llx $lly Tl $urx $llx sub $ury
$lly sub scale $wid $hei abs $bts[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse
]/$dat $wid $bts mul $ncl mul 8 div ceiling cvi 65535 min string def $msimage
false eq $ncl 1 eq or{/@cc load false $ncl ColorImage}{$wid $bts mul 8 div
ceiling cvi $ncl 3 eq{dup dup/$dat1 exch string def/$dat2 exch string def
/$dat3 exch string def/@cc1 load/@cc2 load/@cc3 load}{dup dup dup/$dat1 exch
string def/$dat2 exch string def/$dat3 exch string def/$dat4 exch string def
/@cc1 load/@cc2 load/@cc3 load/@cc4 load}ifelse true $ncl ColorImage}ifelse
$SDF{$dsf $dsa $dsp @ss}if}bd/@cc1{currentfile $dat1 readhexstring pop}bd/@cc2
{currentfile $dat2 readhexstring pop}bd/@cc3{currentfile $dat3 readhexstring
pop}bd/@cc4{currentfile $dat4 readhexstring pop}bd/$msimage false def
/ImageCompression/None def/MaskedImage false def/DevicenImage false def
/output_color_image{@np $ncl 1 eq{DocGrayScaleSpace}{$ncl 3 eq{DocRgbSpace}
{DocCmykSpace}ifelse}ifelse setcolorspace/$dat $wid $bts mul $ncl mul 8 div
ceiling cvi 65535 min string def $ngx $llx $lly Tl $urx $llx sub $ury $lly sub
scale 8 dict begin/ImageType 1 def/Width $wid def/Height $hei abs def
/BitsPerComponent $bts def/Decode[$ncl{0 1}repeat]def/ImageMatrix[$wid 0 0 $hei
neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource create_datasource def currentdict
end image $SDF{$dsf $dsa $dsp @ss}if}bd/simulate_devicen_image{@np $ngx
/colorantNames ImageDevicenSpace 1 get def/altColorSpace ImageDevicenSpace 2
get def/tintProc ImageDevicenSpace 3 get def/DataSource create_datasource def
/stripRows 65535 $wid $bts mul $ncl mul 8 div div floor cvi 1 max def 1
stripRows set_image_strip_parameters/maxStripIndex $hei stripRows div ceiling
cvi 1 sub def 0 1 maxStripIndex{/stripIndex exch def/$t_ury $ury stripHeight
stripIndex mul add ceiling cvi def/$t_lly $t_ury stripHeight add ceiling cvi
def stripIndex maxStripIndex eq{1 $hei maxStripIndex stripRows mul sub
set_image_strip_parameters/$t_lly $t_ury stripHeight add ceiling cvi def}if
readstrip pop @gs $llx $t_lly Tl $urx $llx sub $t_ury $t_lly sub scale 0 1 $ncl
1 sub{@gs/inkIndex exch def 0 1 stripOutBuffer length 1 sub{dup $ncl mul
inkIndex add stripBuffer exch get stripOutBuffer 3 1 roll put}for[/Separation
colorantNames inkIndex get altColorSpace{$ncl 1 sub{0}repeat $ncl inkIndex roll
tintProc}]setcolorspace inkIndex 0 gt{true setoverprint}if strip_img_dict image
@gr}for @gr}for $SDF{$dsf $dsa $dsp @ss}if}bd/output_devicen_image_alt{@np $ngx
/colorantNames ImageDevicenSpace 1 get def/altColorSpace ImageDevicenSpace 2
get def/tintProc ImageDevicenSpace 3 get def altColorSpace DocCmykSpace eq{
/numAltChannels 4 def}{altColorSpace DocRgbSpace eq{/numAltChannels 3 def}{
/numAltChannels 1 def}ifelse}ifelse/DataSource create_datasource def
altColorSpace setcolorspace/stripRows 65535 $wid $bts mul $ncl numAltChannels
max mul 8 div div floor cvi 1 max def numAltChannels stripRows
set_image_strip_parameters/maxStripIndex $hei stripRows div ceiling cvi 1 sub
def 0 1 maxStripIndex{/stripIndex exch def/$t_ury $ury stripHeight stripIndex
mul add ceiling cvi def/$t_lly $t_ury stripHeight add ceiling cvi def
stripIndex maxStripIndex eq{numAltChannels $hei maxStripIndex stripRows mul sub
set_image_strip_parameters/$t_lly $t_ury stripHeight add ceiling cvi def}if
readstrip pop @gs 0 1 stripBuffer length $ncl div cvi 1 sub{/pixelIndex xd
stripBuffer pixelIndex $ncl mul $ncl getinterval{255 div}forall tintProc exec
numAltChannels array astore/pixelAltIndex pixelIndex numAltChannels mul def
/posColorant 0 def{stripOutBuffer pixelAltIndex posColorant add 3 -1 roll 255
mul cvi put/posColorant posColorant 1 add def}forall}for $llx $t_lly Tl $urx
$llx sub $t_ury $t_lly sub scale strip_img_dict image @gr}for $SDF{$dsf $dsa
$dsp @ss}if}bd/output_devicen_image_native{@np $ngx ImageDevicenSpace
setcolorspace/scanline $wid $bts mul $ncl mul 8 div ceiling cvi 65535 min
string def/readscanline{currentfile scanline readhexstring pop}bind def $llx
$lly Tl $urx $llx sub $ury $lly sub scale 8 dict begin/ImageType 1 def/Width
$wid def/Height $hei abs def/BitsPerComponent $bts def/Decode[$ncl{0 1}repeat]
def/ImageMatrix[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource{
readscanline}def currentdict end image $SDF{$dsf $dsa $dsp @ss}if}bd
/output_devicen_image{Level3{output_devicen_image_native}{get_simulate_devicen
{simulate_devicen_image}{output_devicen_image_alt}ifelse}ifelse}bd
/output_masked_image{/$dat $wid $bts mul $ncl mul 8 div ceiling cvi 65535 min
string def $ngx DevicenImage{ImageDevicenSpace}{$ncl 1 eq{DocGrayScaleSpace}{
$ncl 3 eq{DocRgbSpace}{DocCmykSpace}ifelse}ifelse}ifelse setcolorspace $llx
$lly Tl $urx $llx sub $ury $lly sub scale/ImageDataDict 8 dict def
ImageDataDict begin/ImageType 1 def/Width $wid def/Height $hei abs def
/BitsPerComponent $bts def/Decode[$ncl{0 1}repeat]def/ImageMatrix[$wid 0 0 $hei
neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource create_datasource def end
/MaskedImageDict 7 dict def MaskedImageDict begin/ImageType 3 def
/InterleaveType 3 def/MaskDict ImageMaskDict def/DataDict ImageDataDict def end
MaskedImageDict image $SDF{$dsf $dsa $dsp @ss}if}bd/set_image_mask{/$mbts xd
/$mhei xd/$mwid xd/ImageMaskDict 8 dict def ImageMaskDict begin/ImageType 1 def
/Width $mwid def/Height $mhei abs def/BitsPerComponent $mbts def/DataSource
maskstream def/ImageMatrix[$mwid 0 0 $mhei neg 0 $mhei 0 gt{$mhei}{0}ifelse]
def/Decode[1 0]def end}bd/@daq{dup type/arraytype eq{aload pop}if}bd
/skip_image_body{8 rp/$ury xd/$urx xd/$lly xd/$llx xd/$ncl xd/$bts xd/$hei xd
/$wid xd DevicenImage not ImageCompression/JPEG eq or ImageCompression/RLE eq
or ImageCompression/LZW eq or{create_datasource flushfile}{/scanline $wid $bts
mul $ncl mul 8 div ceiling cvi dup 65535 gt{pop $bts $ncl mul}if string def
/upperBound $wid $hei mul $bts mul $ncl mul scanline length div cvi 1 sub def 0
1 upperBound{pop currentfile scanline readhexstring pop pop}for}ifelse}bd
/disable_raster_output{deflevel 0 eq{@rs}if/output_image load
/output_image_original exch def/output_image/skip_image_body load def
globaldict begin/bSkipDeviceNImage true def end deflevel 0 eq{@sv}if}def
/enable_raster_output{deflevel 0 eq{@rs}if/bSkipDeviceNImage where{
/bSkipDeviceNImage undef/output_image/output_image_original load def}if
deflevel 0 eq{@sv}if}def
end
%%EndResource
%%EndProlog
%%BeginSetup
wCorel19Dict begin
@BeginSysCorelDict
/$dcm matrix currentmatrix def
@ssa
1.00 setflat
/$fst 128 def
%%EndSetup

%%Page: 1 1
%%ViewingOrientation: 1 0 0 1
%%BoundingBox: 0 0 595 841
%LogicalPage: 1
%%BeginPageSetup
@sv
@sm
@sv
%%EndPageSetup
@rax %Note: Object
45.67833 42.39780 556.40126 773.54759 @E
/$fm 0 def
 0 O 0 @g
0.7500 0.6800 0.6700 0.8900  create_cmyk_color set_solid_fill
56.51631 120.45260 m
56.51631 120.45260 L
56.51631 121.86170 55.37339 123.00463 53.96542 123.00463 C
52.55631 123.00463 51.41339 121.86170 51.41339 120.45260 C
51.41339 119.04463 52.55631 117.90170 53.96542 117.90170 C
55.37339 117.90170 56.51631 119.04463 56.51631 120.45260 C
@c
135.22535 763.00356 m
135.22535 764.41266 136.36828 765.55474 137.77739 765.55474 C
139.18535 765.55474 140.32828 764.41266 140.32828 763.00356 C
140.32828 761.59474 139.18535 760.45266 137.77739 760.45266 C
136.36828 760.45266 135.22535 761.59474 135.22535 763.00356 C
@c
131.37846 760.45266 m
129.97020 760.45266 128.82841 761.59474 128.82841 763.00356 C
128.82841 764.41266 129.97020 765.55474 131.37846 765.55474 C
132.78728 765.55474 133.93020 764.41266 133.93020 763.00356 C
133.93020 761.59474 132.78728 760.45266 131.37846 760.45266 C
@c
124.98038 760.45266 m
123.57128 760.45266 122.42920 761.59474 122.42920 763.00356 C
122.42920 764.41266 123.57128 765.55474 124.98038 765.55474 C
126.38920 765.55474 127.53241 764.41266 127.53241 763.00356 C
127.53241 761.59474 126.38920 760.45266 124.98038 760.45266 C
@c
118.58230 760.45266 m
117.17320 760.45266 116.03140 761.59474 116.03140 763.00356 C
116.03140 764.41266 117.17320 765.55474 118.58230 765.55474 C
119.99140 765.55474 121.13320 764.41266 121.13320 763.00356 C
121.13320 761.59474 119.99140 760.45266 118.58230 760.45266 C
@c
144.17518 765.55474 m
145.58428 765.55474 146.72636 764.41266 146.72636 763.00356 C
146.72636 761.59474 145.58428 760.45266 144.17518 760.45266 C
142.76636 760.45266 141.62428 761.59474 141.62428 763.00356 C
141.62428 764.41266 142.76636 765.55474 144.17518 765.55474 C
@c
150.57326 765.55474 m
151.98236 765.55474 153.12444 764.41266 153.12444 763.00356 C
153.12444 761.59474 151.98236 760.45266 150.57326 760.45266 C
149.16444 760.45266 148.02236 761.59474 148.02236 763.00356 C
148.02236 764.41266 149.16444 765.55474 150.57326 765.55474 C
@c
156.97134 765.55474 m
158.38044 765.55474 159.52224 764.41266 159.52224 763.00356 C
159.52224 761.59474 158.38044 760.45266 156.97134 760.45266 C
155.56224 760.45266 154.42044 761.59474 154.42044 763.00356 C
154.42044 764.41266 155.56224 765.55474 156.97134 765.55474 C
@c
163.37027 765.55474 m
164.77937 765.55474 165.92145 764.41266 165.92145 763.00356 C
165.92145 761.59474 164.77937 760.45266 163.37027 760.45266 C
161.96031 760.45266 160.81824 761.59474 160.81824 763.00356 C
160.81824 764.41266 161.96031 765.55474 163.37027 765.55474 C
@c
207.23528 55.61972 m
208.80142 55.61972 210.07020 54.35065 210.07020 52.78479 C
210.07020 51.21978 208.80142 49.95071 207.23528 49.95071 C
205.67027 49.95071 204.40120 51.21978 204.40120 52.78479 C
204.40120 54.35065 205.67027 55.61972 207.23528 55.61972 C
@c
194.47937 55.61972 m
196.04523 55.61972 197.31430 54.35065 197.31430 52.78479 C
197.31430 51.21978 196.04523 49.95071 194.47937 49.95071 C
192.91436 49.95071 191.64529 51.21978 191.64529 52.78479 C
191.64529 54.35065 192.91436 55.61972 194.47937 55.61972 C
@c
188.10142 55.61972 m
189.66728 55.61972 190.93635 54.35065 190.93635 52.78479 C
190.93635 51.21978 189.66728 49.95071 188.10142 49.95071 C
186.53641 49.95071 185.26734 51.21978 185.26734 52.78479 C
185.26734 54.35065 186.53641 55.61972 188.10142 55.61972 C
@c
175.34636 55.61972 m
176.91222 55.61972 178.18044 54.35065 178.18044 52.78479 C
178.18044 51.21978 176.91222 49.95071 175.34636 49.95071 C
173.78022 49.95071 172.51143 51.21978 172.51143 52.78479 C
172.51143 54.35065 173.78022 55.61972 175.34636 55.61972 C
@c
168.96841 55.61972 m
170.53342 55.61972 171.80220 54.35065 171.80220 52.78479 C
171.80220 51.21978 170.53342 49.95071 168.96841 49.95071 C
167.40227 49.95071 166.13320 51.21978 166.13320 52.78479 C
166.13320 54.35065 167.40227 55.61972 168.96841 55.61972 C
@c
181.72431 55.61972 m
183.28932 55.61972 184.55839 54.35065 184.55839 52.78479 C
184.55839 51.21978 183.28932 49.95071 181.72431 49.95071 C
180.15846 49.95071 178.88939 51.21978 178.88939 52.78479 C
178.88939 54.35065 180.15846 55.61972 181.72431 55.61972 C
@c
200.85732 55.61972 m
202.42318 55.61972 203.69225 54.35065 203.69225 52.78479 C
203.69225 51.21978 202.42318 49.95071 200.85732 49.95071 C
199.29231 49.95071 198.02324 51.21978 198.02324 52.78479 C
198.02324 54.35065 199.29231 55.61972 200.85732 55.61972 C
@c
213.61323 55.61972 m
215.17937 55.61972 216.44844 54.35065 216.44844 52.78479 C
216.44844 51.21978 215.17937 49.95071 213.61323 49.95071 C
212.04822 49.95071 210.77943 51.21978 210.77943 52.78479 C
210.77943 54.35065 212.04822 55.61972 213.61323 55.61972 C
@c
219.99118 55.61972 m
221.55732 55.61972 222.82639 54.35065 222.82639 52.78479 C
222.82639 51.21978 221.55732 49.95071 219.99118 49.95071 C
218.42646 49.95071 217.15739 51.21978 217.15739 52.78479 C
217.15739 54.35065 218.42646 55.61972 219.99118 55.61972 C
@c
226.36942 55.61972 m
227.93528 55.61972 229.20435 54.35065 229.20435 52.78479 C
229.20435 51.21978 227.93528 49.95071 226.36942 49.95071 C
224.80441 49.95071 223.53534 51.21978 223.53534 52.78479 C
223.53534 54.35065 224.80441 55.61972 226.36942 55.61972 C
@c
232.74737 55.61972 m
234.31323 55.61972 235.58230 54.35065 235.58230 52.78479 C
235.58230 51.21978 234.31323 49.95071 232.74737 49.95071 C
231.18236 49.95071 229.91244 51.21978 229.91244 52.78479 C
229.91244 54.35065 231.18236 55.61972 232.74737 55.61972 C
@c
406.75635 55.61972 m
408.32220 55.61972 409.59128 54.35065 409.59128 52.78479 C
409.59128 51.21978 408.32220 49.95071 406.75635 49.95071 C
405.19020 49.95071 403.92142 51.21978 403.92142 52.78479 C
403.92142 54.35065 405.19020 55.61972 406.75635 55.61972 C
@c
394.00044 55.61972 m
395.56630 55.61972 396.83537 54.35065 396.83537 52.78479 C
396.83537 51.21978 395.56630 49.95071 394.00044 49.95071 C
392.43430 49.95071 391.16523 51.21978 391.16523 52.78479 C
391.16523 54.35065 392.43430 55.61972 394.00044 55.61972 C
@c
387.62220 55.61972 m
389.18835 55.61972 390.45742 54.35065 390.45742 52.78479 C
390.45742 51.21978 389.18835 49.95071 387.62220 49.95071 C
386.05720 49.95071 384.78728 51.21978 384.78728 52.78479 C
384.78728 54.35065 386.05720 55.61972 387.62220 55.61972 C
@c
374.86743 55.61972 m
376.43244 55.61972 377.70123 54.35065 377.70123 52.78479 C
377.70123 51.21978 376.43244 49.95071 374.86743 49.95071 C
373.30129 49.95071 372.03222 51.21978 372.03222 52.78479 C
372.03222 54.35065 373.30129 55.61972 374.86743 55.61972 C
@c
368.48835 55.61972 m
370.05420 55.61972 371.32328 54.35065 371.32328 52.78479 C
371.32328 51.21978 370.05420 49.95071 368.48835 49.95071 C
366.92334 49.95071 365.65427 51.21978 365.65427 52.78479 C
365.65427 54.35065 366.92334 55.61972 368.48835 55.61972 C
@c
381.24539 55.61972 m
382.81039 55.61972 384.07918 54.35065 384.07918 52.78479 C
384.07918 51.21978 382.81039 49.95071 381.24539 49.95071 C
379.67924 49.95071 378.41046 51.21978 378.41046 52.78479 C
378.41046 54.35065 379.67924 55.61972 381.24539 55.61972 C
@c
400.37839 55.61972 m
401.94425 55.61972 403.21332 54.35065 403.21332 52.78479 C
403.21332 51.21978 401.94425 49.95071 400.37839 49.95071 C
398.81225 49.95071 397.54318 51.21978 397.54318 52.78479 C
397.54318 54.35065 398.81225 55.61972 400.37839 55.61972 C
@c
413.13430 55.61972 m
414.70044 55.61972 415.96923 54.35065 415.96923 52.78479 C
415.96923 51.21978 414.70044 49.95071 413.13430 49.95071 C
411.56844 49.95071 410.30022 51.21978 410.30022 52.78479 C
410.30022 54.35065 411.56844 55.61972 413.13430 55.61972 C
@c
419.51225 55.61972 m
421.07839 55.61972 422.34718 54.35065 422.34718 52.78479 C
422.34718 51.21978 421.07839 49.95071 419.51225 49.95071 C
417.94639 49.95071 416.67846 51.21978 416.67846 52.78479 C
416.67846 54.35065 417.94639 55.61972 419.51225 55.61972 C
@c
425.89020 55.61972 m
427.45521 55.61972 428.72428 54.35065 428.72428 52.78479 C
428.72428 51.21978 427.45521 49.95071 425.89020 49.95071 C
424.32520 49.95071 423.05641 51.21978 423.05641 52.78479 C
423.05641 54.35065 424.32520 55.61972 425.89020 55.61972 C
@c
432.26844 55.61972 m
433.83345 55.61972 435.10224 54.35065 435.10224 52.78479 C
435.10224 51.21978 433.83345 49.95071 432.26844 49.95071 C
430.70343 49.95071 429.43323 51.21978 429.43323 52.78479 C
429.43323 54.35065 430.70343 55.61972 432.26844 55.61972 C
@c
455.04142 763.00356 m
455.04142 764.41266 456.18321 765.55474 457.59345 765.55474 C
459.00142 765.55474 460.14435 764.41266 460.14435 763.00356 C
460.14435 761.59474 459.00142 760.45266 457.59345 760.45266 C
456.18321 760.45266 455.04142 761.59474 455.04142 763.00356 C
@c
451.19424 760.45266 m
449.78627 760.45266 448.64334 761.59474 448.64334 763.00356 C
448.64334 764.41266 449.78627 765.55474 451.19424 765.55474 C
452.60334 765.55474 453.74542 764.41266 453.74542 763.00356 C
453.74542 761.59474 452.60334 760.45266 451.19424 760.45266 C
@c
444.79644 760.45266 m
443.38734 760.45266 442.24526 761.59474 442.24526 763.00356 C
442.24526 764.41266 443.38734 765.55474 444.79644 765.55474 C
446.20526 765.55474 447.34819 764.41266 447.34819 763.00356 C
447.34819 761.59474 446.20526 760.45266 444.79644 760.45266 C
@c
438.39836 760.45266 m
436.98926 760.45266 435.84718 761.59474 435.84718 763.00356 C
435.84718 764.41266 436.98926 765.55474 438.39836 765.55474 C
439.80718 765.55474 440.94926 764.41266 440.94926 763.00356 C
440.94926 761.59474 439.80718 760.45266 438.39836 760.45266 C
@c
463.99124 765.55474 m
465.40035 765.55474 466.54243 764.41266 466.54243 763.00356 C
466.54243 761.59474 465.40035 760.45266 463.99124 760.45266 C
462.58243 760.45266 461.44035 761.59474 461.44035 763.00356 C
461.44035 764.41266 462.58243 765.55474 463.99124 765.55474 C
@c
470.38932 765.55474 m
471.79843 765.55474 472.94022 764.41266 472.94022 763.00356 C
472.94022 761.59474 471.79843 760.45266 470.38932 760.45266 C
468.98022 760.45266 467.83843 761.59474 467.83843 763.00356 C
467.83843 764.41266 468.98022 765.55474 470.38932 765.55474 C
@c
476.78740 765.55474 m
478.19622 765.55474 479.33830 764.41266 479.33830 763.00356 C
479.33830 761.59474 478.19622 760.45266 476.78740 760.45266 C
475.37830 760.45266 474.23622 761.59474 474.23622 763.00356 C
474.23622 764.41266 475.37830 765.55474 476.78740 765.55474 C
@c
483.18520 765.55474 m
484.59543 765.55474 485.73723 764.41266 485.73723 763.00356 C
485.73723 761.59474 484.59543 760.45266 483.18520 760.45266 C
481.77638 760.45266 480.63430 761.59474 480.63430 763.00356 C
480.63430 764.41266 481.77638 765.55474 483.18520 765.55474 C
@c
300.76639 761.16076 m
299.54835 761.16076 298.63020 762.08457 298.63020 763.30857 C
298.63020 764.52775 299.52935 765.41272 300.76639 765.41272 C
302.03121 765.41272 302.88246 764.59861 302.88246 763.38964 C
302.88246 762.11858 301.97225 761.16076 300.76639 761.16076 C
@c
300.75619 732.29868 m
299.58321 732.29868 298.63020 733.25282 298.63020 734.42580 C
298.63020 735.59764 299.58321 736.55065 300.75619 736.55065 C
301.92831 736.55065 302.88246 735.59764 302.88246 734.42580 C
302.88246 733.25282 301.92831 732.29868 300.75619 732.29868 C
@c
51.33543 669.79077 m
51.33543 671.55562 52.76636 672.98655 54.53235 672.98655 C
56.29720 672.98655 57.72841 671.55562 57.72841 669.79077 C
57.72841 646.07868 L
57.72841 644.31269 56.29720 642.88261 54.53235 642.88261 C
52.76636 642.88261 51.33543 644.31269 51.33543 646.07868 C
51.33543 669.79077 L
@c
51.33543 707.67269 m
51.33543 709.43754 52.76636 710.86876 54.53235 710.86876 C
56.29720 710.86876 57.72841 709.43754 57.72841 707.67269 C
57.72841 683.96060 L
57.72841 682.19575 56.29720 680.76482 54.53235 680.76482 C
52.76636 680.76482 51.33543 682.19575 51.33543 683.96060 C
51.33543 707.67269 L
@c
83.30542 747.46261 m
90.35036 747.46261 96.06132 741.75165 96.06132 734.70671 C
96.06132 727.66176 90.35036 721.95080 83.30542 721.95080 C
76.26132 721.95080 70.54923 727.66176 70.54923 734.70671 C
70.54923 741.75165 76.26132 747.46261 83.30542 747.46261 C
@c
77.49638 710.18759 m
77.49638 713.39556 80.09745 715.99663 83.30542 715.99663 C
86.51339 715.99663 89.11446 713.39556 89.11446 710.18759 C
89.11446 706.97962 86.51339 704.37855 83.30542 704.37855 C
80.09745 704.37855 77.49638 706.97962 77.49638 710.18759 C
@c
83.53644 766.94655 m
105.64526 766.94655 L
107.59436 766.94655 109.18942 765.35178 109.18942 763.40381 C
109.18942 761.45471 107.59436 759.86079 105.64526 759.86079 C
83.53644 759.86079 L
81.58620 759.86079 79.99228 761.45471 79.99228 763.40381 C
79.99228 765.35178 81.58620 766.94655 83.53644 766.94655 C
@c
556.37745 741.76072 m
556.37745 752.26479 554.03121 764.55666 549.09128 773.54759 C
538.10646 768.12265 L
541.03124 762.99874 543.45827 752.80677 543.45827 747.95471 C
543.45827 741.83868 L
543.45827 741.75165 543.35537 741.75562 543.34743 741.84265 C
543.34545 741.86362 543.34035 741.88460 543.33723 741.90557 C
541.76825 751.79679 535.95836 757.59279 525.99940 759.06879 C
525.99940 772.05657 L
75.79729 772.05657 L
75.79729 759.06879 L
66.12123 757.59279 60.31134 751.79679 58.74236 741.90557 C
58.73924 741.88460 58.73443 741.86362 58.73244 741.84265 C
58.72422 741.75562 58.62132 741.75165 58.62132 741.83868 C
58.62132 747.95471 L
58.62132 752.80677 61.04835 762.99874 63.97342 768.12265 C
52.98831 773.54759 L
48.04838 764.55666 45.69534 752.26479 45.69534 741.76072 C
45.67833 81.28375 L
45.68428 81.28063 45.68825 81.27780 45.69534 81.27354 C
45.69534 74.18580 L
45.69534 63.68173 48.04838 51.38957 52.98831 42.39780 C
63.97342 47.82274 L
61.04835 52.94665 58.62132 63.13975 58.62132 67.99068 C
58.62132 74.10671 L
58.62132 74.19373 58.72422 74.19061 58.73244 74.10274 C
58.73443 74.08261 58.73924 74.06079 58.74236 74.04066 C
60.31134 64.14973 66.12123 58.35260 76.08019 56.87773 C
76.08019 43.88967 L
525.71622 43.88967 L
525.71622 56.87773 L
535.95836 58.35260 541.76825 64.14973 543.33723 74.04066 C
543.34035 74.06079 543.34545 74.08261 543.34743 74.10274 C
543.35537 74.19061 543.45827 74.19373 543.45827 74.10671 C
543.45827 67.99068 L
543.45827 63.13975 541.03124 52.94665 538.10646 47.82274 C
549.09128 42.39780 L
554.03121 51.38957 556.37745 63.68173 556.37745 74.18580 C
556.40126 74.18580 L
556.40126 79.79556 L
556.40126 80.99773 L
556.40126 90.89065 L
556.40126 736.15068 L
556.40126 741.76072 L
556.37745 741.76072 L
@c
514.69030 770.54882 m
511.59118 770.54882 509.07827 767.40973 509.07827 763.53761 C
509.07827 759.66576 511.59118 756.52781 514.69030 756.52781 C
517.79027 756.52781 520.30431 759.66576 520.30431 763.53761 C
520.30431 767.40973 517.79027 770.54882 514.69030 770.54882 C
@c
56.94123 120.45260 m
56.94123 159.28781 L
56.94123 160.92879 55.60526 162.26362 53.96542 162.26362 C
52.32444 162.26362 50.98819 160.92879 50.98819 159.28781 C
50.98819 120.45260 L
50.98819 118.81162 52.32444 117.47565 53.96542 117.47565 C
55.60526 117.47565 56.94123 118.81162 56.94123 120.45260 C
@c
53.96542 117.05159 m
53.96542 117.05159 L
52.09427 117.05159 50.56328 118.58173 50.56328 120.45260 C
50.56328 159.28781 L
50.56328 161.15868 52.09427 162.68882 53.96542 162.68882 C
55.83543 162.68882 57.36643 161.15868 57.36643 159.28781 C
57.36643 120.45260 L
57.36643 118.58173 55.83543 117.05159 53.96542 117.05159 C
@c
549.69931 392.66759 m
547.35420 392.66759 545.44734 394.57474 545.44734 396.91956 C
545.44734 399.26381 547.35420 401.17181 549.69931 401.17181 C
552.04328 401.17181 553.95128 399.26381 553.95128 396.91956 C
553.95128 394.57474 552.04328 392.66759 549.69931 392.66759 C
@c
549.69931 404.00561 m
547.35420 404.00561 545.44734 405.91361 545.44734 408.25757 C
545.44734 410.60154 547.35420 412.50954 549.69931 412.50954 C
552.04328 412.50954 553.95128 410.60154 553.95128 408.25757 C
553.95128 405.91361 552.04328 404.00561 549.69931 404.00561 C
@c
549.69931 415.34476 m
547.35420 415.34476 545.44734 417.25162 545.44734 419.59672 C
545.44734 421.94069 547.35420 423.84869 549.69931 423.84869 C
552.04328 423.84869 553.95128 421.94069 553.95128 419.59672 C
553.95128 417.25162 552.04328 415.34476 549.69931 415.34476 C
@c
308.91345 47.79071 m
293.22624 47.79071 L
290.51745 47.79071 288.31323 49.89373 288.31323 52.47865 C
288.31323 54.77669 290.27027 56.64557 292.67631 56.64557 C
309.46224 56.64557 L
311.86942 56.64557 313.82646 54.77669 313.82646 52.47865 C
313.82646 49.89373 311.62224 47.79071 308.91345 47.79071 C
@c
F

%%PageTrailer
@rs
@rs
%%Trailer
@EndSysCorelDict
end
%%DocumentSuppliedResources: procset wCorel19Dict 19.0 0
%%EOF
