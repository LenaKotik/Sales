%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: -13 841 1401 1476 
%%LanguageLevel: 2
%%Creator: CorelDRAW
%%Title: FOLD - 1 - УШИ.eps
%%CreationDate: Tue Dec 14 19:41:35 2021
%%DocumentProcessColors: Cyan Magenta Yellow Black 
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
/AutoFlatness false def
/AutoSteps 0 def
/CMYKMarks true def
/DocPsLevel 2 def
%Build: CorelDRAW Версия 21.3.0.758
/EpsFile true def
%%BeginResource: procset wCorel21Dict 21.0 0
/wCorel21Dict 300 dict def wCorel21Dict begin
%----------------------------------------------------------------------------
% Core Corel PostScript prolog functions
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Reduced syntax procedures
%----------------------------------------------------------------------------

/bd {bind def} bind def      				% bind proc names to current proc reference in the dict and define
/ld {load def} bd            				% load operator and define
/xd {exch def} bd            				% exchange operators on stack and define
/rp { {pop} repeat } bd      				% pop entries off stack iNumToPop rp
/dexec { exch begin cvx exec end } bd	% executes procedure from the dictionary on stack
/@cp /closepath ld
/@gs /gsave ld
/@gr /grestore ld
/@np /newpath ld
/Tl /translate ld
/$sv 0 def                   				% graphic state save snapshots
/@sv {/$sv save def}bd
/@rs {$sv restore}bd

/spg /showpage ld
/showpage {} bd

currentscreen                	% establish document's default halftone screen
/@dsp xd                     	% default spot func
/$dsp /@dsp def              	% default spot func name
/$dsa xd                     	% default screen angle
/$dsf xd                     	% default screen frequency function
/$sdf false def              	% FLAG: non-default screen for fill (true)
/$SDF false def              	% FLAG: non-default screen for stroke (true)
/$Scra 0 def                 	% screen adjustment (-90 if printing landscape)

/SetScr /setscreen ld					% sub in out own setscreen operator

/@ss                         	% Set Screen angle account for adjustment
{                            	% frequency angle proc
 2 index 0 eq
 {
  $dsf 3 1 roll              	% frequency angle proc deffreq
  4 -1 roll pop              	%
 } if                        	%
 exch $Scra add exch load    	% frequency angle+$Scra {proc}
 SetScr                   		%
} bd                         	%

/SeparationMode where					% init separatin mode
{ pop }{ /SeparationMode /Composite def } ifelse

/SeparationPlateName where		% init separation plate name
{ pop }{ /SeparationPlateName null def } ifelse

/SeparateInColor where				% init separtion in color flag
{ pop }{ /SeparateInColor false def	} ifelse


/EpsFile where								% are we an EPS file
{pop}
{/EpsFile false def} ifelse

/FillOverprint false def    % Fill overprint flag
/$fil 0 def                 % Fill type: 0:solid 1:pattern 2:fountain 3:PS 4:fountain shfill

/OutlineOverprint 0 def     % Outline overprint flag
/$PF false def              % pattern stroke flag(0 no pattern, 1 pattern)

/$bkg false def             % imaging background only flag
/CurrentOverprint false def % overprint flag

matrix currentmatrix        % establish current matrix
/$ctm xd                    % initial general transfo matrix

/$ptm matrix def            % pen stroking matrix(defaults identity)
/$ttm matrix def            % text transfo matrix(Corel extensions)
/$stm matrix def            % "save" matrix in extended text(Corel extensions)

/$ffpnt true def						% flag for painting fountain strips (overprint prob)

%----------------------------------------------------------------------------
% Corel re-encoding vector
%----------------------------------------------------------------------------
/CorelDrawReencodeVect [
16#0/grave 16#5/breve 16#6/dotaccent 16#8/ring 16#A/hungarumlaut 16#B/ogonek 16#C/caron
16#D/dotlessi 16#27/quotesingle 16#60/grave 16#7C/bar 16#80/Euro
16#82/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
16#88/circumflex/perthousand/Scaron/guilsinglleft/OE
16#91/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
16#98/tilde/trademark/scaron/guilsinglright/oe
16#9F/Ydieresis
16#A1/exclamdown/cent/sterling/currency/yen/brokenbar/section
16#a8/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/minus/registered/macron
16#b0/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
16#b8/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
16#c0/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
16#c8/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
16#d0/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
16#d8/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
16#e0/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
16#e8/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
16#f0/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
16#f8/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

%----------------------------------------------------------------------------
% Proc:  get_ps_level
% Stack: get_ps_level pslevel
% Desc:  returns level of PS interpreter environemnt
%----------------------------------------------------------------------------
/get_ps_level
	/languagelevel where
	{
		pop systemdict /languagelevel get exec
	}
	{
		1
	} ifelse
def

%----------------------------------------------------------------------------
% Level 2 or 3 flag
%----------------------------------------------------------------------------
/Level2 get_ps_level 2 ge def

%----------------------------------------------------------------------------
% Level 3 flag
%----------------------------------------------------------------------------
/Level3 get_ps_level 3 ge def

%----------------------------------------------------------------------------
% Flag to indicate we are processed by AdobeDistiller
%----------------------------------------------------------------------------
/AdobeDistiller
  /product where
  {
    pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
  }
  {
    false
  }ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate we are are being separated in-RIP (not by Distiller!)
%----------------------------------------------------------------------------
/InRipSeparation
  AdobeDistiller
  {
    false										% we are being distilled by Adobe Distiller, not RIP
  }
  {
    Level2									% in-RIP separations allowed for Level2 and higher
    {
      currentpagedevice/Separations 2 copy known		% check currentpage dict - Separations should be set true
      {
        get
      }
      {
        pop pop false
      }ifelse
    }
    {
     false
    }ifelse
  }	ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate we are being separated through overloaded
% setcmykcolor/currentcmykcolor operators, Level 1 style
%----------------------------------------------------------------------------
/ColorSeparationLevel1

	% try to set pure Cyan, Magenta, Yellow and Black colors and see whether system knock one of the colors

	1 0 0 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
	0 1 0 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
	0 0 1 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
	0 0 0 1 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
	and and and not
def

%----------------------------------------------------------------------------
% Flag to indicate we are being separated (does not matter by which method)
%----------------------------------------------------------------------------
/ColorSeparation
  /LumSepsDict where            % see if we're being separated by TrapWise or PressWise
  {
    pop                         % lose the dictionary
    false                       % return false
  }
  {
    /AldusSepsDict where        % they might also use this one (Mac vs. PC?)
    {
      pop                       % lose the dictionary
      false                     % return false
    }
    {                           % we're not being separated by TrapWise or PressWise, use a generic method
      InRipSeparation						% is in-RIP (Level2 style) separation
      {
        true
      }
      {
        % is Level 1 style separation, through overloaded setcmykcolor currentcmykcolor operators
		ColorSeparationLevel1
      }ifelse
    }ifelse
  }ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate that PS device has color capabilities
%----------------------------------------------------------------------------
/IsColorDevice
	/deviceinfo where
	{
		pop deviceinfo /Colors known
		{
			deviceinfo /Colors get exec 1 gt
		}
		{
			false
		}ifelse
	}
	{
		/statusdict where
		{
			pop statusdict /processcolors known
			{
				statusdict /processcolors get exec 1 gt
			}
			{
				false
			}ifelse
		}
		{
			false
		}ifelse
	} ifelse
def

%----------------------------------------------------------------------------
% Proc:		get_simulate_devicen
% Stack:	--> get_simulate_devicen --> bool
%					bool true - smiluate DeviceN through overprinting on Level 2
% Desc:		determines if we should simulate DeviceN colors through overprints thus
%					preserving spot colors on Level 2 devices in composite mode
%----------------------------------------------------------------------------
/get_simulate_devicen
  get_ps_level 2 eq							% we simulate DeviceN only on Level2
  {
    {
			SeparationMode /OnHost ne								% no DeviceN simulation for on-host separations mode
			InRipSeparation AdobeDistiller or and		% do it for in-RIP separation or distilling
    } bind
  }
  {
    false
  }ifelse
def

%----------------------------------------------------------------------------
%
%	Color objects definition section
%
%----------------------------------------------------------------------------

% Default document colorspaces
/DocGrayScaleSpace [/DeviceGray] def
/DocRgbSpace [/DeviceRGB] def
/DocCmykSpace [/DeviceCMYK] def

/DocLabSpace
[
	/CIEBasedABC
	<<
	/BlackPoint [0 0 0]
	/WhitePoint [ 0.9637  1.0000  0.8241 ]
	/RangeABC [0 100 -128 127 -128 127]
	/DecodeABC [{16 add 116 div} bind {500 div} bind {200 div} bind]
	/MatrixABC [1 1 1 1 0 0 0 0 -1]
	/DecodeLMN
	[
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  0.9637 mul }bind 
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  1.0000 mul }bind 
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  0.8241 mul }bind 
	]
	>>
] def

%----------------------------------------------------------------------------
% Proc:		validate_cie_colorspace_whitepoint
% Stack: 	colorspacedict --> validate_cie_colorspace_whitepoint --> colorspacedict
% Desc: 	validates CIE colorspace white point, the Yw parameter must be 1.0
%----------------------------------------------------------------------------
/validate_cie_colorspace_whitepoint
{
	load dup aload pop
	/WhitePoint get
	1 1.0 put pop
} bd

%----------------------------------------------------------------------------
% Proc:		set_cie_colorspaces
% Stack: 	none
% Desc: 	sets document color spaces to the CIE CSA, if exist
%----------------------------------------------------------------------------
/set_cie_colorspaces
{
	/DocGrayScaleSpaceCIE where
	{
		pop
		/DocGrayScaleSpaceCIE validate_cie_colorspace_whitepoint /DocGrayScaleSpace xd
		
		% modify CIEBasedA definition for /DecodeA key written by ICM
		% it is an array while should be a procedure, PS interpreters will fail otherwise
		DocGrayScaleSpace aload pop
		begin pop
			/DecodeA where
			{
				pop
				DecodeA type /arraytype eq
				{
					DecodeA aload pop
					/DecodeA exch def			
				}if
			}if
		end
	}if

	/DocRgbSpaceCIE where
	{	
		pop
		/DocRgbSpaceCIE validate_cie_colorspace_whitepoint /DocRgbSpace xd
	}if

	/DocCmykSpaceCIE where
	{
		pop
		/DocCmykSpaceCIE validate_cie_colorspace_whitepoint /DocCmykSpace xd
	}if
} bd

%----------------------------------------------------------------------------
% Proc:		set_rendering_intent
% Stack: 	rendering_intent set_rendering_intent
%			rendering_intent - either /Perceptual, /AbsoluteColorimetric,
%			/RelativeColormetric or /Saturation
% Desc: 	sets prefered rendring intent to use in CRD on device
%----------------------------------------------------------------------------
/set_rendering_intent
{
	Level3
	{
		findcolorrendering
		{
			% CRD found for requested rendering intent and device settings
			/ColorRendering findresource setcolorrendering 
		}
		{
			% CRD not found for requested rendering intent
			dup /DefaultColorRendering eq
			{ 
				pop
			}
			{
				/ColorRendering findresource setcolorrendering 
			}
		}ifelse 
	}
	{
		pop
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:	findcmykcustomcolor
% Stack: 	c m y k name --> findcmykcustomcolor --> array
%				c - cyan color component
%				m - magenta color component
%				y - yellow color component
%				k - black color component
%				(name) - spot color name
% Desc: 	finds spot color object defined by the name, if no fyndcmykcutomcolor
%				is defined on the system  just stores alternative CMYK values and name
%				in the array to be used by setcustomcolor procedure
%----------------------------------------------------------------------------
/findcmykcustomcolor where
{
  pop
}
{
  /findcmykcustomcolor
  {
    5 array astore
  } def
} ifelse

%----------------------------------------------------------------------------
% Proc:	setcustomcolor
% Stack: 	array tint --> setcustomcolor
%				array - color array returned by findcmykcustomcolor
%				tint - color component value
% Desc: 	sets custom ink ( spot ) color or its alternative CMYK representation
%				if spot color is not available on the system (printer/RIP)
%----------------------------------------------------------------------------
/setcustomcolor where
SeparationMode /OnHost ne and
{
  pop
}
{
	%----------------------------------------------------------------------------
	% Stack: 	tint cyan magenta yellow black tint_cmyk_color cyan1 magenta1 yellow1 black1
	% Desc: 	tint color
	%----------------------------------------------------------------------------
	/tint_cmyk_color
	{
		 5 -1 roll
		 dup 1 ge                    	% see if tint >= 1
		 {pop}                       	% if it is, pop it
		 {                           	% otherwise, multiply all 4 components
			4
			{
				dup                   	% duplicate the tint
				6 -1 roll              	% get next component
				mul                    	% multiply with current tint
				exch                    % tint back on top
			}repeat
			pop                        	% no need for tint anymore
		 } ifelse
	} bd  
  
	%----------------------------------------------------------------------------
	% Stack: 	c m y k setprocesscolor_5 -
	% Desc: 	sets process color without doing any separations
	%			we assume color has been preseparated
	%----------------------------------------------------------------------------
	/setprocesscolor_5
	{
		SepMode_5 0 eq              % Check if not performing color seps.
		{
			SetCmyk_5               % set CMYK color
		}
		{
			SepsColor not         	% separating in grayscale
   			{
				4 1 roll pop pop pop	% leave just K component on stack
				1 exch sub SetGry		%	set gray component		
			}
			{
				SetCmyk_5               % set CMYK color for separations in color
			}ifelse
		}ifelse
	} bd	
  
	/setcustomcolor
	{
  		exch
    	aload pop
    	SepMode_5 0 eq
    	{
     		pop
     		tint_cmyk_color
     		setprocesscolor_5
    	}
    	{
     		CurrentInkName_5 eq
     		{
      			4 index
     		}
     		{
      			0
     		}ifelse
     		6 1 roll
     		5 rp
     		1 sub neg SetGry
    	}ifelse
   } bd 

} ifelse

%----------------------------------------------------------------------------
% Proc:		convert_rgb_to_cmyk
% Stack: 	r g b ConvDict convert_rgb_to_cmyk c m y k
%					r - red
%					g - green
%					b - blue
%					ConvDict - conversion dictionary with RGB-CMYK look up table (LUT)
%					c - cyan
%					m - magenta
%					y - yellow
%					k - black
% Desc: 	converts rgb color values to cmyk color values using either RGB-to-CMYK
%					look up table	if supplied, or primitive conversion formulae
%----------------------------------------------------------------------------
/convert_rgb_to_cmyk
{
 dup type /dicttype eq
 {
 }
 {
  3                         %
  {                         % r g b
    1 exch sub              % r g 1-b       	% y = 1 - b
    3 1 roll                % y r g
  } repeat                  % c m y
  3 copy                    % c m y c m y
  min min                   % c m y min(c,m,y)     	% K=min(c,m,y)
  3                         %
  {                         % c m y K
    dup 5 -1 roll           % m y K K c
    sub neg                 % m y K c-K     	% C = c - K
    exch                    % m y C K
  } repeat                  % C M Y K
 } ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		colorspace safe_setcolorspace
% Stack: 	colorspace --> safe_setcolorspace -->
% 				colorspace colorspace to set
% Desc: 	set colorspace, unless it is already current colorspace
%----------------------------------------------------------------------------
/safe_setcolorspace
{
  dup
  currentcolorspace eq
  {
    pop
  }
  {
    setcolorspace

  }ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		safe_setoverprint
% Stack:	overprintflag safe_setoverprint
%					overprintflag - boolean or integer
% Desc:		sets current color performing separations if necessary
%----------------------------------------------------------------------------
/safe_setoverprint
{
	dup type /booleantype eq			% boolean flag is passed
  {
    dup
    currentoverprint ne
    {
			setoverprint
		}
    {
			pop
		}
    ifelse
  }
  {															% integer flag is passed
		1 eq setoverprint
	}
  ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_cmyk_channel_name
% Stack: 	channelName --> is_cmyk_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to cmyk color
%----------------------------------------------------------------------------
/is_cmyk_channel_name
{
	/channel_name xd

	channel_name /Cyan eq
	channel_name /Magenta eq or
	channel_name /Yellow eq or
	channel_name /Black eq or
	{
		true		
	}
	{
		false
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_rgb_channel_name
% Stack: 	channelName --> is_rgb_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to RGB color
%----------------------------------------------------------------------------
/is_rgb_channel_name
{
	/channel_name xd

	channel_name /Red eq
	channel_name /Green eq or
	channel_name /Blue eq or
	{
		true		
	}
	{
		false
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_spot_channel_name
% Stack: 	channelName --> is_spot_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to spot color
%----------------------------------------------------------------------------
/is_spot_channel_name
{
	/channel_name xd

	channel_name is_cmyk_channel_name
	channel_name is_rgb_channel_name or
	channel_name /Gray eq or
	{
		false		
	}
	{
		true
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		spot_tint_transform_proc
% Stack: 	tint  [ alternativeColors ] alternativeSpace --> spot_tint_transform_proc -- > tinted spot color in alternative color space
%			alternativeSpace - alternative color space ( e.g. /DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%			[ alternative color values ] - spot color values in alternative color space
%			tint - tint of spot color [ 0.. 1.0]
% Desc: 	applies tint to spot ink's alternative color space values
%----------------------------------------------------------------------------
/spot_tint_transform_proc
{
	/alternativeSpace xd
	/alternativeColors xd
	/tint xd
	
	alternativeSpace DocLabSpace eq
	{
		/mixMethod /Additive def
		/altSpaceNumChannels 3 def
	}
	{
	  alternativeSpace DocCmykSpace eq
	  {
		/mixMethod /Subtractive def
		/altSpaceNumChannels 4 def
	  }
	  {
		alternativeSpace DocRgbSpace eq
		{
		  /mixMethod /Additive def
		  /altSpaceNumChannels 3 def
		}
		{
		  alternativeSpace DocGrayScaleSpace eq
		  {
			/mixMethod /Additive def
			/altSpaceNumChannels 1 def
		  } if
		} ifelse
	  }ifelse
	}ifelse

  	% apply tint on spot's alt color values

  	alternativeSpace DocLabSpace eq
	{
		% for LAB tint just colorant values, leave lightness alone
		alternativeColors aload pop
		tint mul 3 1 roll
		tint mul 3 1 roll
		dup 100 exch sub 1 tint sub mul add 3 1 roll
	}
	{
  		/tintedColor altSpaceNumChannels {0.0} repeat altSpaceNumChannels array astore def
		
		0 1 altSpaceNumChannels 1 sub
		{
			/altChannelIndex exch def
			
			alternativeColors altChannelIndex get
			
			% tint every channel
			mixMethod /Additive eq
			{
				1.0 exch sub tint mul
				1.0 exch sub
			}
			{
				tint mul
			}ifelse
			
			tintedColor altChannelIndex 3 2 roll put
		}for
		
		tintedColor aload pop
	}ifelse
  
} bd

%----------------------------------------------------------------------------
% Proc:	devicen_colorant_mixer_proc
% Stack: 	colorant1... colorantN  [ alternativeColor ] [names] alternativeSpace  N --> colorant_mixer_proc -- > mixedColor
%			N - number of colorants
%			alternativeSpace - alternative color space ( e.g. /DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%			colorant i - colorant values
%			alternativeColor N - colorant representation in alternative colorspace
%			names N - alternative color plate names
%			mixedColor - mixed color in alternativeColorspace
% Desc: 	mixes colorants to produce color representation in alternative color space
%----------------------------------------------------------------------------
/devicen_colorant_mixer_proc
{
	/numChannels xd
	/alternativeSpace xd
	/channelNames xd
	/alternativeColors xd
	numColorants array astore /colorants xd

	/is_spot_channel_name_loc { is_spot_channel_name } bind def
	
	alternativeSpace DocCmykSpace eq
	{
		/mixMethod /Subtractive def
		/altSpaceNumChannels 4 def
		/is_spot_channel_name_loc { is_cmyk_channel_name not } bind def
	}
	{
		alternativeSpace DocRgbSpace eq
		{
			/mixMethod /Additive def
			/altSpaceNumChannels 3 def
			/is_spot_channel_name_loc { is_rgb_channel_name not } bind def
		}
		{
			alternativeSpace DocGrayScaleSpace eq
			{
				/mixMethod /Additive def
				/altSpaceNumChannels 1 def
				/is_spot_channel_name_loc { /Gray ne } bind def
			} if
		} ifelse
	}ifelse

  % iterate over all components of alternative color space
  mixMethod /Additive eq
  {
	/mixedColor altSpaceNumChannels {0.0} repeat altSpaceNumChannels array astore def

	/bProcessPlateTinted false def
	
	0 1 numChannels 1 sub
	{
		/channelIndex exch def

		channelNames channelIndex get is_spot_channel_name_loc
		/bSpotChannel xd	
		/sourceChannel colorants channelIndex get def								% colorant [channelIndex]
		
		/bWhiteBackground
			0 mixedColor {add} forall
			altSpaceNumChannels div
			0.999 gt bProcessPlateTinted and
		def
		
		bSpotChannel bProcessPlateTinted not and
		{
			/bSpotChannel false def
		}if
		
		0 1 altSpaceNumChannels 1 sub
		{
			/altChannelIndex exch def
			/mixedChannel mixedColor altChannelIndex get def

			sourceChannel
			alternativeColors channelIndex get altChannelIndex get 	% alternativeColor[channelIndex][altChannelIndex]
			1.0 exch sub mul
			1.0 exch sub
		
			dup 1.0 gt { pop 1.0 }if
			dup 0.0 lt { pop 0.0 }if
			
			bSpotChannel
			{
				sourceChannel 0.0 gt
				{
					% paints area covered by spot
					mixedChannel mul
				}
				{
					% paints area not covered by spot ink
					pop mixedChannel
				}ifelse
			}
			{
				/bProcessPlateTinted true def

				globaldict begin
					/bSkipDeviceNImage where
					{
						pop false
					}
					{
						true
					}
					ifelse
				end
				
				DevicenImage and
				{
					pop

					sourceChannel
					alternativeColors channelIndex get altChannelIndex get 	% alternativeColor[channelIndex][altChannelIndex]
					mul
					
					mixedChannel add
				}
				{
					mixedChannel add
				}ifelse
			}ifelse
			
			dup 1.0 gt { pop 1.0 }if
			dup 0.0 lt { pop 0.0 }if
			mixedColor altChannelIndex 3 2 roll put
		}for
	}for
  }
  {
	/mixedColor altSpaceNumChannels {1} repeat altSpaceNumChannels array astore def

	0 1 altSpaceNumChannels 1 sub
	{
		/targetIndex exch def

		% iterate over all colorants of original colorspace
		0 1 numColorants 1 sub
		{
		  /sourceIndex exch def
		  colorants sourceIndex get								%  colorant [sourceIndex]
		  alternativeColors sourceIndex get targetIndex get 	% alternativeColor[sourceIndex][targetIndex]

		  mul
		  1 exch sub

		  mixedColor targetIndex get mul mixedColor targetIndex 3 2 roll put
		} for

		mixedColor targetIndex 1 mixedColor targetIndex get sub put
		
	} for
  } ifelse

  mixedColor aload pop
} bd


%----------------------------------------------------------------------------
% Colorspec dictionary definition
% Grayscale, RGB, HSB, CMYK, Lab, Spot, DeviceN and Registration color dictionaries
% are created by replicating and extending abstract ColorSpec dictionary
%----------------------------------------------------------------------------
/ColorSpec
  9 dict begin
		/color [] def					% color component values
		/names [] def					% color components names - reserved : (Cyan ) (Magenta) (Yellow) (Black) (Red) (Green) (Blue) (All)
		/num 0 def						% number of color components/names
		/ColorModel	null def	% color model : /Grayscale /Rgb /Cmyk /Spot /DeviceN /Registration
		/ColorSpace [] def		% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> set_color -->
		% Desc: 	sets color as current
		%----------------------------------------------------------------------------
		/set_color
		{
			ColorSeparationLevel1
			{
				convert_to_cmyk /color get aload pop setcmykcolor
			}
			{
				ColorSpace safe_setcolorspace
				color aload pop setcolor
			}
			ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_set_color --> bool
		%					bool - painting flag : true - paint, false - do not paint
		% Desc: 	separates color, if necessary, and sets as current. Painting
		%					flag is set according whether separation to current plate happened
		%					and overprint settings
		%----------------------------------------------------------------------------
		/separate_set_color
		{
			SeparationMode /OnHost eq
			{
				separate_color
				{
				 /set_color dexec true
				}
				{
					pop							% remove colorspec on stack
					currentoverprint
					{
						false					% overprint flag is on, do not knockout
					}
					{
						% overprint flag is off, knockout
						SeparateInColor
						{
							% knockout - paint white CMYK object
							0 0 0 0 SetCmyk_5 true
						}
						{
							% knockout - paint white grayscale object
							1 SetGry true
						} ifelse
					} ifelse
				} ifelse
			}
			{
				set_color true
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color	{ currentdict false } bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk { currentdict } bd

	currentdict end
def

%----------------------------------------------------------------------------
% Grayscale color dictionary definition
%----------------------------------------------------------------------------
/GrayscaleColorSpec
	ColorSpec 9 dict copy
  begin
		/names {/Black} def									% color components names
		/num 1 def													% number of color components/names
		/ColorModel	/Grayscale def					% color model
		/ColorSpace DocGrayScaleSpace def		% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false

			SeparationMode /OnHost eq
			{
				SeparationPlateName /Black eq
				{
					SeparateInColor
					{
						pop convert_to_cmyk true
					}
					{
						pop true
					} ifelse
				}if
			}if
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			0 0 0 color aload pop 1 exch sub create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_grayscale_color
% Stack: 	tint --> create_grayscale_color -- >colorspec
%				tint - gray component value
%				colorspec - colorspec dicitonary
% Desc: 	creates grayscale color dictionary
%----------------------------------------------------------------------------
/create_grayscale_color
{
	GrayscaleColorSpec 9 dict copy
	begin
		/color exch 1 array astore def			% color component values
		/ColorSpace DocGrayScaleSpace def		% document Grayscale color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% RGB color dictionary definition
%----------------------------------------------------------------------------
/RgbColorSpec
	ColorSpec 9 dict copy
  begin
    /names {/Red /Green /Blue} def		% color components names
    /num 3 def												% number of color components/names
		/ColorModel	/Rgb def							% color model
    /ColorSpace DocRgbSpace def				% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			convert_to_cmyk /separate_color dexec
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			color aload pop convert_rgb_to_cmyk create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_rgb_color
% Stack: 	r g b --> create_rgb_color -- >colorspec
%				r, g, b - Red, Green, Blue color components respectively
%				colorspec - colorspec dicitonary
% Desc: 	creates RGB color dictionary
%----------------------------------------------------------------------------
/create_rgb_color
{
	RgbColorSpec 9 dict copy
	begin
		3 array astore /color exch def		% color component values
		/ColorSpace DocRgbSpace def			% document RGB color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% HSB color dictionary definition
% HSB is a math transform of RGB color model and is represented by RGB color space
%----------------------------------------------------------------------------
/HsbColorSpec
	ColorSpec 9 dict copy
  begin
    /names {/Hue /Saturation /Brightness} def		% color components names
    /num 3 def												% number of color components/names
		/ColorModel	/Hsb def							% color model
    /ColorSpace DocRgbSpace def				% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			convert_to_cmyk /separate_color dexec
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			color aload pop
			hsb2rgb
			convert_rgb_to_cmyk create_cmyk_color
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_rgb --> colorspec
		% Desc: 	converts current colorspec to RGB colorspec
		%----------------------------------------------------------------------------
		/convert_to_rgb
		{
			color aload pop
			hsb2rgb
			create_rgb_color
		} bd

	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_hsb_color
% Stack: 	h s b --> create_hsb_color -- >colorspec
%				h, s, b - Hue, Saturation, Brightness color components respectively
%				colorspec - colorspec dicitonary
% Desc: 	creates HSB color dictionary
%----------------------------------------------------------------------------
/create_hsb_color
{
	HsbColorSpec 9 dict copy
	begin
		3 array astore /color exch def		% color component values
		/ColorSpace DocRgbSpace def				% document RGB color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% CMYK color dictionary definition
%----------------------------------------------------------------------------
/CmykColorSpec
  ColorSpec 9 dict copy													% copy colorspec
  begin
    /names {/Cyan /Magenta /Yellow /Black} def	% color components names
    /num 4 def																	% number of color components/names
 		/ColorModel	/Cmyk def												% color model
    /ColorSpace DocCmykSpace def								% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false

			SeparationPlateIndex 0 ge
			SeparationPlateIndex 3 le and
			{
				color SeparationPlateIndex get	% get tint on current separation plate

				dup 0 gt
				{
					3 1 roll pop pop
					% tint on current plate is not zero - have separation
					SeparateInColor
					{
						% move tint to SeparationPlateIndex position in CMYK color
						% so for example Cyan plate will print in pure cyan CMYK
						% color instead of default grayscale

						0 0 0 4 SeparationPlateIndex roll create_cmyk_color true
					}
					{
						% separate to grayscale color
						1 exch sub create_grayscale_color true
					} ifelse
				}
				{
					pop
				} ifelse
			} if
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			% it is CMYK already, return current colorspec
			currentdict
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_cmyk_color
% Stack: 	c m y k --> create_cmyk_color -- >colorspec
%				c, m, y, k - Cyan, Magenta, Yellow and Black color components respectively
%				colorspec - colorspec dicitonary
% Desc: 	creates CMYK color dictionary
%----------------------------------------------------------------------------
/create_cmyk_color
{
  CmykColorSpec 9 dict copy
  begin
    4 array astore /color exch def			% color component values
	/ColorSpace DocCmykSpace def			% document CMYK color space 	
  currentdict end
} bd

%----------------------------------------------------------------------------
% Spot color dictionary definition
%----------------------------------------------------------------------------
/SpotColorSpec
  ColorSpec 9 dict copy
  begin
    /num 1 def											% number of color components/names
		/ColorModel	/Spot def						% color model

		%----------------------------------------------------------------------------
		% Stack: 	--> set_color -->
		% Desc: 	sets color as current
		%----------------------------------------------------------------------------
		/set_color
		{
			ColorSeparationLevel1
			{
				color aload pop get_cmyk_alternative_color /color get aload pop names aload pop findcmykcustomcolor exch setcustomcolor
			}
			{
				ColorSpace safe_setcolorspace
				color aload pop setcolor
			}
			ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false					% retvalue - default case, no separation
			SeparationPlateIndex 4 eq			% make sure current plate is spot plate
			{
				names aload pop SeparationPlateName eq
				{
					color aload pop						% get tint on current spot separation plate
					dup 0 gt							% duplicate tint value to be consumed by comparison
					{
						% remove current color and retvalue from stack
						3 1 roll pop pop

						% tint is not zero - we have separation
						SeparateInColor
						{
							% convert color to CMYK to paint separation in color
							pop convert_to_cmyk true
						}
						{
							% separate to gray color
							1 exch sub create_grayscale_color true
						} ifelse
					}
					{
						pop % remove duplicated tint from stack
					} ifelse
				} if
			} if
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			/alternativeSpace ColorSpace 2 get def		% get alternative colorspace
			/tintTransformProc ColorSpace 3 get def		% get tint transformation procedure

			alternativeSpace DocCmykSpace eq
			{
				% alternative space is CMYK, create CMYK color from alternative color values
				color aload pop tintTransformProc create_cmyk_color
			}
			{
				alternativeSpace DocRgbSpace eq
				{
					% alternative space is RGB, create RGB color from alternative color values
					% and convert RGB color to CMYK
					color aload pop tintTransformProc create_rgb_color /convert_to_cmyk dexec
				}
				{
					alternativeSpace DocGrayScaleSpace eq
					{
						% alternative space is grayscale, invert spot tint and use as K component of CMYK color
						0 0 0 color aload pop 1 sub create_cmyk_color
					}
					{
						0 0 0 1 create_cmyk_color
					}ifelse
				} ifelse
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> get_cmyk_alternative_color --> colorspec
		% Desc: 	obtains CMYK representation of this spot color
		%----------------------------------------------------------------------------
		/get_cmyk_alternative_color
		{
			/alternativeSpace ColorSpace 2 get def		% get alternative colorspace

			alternativeSpace DocCmykSpace eq
			{
				% alternative space is CMYK, create CMYK color from alternative color values
				alternativeColor aload pop create_cmyk_color
			}
			{
				alternativeSpace DocRgbSpace eq
				{
					% alternative space is RGB, create RGB color from alternative color values
					% and convert RGB color to CMYK
					alternativeColor  aload pop create_rgb_color /convert_to_cmyk dexec
				}
				{
					alternativeSpace DocGrayScaleSpace eq
					{
						% alternative space is grayscale
						alternativeColor  aload pop create_grayscale_color /convert_to_cmyk dexec
					} 
					{
						0 0 0 1 create_cmyk_color
					}ifelse
				} ifelse
			} ifelse
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_spot_colorspace
% Stack: 	name [alternativeColor] alternativeSpace  --> create_spot_colorspace -- > colorspace
%				name - spot color name
%				alternativeSpace - alternative colorspace (/DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%				alternativeColor - spot color representation in alternative colorspace
% Desc: 	creates spot ( named ) colorspace
%----------------------------------------------------------------------------
/create_spot_colorspace
{
  load /alternativeSpace xd
  /alternativeColor xd
  /name xd
 
  [ /Separation name alternativeSpace [ alternativeColor alternativeSpace /spot_tint_transform_proc cvx ] cvx ]
} bd

%----------------------------------------------------------------------------
% Proc:		create_spot_color
% Stack:	tint spotSpace --> create_spot_color -- >colorspec or
%         tint name [alternativeColor] alternativeSpace --> create_spot_color -- >colorspec or
%						tint - spot color ink value
%						name - spot color name
%						alternativeColor - spot color representation in alternative colorspace
%						alternativeSpace - alternative colorspace (/DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
% Desc: 	creates spot ( named ) colorspec. Uses spot colorspace on stack or creates
% 				new colorspace from stack parameters
%----------------------------------------------------------------------------
/create_spot_color
{
	SpotColorSpec 9 dict copy
  begin
 		dup type /arraytype ne
    {
			create_spot_colorspace				% create spot colorspace from stack parameters
    } if
		/ColorSpace xd
    /color exch 1 array astore def	% color component values
    ColorSpace 1 get 1 array astore
    /names xd												% spot color name
  currentdict end
} bd

%----------------------------------------------------------------------------
% DeviceN color dictionary definition
% Inherited from SpotColorSpec as there are strong similarities between
% spot and DeviceN colors, spot being 1 ink DeviceN color
%----------------------------------------------------------------------------
/DevicenColorSpec
  SpotColorSpec 9 dict copy
  begin
		/ColorModel	/DeviceN def							% color model

    %----------------------------------------------------------------------------
		% Stack: 	--> set_color -->
		% Desc: 	separates color, if necessary, and sets as current
		%----------------------------------------------------------------------------
		/set_color
		{
			Level3
			{
				% Level 3 support DeviceN colors natively
				ColorSpace safe_setcolorspace
				color aload pop setcolor
			}
			{
				% for Level 2 output color in alternative colorspace
				ColorSpace 2 get setcolorspace
				color aload pop ColorSpace 3 get exec setcolor
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false			% default case - no separation

			/PlateIndex -1 def

			0 1 num 1 sub
			{
				dup
				names exch get SeparationPlateName eq
				{
					/PlateIndex xd
					exit
				} if
				pop
			} for

			PlateIndex 0 ge
			{
				color PlateIndex get														% get separation ink tint
				dup 0 gt
				{
					% tint not zero - have separation
					SeparateInColor
					{
						% convert DeviceN plate color to CMYK to paint separation in color

						% leave only separation component in DeviceN
						num 1 sub {0} repeat num PlateIndex roll

						% create temp DeviceN color with single component and convert it to DeviceN
						ColorSpace create_devicen_color /convert_to_cmyk dexec true
					}
					{
						% separate to gray color
						1 exch sub create_grayscale_color true
					} ifelse
					4 2 roll pop pop
				}
				{
					pop
				} ifelse
			} if
		} bd

    %----------------------------------------------------------------------------
		% Stack: 	i --> get_ink_as_spot --> colorspec
		%					i - DeviceN colorant index
		%					colorspec - DeviceN colorant as spot color
		% Desc: 	returns i-th colorant as spot color
		%----------------------------------------------------------------------------
		/get_ink_as_spot
		{
			dup /indexInk xd
			dup color exch get		% get i-th colorant tint
			exch names exch get		% get i-th colorant name
			[											% start array of alternativeColor values
				1.0 num 1 sub {0} repeat num indexInk roll		% set i-th ink to 1.0, the rest to 0.0
				ColorSpace 3 get exec								% execute tint conversion proc to convert i-th ink to alt color space
			]
			ColorSpace 2 get											% get alternative space
			create_spot_color											% create spot color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_devicen_colorspace
% Stack: 	[names] [ alternativeColor1 ] ... [alternativeColorN ]  alternativeSpace N --> create_devicen_colorspace -- > colorspace
%				N - number of color components in DeviceN color
%				alternativeSpace - alternative color space to define DeviceN in
%				alternativeColori - alternative color values for i-th DeviceN colorant
%				names - colorant names
% Desc: 	creates DeviceN colorspace
%----------------------------------------------------------------------------
/create_devicen_colorspace
{
  /numColorants xd
  load /alternativeSpace xd
  bind /tintTransform exch def
  /names xd

  [ /DeviceN names alternativeSpace /tintTransform load ]
} bd

%----------------------------------------------------------------------------
% Proc:	create_devicen_color
% Stack: 	C1...CN DeviceNColorspace --> create_devicen_color -- >colorspec or
%				C1...CN [names] [ alternativeColor1 ] ... [alternativeColorN ]  alternativeSpace N --> create_devicen_color -- >colorspec
%				C1..CN - DeviceN color components values
%				DeviceNColorspace - DeviceN colorspace array
% Desc: 	creates DeviceN colorspec. Either uses DeviceN colorspace on stack ot creates new colorspace
%				from stack parameters
%----------------------------------------------------------------------------
/create_devicen_color
{
  DevicenColorSpec 9 dict copy
  begin
    dup type /arraytype ne
    {
      create_devicen_colorspace				% create DeviceN colorspace from stack parameters
    } if
    /ColorSpace xd										% CSA or device colorspace array
    /num ColorSpace 1 get length def	% number of color components/names
    /names ColorSpace 1 get def				% color components names
    num array astore /color xd				% color component values
  currentdict end
} bd

%----------------------------------------------------------------------------
% Registratin color dictionary definition
% registration color separates to all plates
%----------------------------------------------------------------------------
/RegistrationColorSpec
  ColorSpec 9 dict copy
  begin
    /num 1 def										% number of color components/names
 		/ColorModel	/Registration def	% color model
    /ColorSpace										% CSA or device colorspace array
    {
      [ /Separation /All DocCmykSpace { dup dup dup } ]
    } def
    /names [/All] def							% color components names

			%----------------------------------------------------------------------------
		% Stack: 	--> set_color -->
		% Desc: 	sets color as current
		%----------------------------------------------------------------------------
		/set_color
		{
			ColorSeparationLevel1
			{
				% paint in gray on all plates
				DocGrayScaleSpace safe_setcolorspace
				color aload pop 1 exch sub setcolor
			}
			{
				ColorSpace safe_setcolorspace
				color aload pop setcolor
			}
			ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			SeparateInColor
			{
				convert_to_cmyk true
			}
			{
				color aload pop 1 exch sub create_grayscale_color true
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			color aload pop dup dup dup create_cmyk_color
		} bd
	currentdict end
def


%----------------------------------------------------------------------------
% Proc:		create_registration_color
% Stack: 	tint --> create_registration_color -- >colorspec
%					tint - tint of registration colorant
% Desc: 	registration color is a color that will separate to all plates
%					for composite output tint will appear in all channel, including spot and DeviceN
%----------------------------------------------------------------------------
/create_registration_color
{
  RegistrationColorSpec 9 dict copy
  begin
    1 array astore /color xd	% color component values
  currentdict end
} bd

%----------------------------------------------------------------------------
% LAB color dictionary definition
%----------------------------------------------------------------------------
/LabColorSpec
	ColorSpec 9 dict copy
  begin
    /names {/L /a /b} def			% color components names
    /num 3 def						% number of color components/names
	/ColorModel	/Lab def			% color model
    /ColorSpace DocLabSpace def		% LAB CSA

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			convert_to_cmyk /separate_color dexec
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			0 0 0 0 create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_lab_color
% Stack: 	L a b --> create_lab_color -- >colorspec
%			L, a, b - L, a, b color components respectively
%			colorspec - colorspec dicitonary
% Desc: 	creates LAB color dictionary
%----------------------------------------------------------------------------
/create_lab_color
{
	LabColorSpec 9 dict copy
	begin
		3 array astore /color exch def		% color component values
		/ColorSpace DocLabSpace def			% LAB color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% Proc:		set_solid_fill
% Stack: 	colorspec --> set_solid_fill -->
%					colorspec - color of the fill
% Desc: 	sets fill color and fill type to solid
%----------------------------------------------------------------------------
/set_solid_fill
{
  /FillColor xd
	/$fil 0 def
} bd

%----------------------------------------------------------------------------
% Proc:		set_outline
% Stack: 	colorspec --> set_outline -->
%					colorspec - color of the outline
% Desc: 	sets outline color
%----------------------------------------------------------------------------
/set_outline
{
  /OutlineColor xd
} bd

%----------------------------------------------------------------------------
% Proc:   CheckLevelCompatibility
% Stack:  - CheckLevelCompatibility -
% Desc:   check the PostScript level of the interpeter/device against the
%         the PostScript level of the document we outputed, if not compatable
%         print error message and exit smoothly.
%----------------------------------------------------------------------------
/CheckLevelCompatibility
{
  /DocPsLevel where           	% make sure that Document level is defined
  {
    pop
    DocPsLevel get_ps_level gt  % if document level (LV) is 2 or more and the
    {                         	% device is not 2 or more
      @np                     	% newpath
      /Courier findfont 12    	% set a font
      scalefont setfont
      72 144 m                	% moveto 2 inch off the bottom of the page
      (The PostScript level of Corel document is higher than the PostScript) show
      72 132 m
      (level of this device. Change the PS Level in the Corel application) show
      72 120 m
      (by selecting the PostScript tab in the print dialog, and selecting) show
      72 108 m
      (document level from the Compatibility drop down list.) show
      flush
      spg
      quit
    } if
  } if
} bd

%----------------------------------------------------------------------------
% These two functions serve as a hook for PIPELINE ASSOCIATES INC..
% They have implemented a Corel dictionary in their interpreter. It
% performs mostly exotic fill rendering in .C code (instead of our
% PS code). The key here is to make sure their dictionary is above ours
% on the dictionary stack!!
%
% Notes: The first function should be called at the beginning of the script
%        AFTER our dictionary has been put pushed.
%        The second function should be called at the end of the script
%        BEFORE our dictionary is popped.
%
% Contact: Stephen Kochan (President)  (973)428-1700
%          Tim Demarest (Developer)
%
% New in Draw 8: A similar hook for Lexmark printers. They have also
%                implemented direct support for our fountain fills.
%
%                The key difference between Lexmark and Pipeline's
%                hook is that an integer, 1, is pushed on the stack. This
%                represents a compatibility level for the Exotic Fill routines.
%                When Corel makes a new version of CorelDRAW, this number should
%                be incremented if changes were made to the fountain fill code
%                which would make it ncompatible with existing Lexmark printers.
%
%
%----------------------------------------------------------------------------
/@BeginSysCorelDict
{
 % Pipeline hook...
 systemdict /Corel30Dict known {systemdict /Corel30Dict get exec} if

 % Lexmark hook...
 systemdict /CorelLexDict known {1 systemdict /CorelLexDict get exec} if
} bd

/@EndSysCorelDict
{
 % Pipeline hook...
 systemdict /Corel30Dict known {end} if

 %Lexmark hook...
 /EndCorelLexDict where {pop EndCorelLexDict} if
} bd

%----------------------------------------------------------------------------
% Autoflatness for paths too complex to image.
% The next section is to avoid the limitcheck error of typesetters.
% The painting operators of PostScript are rewritten to increase
% flatness until either the object can be printed, or a flatness
% of 10 more than the initial flatness setting has been reached.
% In this case an error message is displayed and printing continues with
% the next object.
% The auto-flatness will be enabled only if the value of the "AutoFlatness"
% variable is true. The code to set this flag is output by the client app.
%----------------------------------------------------------------------------
/AutoFlatness where
{
 pop

 AutoFlatness
 {
	 %----------------------------------------------------------------------------
	 % @ifl Increase flatness			initial_flatness @ifl initial_flatness
	 %----------------------------------------------------------------------------
	 /@ifl
	 {
		dup currentflat
		exch sub 10 gt             	% Is current flatness increase > 10?
		{
		 ([Error: PathTooComplex; OffendingCommand: AnyPaintingOperator]\n)
		 print flush @np exit
		}
		{
		 currentflat 2 add setflat
		} ifelse
	 } bd

	 %----------------------------------------------------------------------------
	 % --- Then redefine fill, eofill, clip, eoclip, & stroke
	 %----------------------------------------------------------------------------
	 /@fill /fill ld
	 /fill
	 {
		currentflat
		{
		 {@fill} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@eofill /eofill ld
	 /eofill
	 {
		currentflat
		{
		 {@eofill} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@clip /clip ld
	 /clip
	 {
		currentflat
		{
		 {@clip} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@eoclip /eoclip ld
	 /eoclip
	 {
		currentflat
		{
		 {@eoclip} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@stroke /stroke ld
	 /stroke
	 {
		currentflat
		{
		 {@stroke} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd
	} if
} if

%----------------------------------------------------------------------------
% Proc:	@ssa
% Stack:	- @ssa -
% Desc:	turn strokeadjust on if we're using level 2
%----------------------------------------------------------------------------
/@ssa
  Level2
  {
    {true setstrokeadjust}
  }
  {
    {}
  } ifelse
bd

%----------------------------------------------------------------------------
/d /setdash ld               	% d  setdash     					array offset d -
/j /setlinejoin ld           	% j  set line join     		join j -
/J /setlinecap ld            	% J  set line cap       	cap J -
/M /setmiterlimit ld         	% M  set miter limit  		value M -
/w /setlinewidth ld          	% w  set line width    		width w -
/O {/FillOverprint xd} bd     % O  set overprint fill   flag O -
/R {/OutlineOverprint xd} bd  % R  set overprint stroke	flag R -
/W /eoclip ld          				% W  clip path          	- W -
/c /curveto ld               	% c  curveto smooth    		x1 y1 x2 y2 x3 y3 c -
/C /c ld                     	% C  curveto corner    		x1 y1 x2 y2 x3 y3 C -
/l /lineto ld                	% l  lineto smooth     		x y l -
/L /l ld                     	% L  lineto corner     		x y L -
/rl /rlineto ld              	% rl rlineto     					x y rl -
/m /moveto ld                	% m  moveto      					x y m -
/n /newpath ld               	% n  newpath     					- n -
/N /newpath ld               	% N  newpath     					- N -
/P {11 rp} bd                	% P  pattern stroke    		(same as p)
/u {} bd                     	% u  begin group        	- u -
/U {} bd                     	% U  end group          	- U -
/A {pop} bd                  	% A  locked object     		flag A -
/q /@gs ld                   	% q  gsave        				- g -
/Q /@gr ld                   	% Q  grestore     				- Q -
/& {}bd                      	% &  pattern marker    		- & -
/@j {@sv @np} bd             	% StartArrowhead
/@J {@rs} bd                 	% EndArrowhead

%----------------------------------------------------------------------------
% Proc: 	g
% Stack:	gray g -
% Desc:		set gray color for solid fill
%----------------------------------------------------------------------------
/g
{
 1 exch sub           				% get black component
 0 0 0 4 roll 3
 create_cmyk_color set_solid_fill
 /$fil 0 def       						% set name (null), fill type
} bd

%----------------------------------------------------------------------------
% Proc:		G
% Stack:	gray G -
% Desc:		set gray outline color
%----------------------------------------------------------------------------
/G
{
 1 sub neg            				% get black component
 0 0 0 4 -1 roll
 create_cmyk_color set_outline
} bd

%----------------------------------------------------------------------------
% Proc: 	i
% Stack: 	flatness i -
% Desc: 	Sets the current flatness
%----------------------------------------------------------------------------
/i
{
 dup 0 ne
 {setflat}
 {pop}
 ifelse
} bd

%----------------------------------------------------------------------------
% Curveto procedures
%----------------------------------------------------------------------------
/v                           	% v		curveto smooth    	x12 y12 x3 y3 v -
{
 4 -2 roll                   	% get x12 y12 on top
 2 copy                      	% duplicate them
 6 -2 roll c                 	% move x3 y3 back to the end
} bd

/V /v ld                     	% V   curveto corner    	x12 y12 x3 y3 V -
/y {2 copy c} bd             	% y   curveto smooth    	x1 y1 x23 y23 y -
/Y /y ld                     	% Y   curveto corner    	x1 y1 x23 y23 Y -

%----------------------------------------------------------------------------
% Proc: 	@w
% Stack: 	[matrix] bscale width height angle @w -
% Desc:		set pen matrix "$ptm" to desired settings
% 				bscale is a flag:
%					0: no scale
%					1: scale with object using matrix supplied on the stack
% 				matrix is passed only if bscale is 1 (object total matrix)
%----------------------------------------------------------------------------
/@w
{
 matrix rotate /$ptm xd      	% define $ptm to be rotation matrix
 matrix scale                	% set pen shape
 $ptm dup concatmatrix
 /$ptm xd
 1 eq                        	% if scale, concat object matrix
 {
  $ptm exch dup concatmatrix
  /$ptm xd
 }if
 
 /patternScallingMatrix where	% apply pattern scaling matrix, if exists, to account for line width scaling in patterns
 {
	pop
	patternScallingMatrix $ptm matrix concatmatrix
	/$ptm xd
 }if
 
 1 w                         	% basic thickness to be transformed by $ptm
} bd

%----------------------------------------------------------------------------
% Proc: 	@g
% Stack: 	freq ang spotproc 1 @g -
%							--or--
%					0 @g - 		(use default)
% Desc:		Set halftone screen for gray filling
% 				spotproc is a spot procedure name (ex: /@dot or /@lin)
%----------------------------------------------------------------------------
/@g
{
 1 eq dup /$sdf xd           	% set global flag
 {                           	% next 3 parameters are set only if parm1 is 1
  /$scp xd                   	% Current spot func for fill
  /$sca xd                   	% Current screen angle for fill
  /$scf xd                   	% Current screen frequency for fill
 } if
} bd

%----------------------------------------------------------------------------
% Proc: 	@G
% Stack: 	freq ang spotproc 1 @G -
%								--or--
%					0 @G - 		(use default)
% Desc:		Set halftone screen for gray stroking
% 				spotproc is a spot procedure name (ex: /@dot or /@lin)
%----------------------------------------------------------------------------
/@G
{
 1 eq dup /$SDF xd           	% set global flag
 {                           	% next 3 parameters are set only if parm1 is 1
  /$SCP xd                   	% Current spot func for stroke
  /$SCA xd                   	% Current screen angle for stroke
  /$SCF xd                   	% Current screen frequency for stroke
 } if
} bd

%----------------------------------------------------------------------------
% Proc: 	@D
% Stack: 	freq ang spotproc @D -
% Desc: 	setscreen for all document
%----------------------------------------------------------------------------
/@D
{
 2 index 0 eq
 {
  $dsf 3 1 roll              	% frequency angle proc deffreq
  4 -1 roll pop
 } if
 3 copy
 exch $Scra add exch load    	%: frequency angle+$Scra {proc}
 SetScr
 /$dsp xd                    	% default spot func name
 /$dsa xd                    	% default screen angle
 /$dsf xd                    	% default screen frequency function
} bd

%----------------------------------------------------------------------------
% Proc: 	$ngx
% Stack:
% Desc: 	set screen function
%----------------------------------------------------------------------------
/$ngx
{
 $SDF
 {
  $SCF
  SeparationMode /Composite eq    % Check if not performing color seps.
  {$SCA}
  {$dsa}
  ifelse
  $SCP
  @ss
 }if      												% alt. screen? (determined by stroke attribs)
} bd

%----------------------------------------------------------------------------
% Proc: 	min
% Stack: 	val1 val2 --> min --> value
% Desc: 	minimum
%----------------------------------------------------------------------------
/min
{
 2 copy le
 {pop}
 {exch pop} ifelse           	% get minimum of both values
} bd

%----------------------------------------------------------------------------
% Proc: 	max
% Stack: 	val1 val2 --> max --> value
% Desc: 	maximum
%----------------------------------------------------------------------------
/max
{
 2 copy ge
 {pop}
 {exch pop}
 ifelse  						         	% get max of both values
} bd

%----------------------------------------------------------------------------
% Proc: 	in_range
% Stack: 	value minimum maximum --> in_range --> newvalue
% Desc: 	forces a value between two limits
%----------------------------------------------------------------------------
/in_range
{
  3 -1 roll                   % get value on top
  min max
} bd

%----------------------------------------------------------------------------
% Proc: 	InRange
% Stack: 	value minimum maximum --> in_range --> newvalue
% Desc: 	The same as in_range, legacy namy for use in PS fills
%----------------------------------------------------------------------------
/InRange /in_range load bd

%----------------------------------------------------------------------------
% Proc:	@sqr
% Stack: 	size @sqr -
% Desc:
%----------------------------------------------------------------------------
/@sqr
{
 dup 0 rl
 dup 0 exch rl
 neg 0 rl
 @cp
} bd

%----------------------------------------------------------------------------
% Proc:		currentscale
% Stack: 	- currentscale sx sy
% Desc:
%----------------------------------------------------------------------------
/currentscale
{
 1 0 dtransform
 matrix defaultmatrix idtransform
 dup mul exch dup mul add sqrt

 0 1 dtransform
 matrix defaultmatrix idtransform
 dup mul exch dup mul add sqrt

} bd

%----------------------------------------------------------------------------
% Proc:		@unscale
% Stack: 	- unscale -
% Desc:
%----------------------------------------------------------------------------
/@unscale
{
 %stub... currentscale 1 exch div exch 1 exch div exch scale
} bd

%----------------------------------------------------------------------------
% Proc: 	wDstChck
% Stack:
% Desc: 	NEEDED by functions in USERPROC.TXT
%----------------------------------------------------------------------------
/wDstChck
{
 2 1 roll dup 3 -1 roll
 eq {1 add} if
} bd

%----------------------------------------------------------------------------
% Proc: 	@dot
% Stack: 	x y @dot num
% Desc:		implementation of a dot spot function for halftoning(see setscreen)
%----------------------------------------------------------------------------
/@dot
{
 dup mul exch dup mul add
 1 exch sub
} bd

%----------------------------------------------------------------------------
% Proc: 	@lin
% Stack: 	x y @lin num
% Desc:		implementation of a line spot function for halftoning(see setscreen)
%----------------------------------------------------------------------------
/@lin
{
 exch pop abs 1 exch sub
} bd

%----------------------------------------------------------------------------
% Proc: 	cmyk2rgb
% Stack: 	c m y k cmyk2rgb r g b
% Desc: 	converts cmyk to rgb using standard algorithm
%----------------------------------------------------------------------------
/cmyk2rgb
{                            	% c m y k
 3
 {
  dup 5 -1 roll             	% m y k k c
  add                       	% m y k k+c
  1 exch sub                	% m y k 1-(k+c)         % r = 1-(k+c)
  dup 0 lt                  	% m y k r r<0
  {
   pop 0                    	% m y k 0               % 0 < r < 1
  } if
  exch                      	% m y r k
 } repeat                   	% r g b k               % for each color
 pop                        	% r g b
} bd

%----------------------------------------------------------------------------
% Proc: 	rgb2cmyk
% Stack: 	r g b rgb2cmyk c m y k
% Desc: 	converts rgb to cmyk using standard algorithm
%----------------------------------------------------------------------------
/rgb2cmyk
{                            	% r g b
 3
 {                           	% r g b
  1 exch sub                 	% r g 1-b       				% y = 1 - b
  3 1 roll                   	% y r g
 } repeat                    	% c m y
 3 copy                      	% c m y c m y
 min min                     	% c m y min(c,m,y)     	% K=min(c,m,y)
 3
 {                           	% c m y K
  dup 5 -1 roll              	% m y K K c
  sub neg                    	% m y K c-K     				% C = c - K
  exch                       	% m y C K
 } repeat                    	% C M Y K
} bd

%----------------------------------------------------------------------------
% Proc: 	rgb2g
% Stack:
% Desc: 	converts rgb to gray using standard algorithm
%----------------------------------------------------------------------------
/rgb2g
{
 2 index .299 mul            	% r g b .299r
 2 index .587 mul add        	% r g b .299r+.587g
 1 index .114 mul add        	% r g b .299r+.587g+.144b
 4 1 roll                    	% gray r g b
 pop pop pop                 	% gray
} bd

%----------------------------------------------------------------------------
% WaldoColor might already be defined if this is an EPS file
%----------------------------------------------------------------------------
/WaldoColor_5 where
{
 pop
}
{
  %----------------------------------------------------------------------------
  % store pointers to actual color operators
  %----------------------------------------------------------------------------
  /CorelImage systemdict /image get def
  /CorelSetGray systemdict /setgray get def
  /CorelGetGray systemdict /currentgray get def
  /CorelSetTransfer systemdict /settransfer get def
  /CorelGetTransfer systemdict /currenttransfer get def

  /SetRgb /setrgbcolor ld
  /GetRgb /currentrgbcolor ld
  /SetGry /setgray ld
  /GetGry /currentgray ld
  /SetRgb2 systemdict /setrgbcolor get def
  /GetRgb2 systemdict /currentrgbcolor get def
  /SetHsb systemdict /sethsbcolor get def
  /GetHsb systemdict /currenthsbcolor get def

  %----------------------------------------------------------------------------
  % Proc: 	rgb2hsb
  % Stack:
  % Desc: 	converts rgb to hsb
  %----------------------------------------------------------------------------
  /rgb2hsb
  {
   SetRgb2
   GetHsb
  } bd

  %----------------------------------------------------------------------------
  % Proc: 	hsb2rgb
  % Stack:
  % Desc: 	converts hsb to rgb
  %----------------------------------------------------------------------------
  /hsb2rgb
  {                            	% h s b
   3 -1 roll                   	% s b h
   dup floor sub               	% s b H         			% ensure 0 < H < 1
   3 1 roll                    	% H s b
   SetHsb
   GetRgb2
  } bd

  %----------------------------------------------------------------------------
  % define the setcmykcolor operator if not already defined
  % if it is already defined, we want to store it away so that when we later
  % superclass this operator to our own in order to separate eps files, we can
  % access the existing call.  If it does not exist, it will be emulated with
  % the corresponding rgb calls.
  %----------------------------------------------------------------------------
  /setcmykcolor where
  {
    pop
    /LumSepsDict where              % check if Luminus TrapWise Separation dictionary is defined
    {
      pop
      /SetCmyk_5
      {
        LumSepsDict                 % get setcmykcolor from their dict and run it
        /setcmykcolor get exec
      } def
    }
    {
      /AldusSepsDict where
      {
        pop
        /SetCmyk_5
        {
          AldusSepsDict             % get setcmykcolor from their dict and run it
          /setcmykcolor get exec
        } def
      }
      {
        /SetCmyk_5 /setcmykcolor ld
      } ifelse
    } ifelse
  }
  {
	%----------------------------------------------------------------------------
	/setcmykcolor
	{
	create_cmyk_color /separate_set_color dexec
	/$ffpnt xd		% painting flag
	} bd

    /SetCmyk_5                      % cyan magenta yellow black setcmykcolor -
    {
      cmyk2rgb
      SetRgb
    } bd
  } ifelse

  %----------------------------------------------------------------------------
  /currentcmykcolor where
  {
   pop
   /GetCmyk
   /currentcmykcolor ld
  }
  {
   /GetCmyk
   {
    GetRgb
    rgb2cmyk
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % define the setoverprint operator if not already defined
  % NOTE: We do not want to redefine this operator if it is defined so that
  %       other apps can separate our EPS files.
  %----------------------------------------------------------------------------
  /setoverprint where
  {pop}
  {
   /setoverprint               	% boolean setoverprint
   {
    /CurrentOverprint xd
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % define the currentoverprint operator if not already defined
  % NOTE: We do not want to redefine this operator if it is defined so that
  %       other apps can separate our EPS files.
  %----------------------------------------------------------------------------
  /currentoverprint where
  {pop}
  {
   /currentoverprint           	% currentoverprint boolean
   {
		CurrentOverprint
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % proc : ColorImage
  %
  % Stack: width height #bits matrix dataaq1 ... dataaqN multi
  %        #colors ColorImage -
  %        where:
  %          dataaqI: Data aquisition function I ( we can have 1, 3 or 4 of them)
  %          multi  : Boolean, true means multi-stram image, false means single stram image
  %
  % Desc : Defines the ColorImage operator
  %				 if colorimage is define it uses the definition for our ColorImage,
  %        if not we will define our own.
  %
  %----------------------------------------------------------------------------
  /colorimage where
  {
   pop
   /ColorImage {colorimage} def	      % 8Dec94: rwm: this used to be /colorimage load def
                                      % it was changed to support colorimage separation
  }
  {
   /ColorImage
   {
     /ncolors xd			                % # of colors
     /$multi xd                       % multi-stream colorimage
     $multi true eq
     {                                % multi-stream colorimage, pop all the image data
       ncolors 3 eq
       {                              % RGB image
         /daqB xd
         /daqG xd
         /daqR xd
         pop pop exch pop abs         % pop the stack leave the # of lines
         {
           daqR pop                   % pop the Red line
           daqG pop                   % pop the Green line
           daqB pop                   % pop the Blue line
         } repeat
       }
       {                              % CMYK image
         /daqK xd
         /daqY xd
         /daqM xd
         /daqC xd
         pop pop exch pop abs         % pop the stack leave the # of lines
         {
           daqC pop                   % pop the Cyan line
           daqM pop                   % pop the Magenta line
           daqY pop                   % pop the Yellow line
           daqK pop                   % pop the Black line
         } repeat
       } ifelse
     }
     {                                % single-stream colroimage
       /dataaq xd
       {
         dataaq
         ncolors dup 3 eq
         {
           /$dat xd
           0 1 $dat length
           3 div 1 sub
           {
             dup 3 mul
             $dat 1 index get
             255 div
             $dat 2 index 1 add get
             255 div
             $dat 3 index 2 add get
             255 div
             rgb2g 255 mul
             cvi exch pop
             $dat 3 1 roll put
           } for
           $dat 0 $dat length 3
           idiv getinterval pop
         }
         {
           4 eq
           {
             /$dat xd
             0 1 $dat length
             4 div 1 sub
             {
               dup 4 mul
               $dat 1 index get
               255 div
               $dat 2 index 1 add get
               255 div
               $dat 3 index 2 add get
               255 div
               $dat 4 index 3 add get
               255 div
               cmyk2rgb rgb2g 255 mul
               cvi exch pop
               $dat 3 1 roll put
             } for
             $dat 0 $dat length
             ncolors idiv
             getinterval
           } if
         } ifelse
       }
       image
     } ifelse
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  /currentcmykcolor
  {
    GetCmyk
  } bd

  %----------------------------------------------------------------------------
  /sethsbcolor
  {
   hsb2rgb
   setrgbcolor
  } bd

  %----------------------------------------------------------------------------
  /currenthsbcolor
  {
   currentrgbcolor
   rgb2hsb
  } bd

  %----------------------------------------------------------------------------
  /setgray
  {
   dup dup
   setrgbcolor
  } bd

  %----------------------------------------------------------------------------
  /currentgray
  {
   currentrgbcolor             	% r g b
   rgb2g
  } bd

  %----------------------------------------------------------------------------
  % Proc:   InsideDCS
  % Desc:   defines the flag InsideDCS file to false, will be set just prior to
  %         outputing a DCS file and reset after that.
  %----------------------------------------------------------------------------
  /InsideDCS false def

  %----------------------------------------------------------------------------
  % Proc: 	IMAGE
  % Stack: 	- IMAGE -
  % Desc: 	load the defined image operater and redefine it into IMAGE
  %----------------------------------------------------------------------------
  /IMAGE /image ld

  %----------------------------------------------------------------------------
  % Proc:   image
  % Stack:  width height bits matrix datasrc image -
  %         dict image -
  % Desc: 	this proc redefine the systemdic image proc. It will either call
  %         the IMAGE if we do not need to do anything to the image, or it
  %         pop all the image data if the image need not to print.
  %----------------------------------------------------------------------------
  /image                            % Redefine image proc
  {
    InsideDCS                       % check if the image is inside a DCS file
    {
      IMAGE                         % play the image
    }
    {
    /EPSDict where                  % check if an EPS dictionary on the stack
    {                               % Inside EPS file
      pop                           % pop dictinary

      SeparationMode /Composite eq
      {                             % composite
        IMAGE                       % use the systemdict image call
      }
      {                             % separation
        dup type /dicttype eq       % check if there is a dictionary on the stack
        {                           % There is a dict, this must ba a LEVEL 2 or 3 IMAGE call,
          dup /ImageType get 1 ne
          {                         % level 3 image dictionary
            IMAGE                   % use the systemdict image call
          }
          {                         % Level 2 image dictionary
            dup dup
            /BitsPerComponent
            get 8 eq exch
            /BitsPerComponent
            get 1 eq or
            currentcolorspace 0 get
            DocGrayScaleSpace eq
            and
            {                       % It is a GrayScale or a Mono image
              SeparationPlateName
              (Black) eq
              {                     % Black plate
                IMAGE               % play the image, use the systemdict image call
              }
              {                     % Not a black plate
                dup /DataSource get
                /TCC xd             % get datasource proc from dictionary and save it
                /Height get abs     % get number of lines
                { TCC pop } repeat  % pop all the image lines
              } ifelse
            }
            {                       % It is not a gray scale image
              IMAGE                 % output the image
            } ifelse
          } ifelse
        }
        {                           % this is a LEVEL 1 IMAGE call
          2 index 1 ne              % get number of bits/sample
          {                         % 8 bits, gray image
            SeparationPlateName
            (Black) eq
            {                       % Black plate
              IMAGE                 % use the systemdict image call
            }
            {                       % Not a black plate
              /TCC xd               % save the datasource proc
              pop pop exch pop abs  % pop image parameters, leaving the number of lines only
              { TCC pop } repeat    % pop all the image lines
            } ifelse
          }
          {                         % 1 bit
            IMAGE                   % use the systemdict image call
          } ifelse
        } ifelse
      } ifelse
    }
    {                               % not in an EPS file
      IMAGE                         % use the systemdict image call
    } ifelse                        %
    } ifelse                        % InsideDCS
  } bd
} ifelse

%----------------------------------------------------------------------------
% Desc: 	sets the fill mode to EVEN_ODD mode.
%----------------------------------------------------------------------------
/$fm 0 def

%----------------------------------------------------------------------------
% Proc: 	wfill
% Stack: 	wfill
% Desc: 	sets the type of fill to use (fill or eofill)
%         depending on the fill mode (winding or even-odd).
%----------------------------------------------------------------------------
/wfill
{
 1 $fm eq					           	% fillmode
 {
  fill												% normal non-zero winding number rule
 }
 {
  eofill											% even-odd rule
 } ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	@Pf
% Stack: 	- @Pf -
% Desc: 	Postscript Fill
% 				Call user-defined Postscript fill with current parameters
% 				20dec90:MB: Print PS fill only in composite
%           or in black plane of color seps.
% NOTE: All PS fills expect the current UNIT to be MIL (1/1000 inch)
% and Bburx, .. need to be specified in that unit as well.
%----------------------------------------------------------------------------
/@Pf
{
 @sv
 SeparationMode /Composite eq	% Composite or...
 {
  true
 }
 {
  $Psc 0 ne or	 								% Color PS fill or..
  $ink_5 3 eq or
 }ifelse
 								% Black separation
 {                           	% PS fills can be printed
  0 J 0 j [] 0 d             	% reset stroke attributes (all PS fills set line width)
  FillOverprint safe_setoverprint
  FillColor /separate_set_color dexec pop
  $ctm setmatrix             	% reset matrix for PS-filling
  72 1000 div dup
  matrix scale               	% scaling matrix
  dup concat                 	% change current ctm
  dup Bburx exch Bbury exch
  itransform
  ceiling cvi /Bbury xd
  ceiling cvi /Bburx xd      	% change unit of BBox
  Bbllx exch Bblly exch
  itransform
  floor cvi /Bblly xd
  floor cvi /Bbllx xd
  $Prm aload pop             	% Bring the parameters on stack
  $Psn load exec             	% execute the ps fill as desired
 }
 {                           	% Not proper color plane, fill in white instead.
  1 SetGry wfill
 } ifelse
 @rs                         	% restore original state
 @np                         	% and clear the path
} bd

%----------------------------------------------------------------------------
% Proc: 	F
% Stack: 	- F -
% Desc: 	fill path
%----------------------------------------------------------------------------
/F
{
	matrix currentmatrix        					% save current transfo matrix on stack
	$sdf
	{
	$scf $sca $scp @ss
	} if                        					% alternate halftone screen?

	FillOverprint safe_setoverprint

	$fil 1 eq

	{CorelPtrnDoFill}            					% pattern fill
	{
		$fil 2 eq                  					% fountain fill?
		{gradient_fill}                      					% fountain fill path
		{
			$fil 3 eq                 				% Postscript fill?
			{@Pf}                     				% PS fill
			{
				get_simulate_devicen FillColor /ColorModel get /DeviceN eq and
				{
					% simulate DeviceN color on Level 2
					% oveprint N objects with individual DeviceN inks
        	0 1 FillColor /num get 1 sub		% iterate through all DeviceN plates
        	{
          		dup 0 gt											% if not the first plate, overprint it
          		{
            			true safe_setoverprint
          		}if

          		FillColor /get_ink_as_spot dexec	% get DeviceN i-th ink as spot color

          		/set_color	dexec									%	set DeviceN i-th ink as current color

          		@gs
          		wfill															% paint the fill
          		@gr

        	} for
      	}
      	{
        	FillColor /separate_set_color dexec
        	{wfill}
        	{@np} ifelse
      	} ifelse
   } ifelse
  } ifelse
 } ifelse
 $sdf
 {
  $dsf $dsa $dsp @ss
 } if                        				% reset default halftone screen
 setmatrix                   				% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	f
% Stack: 	- f -
% Desc: 	closepath fill
%----------------------------------------------------------------------------
/f
{
 @cp F
} bd


%----------------------------------------------------------------------------
% Proc: 	S
% Stack: 	- S -
% Desc: 	stroke
%----------------------------------------------------------------------------
/S
{
  matrix currentmatrix        	% save current transfo matrix on stack
  $ctm setmatrix              	% reset normal ctm
  $SDF {$SCF $SCA $SCP @ss}if 	% alternate halftone screen?

  OutlineOverprint safe_setoverprint

  get_simulate_devicen OutlineColor /ColorModel get /DeviceN eq and
	{
		% simulate DeviceN color on Level 2
		% oveprint N objects with individual DeviceN inks

    0 1 OutlineColor /num get 1 sub		% iterate through all DeviceN plates
    {
      dup 0 gt												% if not the first plate, overprint it
      {
        true safe_setoverprint
      }if

      OutlineColor /get_ink_as_spot dexec	% get DeviceN i-th ink as spot color

      /set_color	dexec										%	set DeviceN i-th ink as current color

			matrix currentmatrix
			$ptm concat													% set the pen matrix
			@gs
			stroke
			@gr
			setmatrix														% reset the original matrix(from stack)

    } for
  }
  {
    OutlineColor /separate_set_color dexec
    {
      matrix currentmatrix
      $ptm concat              	% set the pen matrix
      stroke
      setmatrix                	% reset the original matrix(from stack)
    }
    {@np}ifelse
  } ifelse

 $SDF {$dsf $dsa $dsp @ss}if		% reset default halftone screen
 setmatrix                   		% reset original matrix set on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	s
% Stack: 	- s -
% Desc: 	closepath stroke
%----------------------------------------------------------------------------
/s
{
 @cp
 S
} bd

%----------------------------------------------------------------------------
% Proc: 	B
% Stack: 	- B -
% Desc: 	fill, then stroke
%----------------------------------------------------------------------------
/B
{
 @gs F @gr                   	% fill, then
 S                           	% stroke
} bd

%----------------------------------------------------------------------------
% Proc: 	b
% Stack: 	- b -
% Desc: 	closepath, fill, stroke
%----------------------------------------------------------------------------
/b
{
 @cp B
} bd

%----------------------------------------------------------------------------
% Proc: 	E
% Stack: 	name llx lly urx ury description E -
% Desc:		define pattern
% 				a pattern will be defined as an array of 5 entries:
% 				(0)llx (1)lly (2)urx (3)ury (4)descrition
% 				the description is also an array of executable strings
%----------------------------------------------------------------------------
/_E
{
 5 array astore    						% parms are in an array
 exch cvlit xd			      		% defined with key equal to the name(string)
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc
% Stack: 	- @cc string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc
{
 currentfile $dat readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@sm
% Stack: 	- @sm -
% Desc: 	save current transfo matrix into global $ctm
%----------------------------------------------------------------------------
/@sm
{
 /$ctm $ctm currentmatrix def
} bd

%----------------------------------------------------------------------------
% Proc: 	@E
% Stack: 	bbllx bblly bburx bbury matrix @E -
% Desc: 	Define Object's bbox
% 				Must be called before painting if PATTERNS, PSFILLS, or
% 				FOUNTAINS are used
%----------------------------------------------------------------------------
/@E
{
  /Bbury xd /Bburx xd      		% upper rt. of object's bbox in absolute space
 /Bblly xd /Bbllx xd      		% lower lt. of object's bbox in absolute space
} bd

%----------------------------------------------------------------------------
% Proc: 	@c
% Stack:
% Desc: 	Close sub Path
%					Must be called during the path description
%----------------------------------------------------------------------------
/@c
{
 @cp
} bd

%----------------------------------------------------------------------------
% Proc: 	@P
% Stack: 	parm1 .. parmn n nColor fillname @P -
% Desc: 	PostScript fill
%----------------------------------------------------------------------------
/@P
{       											% COREL Postscript fill # of parms can vary
 /$fil 3 def        					% set global for filling
 /$Psn xd     								% PS-fill name
 /$Psc xd											% 0 - black only, 1 - color
 array astore      						% build array for PS-fill parms
 /$Prm xd     								% parms in Prm
} bd

%----------------------------------------------------------------------------
% Proc: 	tcc
% Stack: 	- tcc -
% Desc:
%----------------------------------------------------------------------------
/tcc {@cc} def 								% no bind def because @cc redefn'

%----------------------------------------------------------------------------
% Proc:		@B
% Stack: 	- @B
% Desc: 	stroke, then fill
%----------------------------------------------------------------------------
/@B
{
 @gs S   @gr         					% stroke
 F              							% fill
} bd

%----------------------------------------------------------------------------
% Proc:		@b
% Stack: 	- @b -
% Desc: 	closepath, stroke & fill path
%----------------------------------------------------------------------------
/@b
{
 @cp @B
} bd

%----------------------------------------------------------------------------
% Proc:		init_separation
% Stack: 	--> init_separation -->
% Desc: 	initialize global color separation parameters
%
%       	SeparationMode defines the current mode for color separation :
%						/Composite - no color separation
%           /OnHost - colors are separated in the application ( on host )
%           /InRip - colors are separated in the RIP
%
%       	SeparationPlateName - string defining the current color plane being
%  					printed.  The possible values are (case sensitive, not to be
%						translated); /Cyan, /Magenta, /Yellow, /Black or any spot color
%						defined in the document; e.g. (Pantone 345)
%
%					SeparationPlateIndex - index of separation plate, -1 - not defined,
%					0 - Cyan,	1 - Magenta, 2 - Yellow, 3 - Black, 4 - any spot
%
%----------------------------------------------------------------------------
/init_separation
{
	% inherit separation parameters from parent document if embedded as EPS
	/SeparationMode where
	{
		pop
	}
	{
		/SeparationMode /Composite def
	} ifelse


	/SeparationPlateName where
	{
		pop
	}
	{
		/SeparationPlateName null def
	} ifelse

	/SeparateInColor where
	{
		pop
	}
	{
		/SeparateInColor false def
	} ifelse

	SeparationMode /Composite eq
	{
		/SeparationPlateIndex -1 def
	}
	{
		/SeparationPlateIndex 4 def
	} ifelse

	/CmykPlates [ /Cyan /Magenta /Yellow /Black ] def

	0 1 3
	{
		dup
		CmykPlates exch get SeparationPlateName eq
		{
			/SeparationPlateIndex xd
			exit
		} if
		pop
	} for

	% init legacy separation parameters used for separation of pre-X5
	% generated embedded EPS documents

	/CurrentInkName_5 SeparationPlateName def

	/$ink_5 SeparationPlateIndex def

	SeparationMode /OnHost eq
	{
		/SepMode_5 2 def
	}
	{
		/SepMode_5 0 def
	} ifelse

	/SepsColor SeparateInColor def	
} bd

%----------------------------------------------------------------------------
% Proc:		init_separation_from_legacy
% Stack: 	- init_separation_from_legacy -
% Desc: 	inits separation from legacy pre-X5 separation parameters
%----------------------------------------------------------------------------
/init_separation_from_legacy
{
	EpsFile
	{
		/SepMode_5 where
		{
			pop
			SepMode_5 2 eq
			{
				/SeparationMode /OnHost def
			}
			{

				/SeparationMode /Composite def
			}
			ifelse
		} if
		
		/CurrentInkName_5 where
		{
			pop
			/SeparationPlateName CurrentInkName_5 def
		} if
		
		/$ink_5 where
		{	pop
			/SeparationPlateIndex $ink_5 def
		} if
		
		/SepsColor where
		{
			pop
			/SeparateInColor SepsColor def
		} if
	} if
} bd

init_separation_from_legacy

%----------------------------------------------------------------------------
% Proc:		@whi
% Stack: 	- @whi -
% Desc: 	Fill Page white
%----------------------------------------------------------------------------
/@whi
{
 @gs
 -72000 dup m
 -72000 72000 l
 72000 dup l
 72000 -72000 l
 @cp 1 SetGry fill
 @gr
} bd

%----------------------------------------------------------------------------
% Proc:		@neg
% Stack: 	- @neg -
% Desc: 	MAKE ALL COLORS NEGATIVE
% 				Only set the GRAY scale transfer function since WALDO only
% 				uses negative for color separations.
%----------------------------------------------------------------------------
/@neg
{  [{1 exch sub} /exec cvx currenttransfer /exec cvx] cvx settransfer
 @whi          								% fill page in white (Will be turned into white)
} bd

%----------------------------------------------------------------------------
% ------------------------- AX system --------------------------------------
%----------------------------------------------------------------------------
/deflevel 0 def								% global

%----------------------------------------------------------------------------
% Proc:		@sax
% Stack: 	- @sax -
% Desc: 	start an excution array
% NOTE:		an array should be started IMMEDITAELY AFTER @sax
%         each @sax requires a following @eax
%----------------------------------------------------------------------------
/@sax
{
  /deflevel deflevel 1 add def
} bd

%----------------------------------------------------------------------------
% Proc:		@eax
% Stack: 	[ex array] @eax -
%         or
%         [ ... [ex array] @eax [ ... [ex array] {ex array code}
% Desc: 	end and possibly execute an execution array
%         This will either load array execution code or execute the
%         array depending on the level (as set by @sax).
%         EACH @eax needs a preceding @sax
%----------------------------------------------------------------------------
/@eax
{
 % decrement deflevel but NEVER below 0.
 /deflevel deflevel dup 0 gt {1 sub} if def
 deflevel 0 gt
 {
  /eax load       						% push eax code onto stack for later execution
 }
 {
  eax       									% execute the array on the stack NOW
 }
 ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		eax
% Stack: 	[ex array] eax -
% Desc: 	execute an execution array
% NOTE:		This should only be called by @eax. DO NOT DIRECTLY
%         CALL THIS ROUTINE!
%----------------------------------------------------------------------------
/eax
{
 {exec} forall
} bd

%----------------------------------------------------------------------------
% Proc:		@rax
% Stack:
% Desc:
%----------------------------------------------------------------------------
/@rax
{
 deflevel 0 eq
 {
  @rs @sv
 }
 if
} bd

%----------------------------------------------------------------------------
% Proc:		pdfmark
% Stack: 	[ .... pdfmark
% Desc:
%----------------------------------------------------------------------------
systemdict /pdfmark known not
{
 /pdfmark /cleartomark ld
} if

%----------------------------------------------------------------------------
% Proc: 	wclip
% Stack: 	- wclip -
% Desc: 	sets the type of clipping to use (clip or eoclip)
%         depending on the clipping mode (winding or even-odd).
%----------------------------------------------------------------------------
/wclip
{
 1 $fm eq						% fillmode
 {
  clip							% normal non-zero winding number rule
 }
 {
  eoclip						% even-odd rule
 } ifelse
} bd
%----------------------------------------------------------------------------
% Text support
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Proc: 	z
% Stack: 	fontname size z -
% Desc: 	sets current font, ptsize
%----------------------------------------------------------------------------
/z
{
 exch findfont exch scalefont
 setfont     									% set the current font
} bd

%----------------------------------------------------------------------------
% Proc: 	ZB
% Stack: 	fontname default_metrics_entry FontBBox FontMatrix ZB
% Desc: 	define raster font
%----------------------------------------------------------------------------
/ZB
{
 9 dict												%: fontname default_metrics_entry FontBBox
 															%...	FontMatrix fontdict
 dup begin
 4 1 roll											%: fontname fontdict default_metrics_entry
 															%...	FontBBox FontMatrix
 /FontType 3 def
 /FontMatrix xd
 /FontBBox xd
 															%: fontname fontdict default_metrics_entry
 /Encoding 256 array def
 0 1 255
 {
  Encoding exch /.notdef put
 } for
 /CharStrings 256 dict def
 CharStrings /.notdef {} put

 /Metrics 256 dict def				%: fontname fontdict default_metrics_entry

 Metrics /.notdef 3 -1 roll put
 															% stack: fontname fontdict
 /BuildChar
 {  													% stack: font char
  exch												% stack: char font
  dup /$char exch /Encoding get 3 index get def    % Get character name.
  														% stack: char font

  % Get origin of next char relative to current char and bounding box
  % for current char and call setcachedevice.

  dup /Metrics get $char get aload pop setcachedevice

  begin
  Encoding exch get CharStrings exch get
  end
  exec
 } def
 end													% stack: fontname fontdict

 definefont pop
} bd

%----------------------------------------------------------------------------
% Proc: 	ZBAddChar
% Stack: 	metrics_entry char_proc char_code char_name fontname ZBAddChar
% Desc:
%----------------------------------------------------------------------------
/ZBAddChar
{
 findfont begin								%: metrics_entry char_proc char_code char_name
 dup 4 1 roll dup 6 1 roll		%: char_name metrics_entry char_name char_proc char_code char_name
 Encoding 3 1 roll put				%: char_name metrics_entry char_name char_proc
 CharStrings 3 1 roll put			%: char_name metrics_entry
 Metrics 3 1 roll put
 end
} bd

%----------------------------------------------------------------------------
% Proc: 	Z
% Stack: 	width-array encode-array newfontname fontname Z -
% Desc: 	re-encode font
%----------------------------------------------------------------------------
/Z
{
 findfont											% get font dictionary on stack
 dup maxlength 2 add dict exch % get its size  & create new font dictionary
															%: width-array encode-array newfontname
															%...	new-dict old-dict
 dup													% copy entries from old dict to the new dict
 {
  1 index /FID ne    					% avoid copying the FID key
  {
   3 index    								%: ... newdict olddict key value newdict
   3 1 roll put    						% store entry in dict
  }
  {
   pop pop
  } ifelse
 } forall   									% for all entries in the old dict

 % Now, get the new encoding array into the new dictionary
 % stack: width-array encode-array  newfontname new-dict old-dict

 pop          								% don't need old dict anymore
 dup dup /Encoding get				%: width-array encode-array newfontname
 															%...	newdict newdict Encoding
 256 array copy     					% get a copy of original encoding array (to modify)
 dup /$fe xd          				% prepare a pointer to the dest Encoding array
 /Encoding exch put       		% store copy of original in encoding vect
															%: width-array encode-array  newfontname
															%...	new-dict
 dup /Fontname 3 index put    % store it's own new name in that font
															%: width-array encode-array  newfontname
															%...	new-dict
 															% store the new encoding array into the copy
 3 -1 roll        						%: width-array newname newdict encode-array
 dup length 0 ne
 {
  0 exch
  {       										% initialize counter
   dup type 0 type eq      		% check for numbers
   {
    exch pop   								% throw the old number away
   }
   {            							% else, must be a char name
    $fe exch 2 index exch					% newencodingvect index newencodingvalue
	
	0 1 $fe length	1 sub					% before putting new encoding value, make sure there is no duplicate entry already in encoding vector, if there is - assign /.notdef to it
	{
		/encodingIndex xd					% save current iteration index
		dup $fe encodingIndex get eq		% newencodingvalue oldencodingvalue eq
		{
			$fe encodingIndex /.notdef put	% overwrite oldencodingvalue with /.def
		}if
	} for	
	
	put										% $fe indexnewencodingvalue put : puts new encoding value at the index 
    1 add       							% get ready for next
   } ifelse
  } forall
  pop        									% remove counter
 } if													%: width-array newname newfontdict

 dup 256 dict									%: width-array newname newfontdict newfontdict
 															%...	metricsdict
 dup /$met xd       					% prepare a pointer to the dest Metrics dict
 /Metrics exch put						%stack: width-array newname newfontdict

 % Character widths in width-array are for a 1000 unit character coordinate
 % system.  If this is not the coordinate system used for this font, the
 % character widths have to be scaled appropriately.  This scale factor
 % is being calculated here.

 dup /FontMatrix get
 0 get
 1000 mul
 1 exch div

 %stack: width-array newname newfontdict scale-factor
 % Add character widths in width-array to the font if width-array contains
 % 256 entries.

 3 index length 256 eq
 {
  0 1 255
  {														%: width-array newname newfontdict
															%...	scale-factor index
   dup $fe exch get						%: width-array newname newfontdict
	 														%... scale-factor index char
   dup /.notdef eq
   {
    pop pop
   }
   {												  %: width-array newname newfontdict
	 														%...	scale-factor index char
    5 index
    3 -1 roll get							%: width-array newname newfontdict
															%...	scale-factor char char-width
    2 index mul
    $met 3 1 roll put
   } ifelse
  } for
 } if

 pop													%: width-array newname newfontdict
 definefont pop   						% then, record that new font in the font list
															%: width-array
 pop
} bd

%----------------------------------------------------------------------------
% Proc: 	CorelIsValidCharpath
% Stack: 	@ftx bool
% Desc: 	checks current path if it has points or is bogus. Used mainly to
%				weed out space characters which only have a moveto in their path.
%			NOTE : can't just check if width or height = 0, even with 1 moveto as the
%			current path, interpreters will return a box with width and/or height
%----------------------------------------------------------------------------
/CorelIsValidCharpath
{
  pathbbox
  3 -1 roll

  sub abs 0.5 ge				% see if we have a width
  3 1 roll
  sub abs 0.5 ge				% see if we have a height
  and
} bd

%----------------------------------------------------------------------------
% Proc: 	@ftx
% Stack: 	string @ftx -
% Desc: 	fill text with pattern or fountain
%----------------------------------------------------------------------------
/@ftx
{
 {        												% loop for each character in the string
  currentpoint 3 -1 roll					%
  (0) dup 3 -1 roll 0 exch put		% convert integer into a string
  dup
  @gs
  true charpath        						% get character outline in path
  $ctm setmatrix       						% set matrix for pattern filling
  CorelIsValidCharpath						% check if we have a valid charpath
  {@@txt} if             					% pattern fill or fountain
  @gr
  @np
  % set current point for next character
  stringwidth pop 3 -1 roll add exch m
 } forall
} bd

%----------------------------------------------------------------------------
% Proc: 	@ft
% Stack: 	string @ft -
% Desc: 	fill current text object
%----------------------------------------------------------------------------
/@ft
{
 matrix currentmatrix exch    % save current transfo matrix on stack
 $sdf {$scf $sca $scp @ss} if % alternate halftone screen?
 $fil 1 eq               			% pattern fill?
 {/@@txt /@pf ld @ftx}    		% pattern fill on text
 {
  $fil 2 eq              			% fountain fill?
  {/@@txt /gradient_fill ld @ftx} 	% fountain fill on text
  {
   $fil 3 eq             			% Postscript fill?
   {/@@txt /@Pf ld @ftx}   		% PS fill on text
   {
	$fil 4 eq
    {/@@txt /output_shading_gradient ld @ftx} % Level3 shaded fill on text
	{
    FillOverprint safe_setoverprint
		FillColor /separate_set_color dexec				% separate and set fill color, returns TRUE if we fill, FALSE if not
    {show}               			% show text
    {pop} ifelse
	} ifelse
   } ifelse
  } ifelse
 } ifelse
 $sdf {$dsf $dsa $dsp @ss} if % reset default halftone screen
 setmatrix                 		% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	@st
% Stack: 	string @st -
% Desc: 	stroke current text object
%----------------------------------------------------------------------------
/@st
{
 matrix currentmatrix exch				% save current transfo matrix on stack
 $SDF {$SCF $SCA $SCP @ss} if			% alternate halftone screen?
 OutlineOverprint safe_setoverprint
 OutlineColor /separate_set_color	dexec		% separate and set current stroke color, returns TRUE if we paint, FALSE if not
 {
  {        												% loop for each character in the string
   currentpoint 3 -1 roll
   (0) dup 3 -1 roll 0 exch put		% convert integer into a string
   dup
   @gs
   true charpath          				% get character outline in path
   $ctm setmatrix $ptm concat			% set matrix for stroking
   stroke             						% stroke it
   @gr
   @np

   % set current point for next character
   stringwidth pop 3 -1 roll add exch m
  } forall
 }
 {pop} ifelse     % @scc_5
 $SDF {$dsf $dsa $dsp @ss} if % reset default halftone screen
 setmatrix              			% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	@te
% Stack: 	string @te -
% Desc: 	prints text as filled only
%----------------------------------------------------------------------------
/@te
{
 @ft          								% fill that text
} bd

%----------------------------------------------------------------------------
% Proc: 	@tr
% Stack: 	string @tr -
% Desc: 	prints text as stroked only
%----------------------------------------------------------------------------
/@tr     											% prints text as stroked only
{
 @st          								% stroke that text
} bd

%----------------------------------------------------------------------------
% Proc: 	@ta
% Stack: 	string @ta -
% Desc: 	prints text as filled & stroked
%----------------------------------------------------------------------------
/@ta
{
 dup
 @gs @ft @gr        					% fill the text
 @st          								% then stroke text
} bd

%----------------------------------------------------------------------------
% Proc: 	@t@a
% Stack: 	string @t@a -
% Desc: 	prints text as stroked & filled
%----------------------------------------------------------------------------
/@t@a
{
 dup
 @gs @st @gr        					% stroke the text
 @ft          								% then fill text
} bd

%----------------------------------------------------------------------------
% Proc: 	@tm
% Stack: 	matrix @tm -
% Desc: 	set text matrix
%----------------------------------------------------------------------------
/@tm
{
 @sm        									% save current matrix
 concat
} bd

%----------------------------------------------------------------------------
% Proc: 	e
% Stack: 	- e -
% Desc: 	filled tex
%----------------------------------------------------------------------------
/e
{
 /t {@te} def      						% define operator t as @te
} bd

%----------------------------------------------------------------------------
% Proc: 	r
% Stack: 	- r -
% Desc: 	stroked text
%----------------------------------------------------------------------------
/r
{
 /t {@tr} def      						% define operator t as @tr
} bd

%----------------------------------------------------------------------------
% Proc: 	o
% Stack: 	- o -
% Desc: 	invisible text
%----------------------------------------------------------------------------
/o
{
 /t {pop} def      						% define operator t as nothing
} bd

%----------------------------------------------------------------------------
% Proc: 	a
% Stack: 	- a -
% Desc: 	fill&stroke text
%----------------------------------------------------------------------------
/a
{
 /t {@ta} def      						% define operator t as @ta
} bd


%----------------------------------------------------------------------------
% Proc: 	@a
% Stack: 	- @a -
% Desc: 	stroke&fill text
%----------------------------------------------------------------------------
/@a
{
 /t {@t@a} def     						% define operator t as @t@a
} bd

%----------------------------------------------------------------------------
% Proc:		t
% Stack: 	string t -
% Desc: 	text body
%----------------------------------------------------------------------------
/t {@te} def      						% default value: will be redefined by a,e,o,r, and I

%----------------------------------------------------------------------------
% Proc:		T
% Stack: 	- T -
% Desc: 	end text (restore)
%----------------------------------------------------------------------------
/T
{
 @np            							% Clear path.
 $ctm setmatrix   						% Reset current matrix.
 /$ttm matrix def 						% Reset extended text matrix.
} bd

%----------------------------------------------------------------------------
% Proc:		ddt
% Stack:
% Desc:
%----------------------------------------------------------------------------
/ddt
{
 t
} def   											% NO "bind def" because of t (can be modified)

%----------------------------------------------------------------------------
% Proc:		@t
% Stack: 	xpos ypos string  @t -
% Desc: 	paints a 1-character string at desired position
%----------------------------------------------------------------------------
/@t       										% paints a 1-character string at desired position
{
 /$stm $stm currentmatrix def % save current matrix
 3 1 roll           					% send string to bottom
 m                  					% move to character position
 $ttm concat              		% add text matrix
 ddt                    			% draw the character (current t operator)
 $stm setmatrix         			% restore saved matrix
} bd

%----------------------------------------------------------------------------
% Proc:		@n
% Stack: 	angle @n -
% Desc: 	paints a 1-character string at desired position
%----------------------------------------------------------------------------
/@n
{
 /$ttm exch matrix rotate def % modify current text matrix accordingly
} bd

%----------------------------------------------------------------------------
% Proc:		@s
% Stack: 	- @s -
% Desc: 	Mark a space
%----------------------------------------------------------------------------
/@s {} bd											% mark a space character in extended text

%----------------------------------------------------------------------------
% Proc:		@l
% Stack: 	- @l -
% Desc: 	Mark an end of line
%----------------------------------------------------------------------------
/@l {} bd        							% mark an end of line in extended text

%----------------------------------------------------------------------------
% Initalizations for CJK fonts
%----------------------------------------------------------------------------
/_lineorientation 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bitkey null def
/_bithibyte 0 def
%----------------------------------------------------------------------------
% Raster images support
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Proc: 	set_image_clipping
% Stack: 	cropllx croplly cropurx cropury matrix --> set_image_clipping -->
% Desc: 	set clipping path for image
%----------------------------------------------------------------------------
/set_image_clipping
{
 concat      									% integrate transfo right away
 3 index 3 index m        		% set clipping path(cropping rect)
 3 index 1 index l
 2 copy l
 1 index 3 index l
 3 index 3 index l
 clip         								% this is the clipping path
 pop pop pop pop							% pop cropping rect
} bd

%----------------------------------------------------------------------------
% Proc: 	set_image_parameters
% Stack: 	pxlwid pxlhei bits llx lly urx ury background foreground
%         		 ---> set_image_parameters -->
% Desc: 	sets image parameters from stack
%----------------------------------------------------------------------------
/set_image_parameters
{
	/$frg xd /$bkg xd						% foreground/background flags
	/$ury xd /$urx xd
	/$lly xd /$llx xd          	% bitmap rectangle
	/$ncl xd           					% # of color components
	/$bts xd           					% # of bits per color component
	/$hei xd /$wid xd           % pixel size
} bd

%----------------------------------------------------------------------------
% Proc:		output_image
%
% Stack: 	pxlwid pxlhei bits bitplanes
%         		llx lly urx ury backgroundflag foregroundflag
%         		cropllx croplly cropurx cropury matrix
%        		dataproc --> output_image -->
%
% Desc: 	output bitmap image
%
% Parms:  pxlwid pxlhei 	size of bitmap in pixels
%         bits 				# of bits per sample
%         bitplanes  		# of color planes
%         llx lly urx ury 	total size of bitmap(before transfos)
%         backgroundflag
%						1: fill background with current fill,
%           0: transparent background (only for monochrome/grayscale bitmaps)
%         foregroundflag :
%						1: mask background with current stroke,
%           0: transparent background (only for monochrome/grayscale bitmaps)
%         cropllx croplly cropurx cropury: cropping rect (before transfos)
%         matrix 			 additional transfo matrix for stretching/rotating, etc..
%         dataproc :		data acquisition procedure
%
%       	Note:  pxlhei < 0 prints bitmap UPSIDE down
%
%----------------------------------------------------------------------------
/output_image
{
 /@cc xd											% store data aquisition procedure

	@sm @gs     								% save current ctm and graphics state
	set_image_clipping          % set CTM and clipping

	set_image_parameters				% store image parameters from stack

	SeparationMode /OnHost eq EpsFile and
	{
		separate_output_image
	}
	{
		output_composite_image
	} ifelse

	@gr $ctm setmatrix          % Restore graphics state & org matrix
} bd

%----------------------------------------------------------------------------
% Proc:		output_composite_image
% Stack: 	--> output_composite_image -->
% Desc: 		output bitmap image in composite mode
%----------------------------------------------------------------------------
/output_composite_image
{
	DocPsLevel 3 eq							% Using Level 3
	MaskedImage true eq	and
	{
		output_masked_image   		% call level 3 masked images code
	}
	{
	 $bts 1 gt              		% grayscale or color?
	 DocPsLevel 2 eq						% and using level 2 or 3?
	 DocPsLevel 3 eq or
	 and
	 {
		DevicenImage							% check if DeviceN image
		{
			output_devicen_image   	% output DeviceN image to Level2 and 3
		}
		{
			output_color_image			% call level 2 color bitmap code
		}ifelse
	 }
	 {													% level 1 or monochrome?
		$bts 1 eq    							% check for 1 bitplane (monochrome)
		{
		 output_monochrome_image
		}
		{
		 output_color_image_level1	% call level 1 bitmap code
		} ifelse
	 } ifelse
  } ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_image
% Stack: 	--> separate_output_image -->
% Desc: 		separates image according to global separation parameters then outputs it
%----------------------------------------------------------------------------
/separate_output_image
{
	@gs
	$bts 1 gt
	{
		separate_output_color_image
	}
	{
		separate_output_monochrome_image
	} ifelse
	@gr

	not	% if not separated to current plate, check if we need to knock image out
	{
		currentoverprint not
		{
			% knock out image by painting white rectangle
			1.0 SetGry
			wfill
		} if
	} if

	@np
} bd

%----------------------------------------------------------------------------
% Stack: 	file --> set_decode_filter --> file
% Params:	file - current file object with installed filter chain on top
% Desc: 	installs image data decode filter on top of filter chain
%----------------------------------------------------------------------------
/set_decode_filter
{
	ImageCompression /JPEG eq				% JPEG compression
	{
		/DCTDecode filter
	}
	{
		ImageCompression /RLE eq			% RunLengthDecode filter
		{
			/RunLengthDecode filter
		}
		{
			ImageCompression /LZW eq		% LZWDecode filter
			{
				/LZWDecode filter
			}if
		} ifelse
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	create_datasource
% Stack: 	--> create_datasource --> file
%	Params:	file - current file object with installed filter chain on top
% Desc: 	creates image datasource as current file with edecoding filters chain
%----------------------------------------------------------------------------
/create_datasource
{
	currentfile
	
	DevicenImage not get_ps_level 2 gt or
	{	/ASCII85Decode filter
	}if

	set_decode_filter
} bd

%----------------------------------------------------------------------------
% Proc: 		set_image_strip_parameters
% Stack: 	numPlanes stripRows --> set_image_strip_parameters  -->
% Params:	numPlanes - number of planes to output image strip to
%				stripRows - number of image rows in single strip
% Desc: 		sets parameters for outputing image strip
%----------------------------------------------------------------------------
/set_image_strip_parameters
{
	/stripRows xd
	/numPlanes xd

	/stripBuffer										% buffer for strip data
		$wid $bts
		mul $ncl mul
		stripRows mul
		8 div
		ceiling cvi
		dup 65535 gt
		{
			pop $ncl $bts mul 
		}if
		string

	def

	DevicenImage
	{
		/readstrip
		{
			DataSource stripBuffer readhexstring pop
		} bd
	}
	{
		/readstrip
		{
			DataSource stripBuffer readstring pop
		} bd
	}ifelse

	/stripHeight																% height of image strip
		$lly $ury sub stripRows mul $hei div
	def

	/stripOutBuffer															% buffer for strip data converted for output
		$wid stripRows mul numPlanes mul 65535 min string
	def

	/strip_img_dict 8 dict def
	strip_img_dict begin
		/ImageType 1 def													% image type - there's only 1
		/Width $wid def														% source width
 		/Height stripRows def         						% source height
		/BitsPerComponent $bts def 								% bits per sample
 		/Decode
			[numPlanes {0 1} repeat] def						% decode output strip data
		/ImageMatrix 															% map unit square to source
			[ $wid 0 0 stripRows neg 0
				$hei 0 gt	{stripRows}{0}	ifelse			% matrix( upside down if $hei is negative )
			]
		def
 		/DataSource stripOutBuffer def						%	data source decode the entire bitmap
	end
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_color_image
% Stack: 	--> separate_output_color_image --> separated
%				separated - true if image has been separated to current plate
% Desc: 		separates color or grayscale image according to global
%				separation parameters and then outputs it
%----------------------------------------------------------------------------
/separate_output_color_image
{
	/plateContent false def
	$ncl 1 eq
	{
		% grayscale image, separate to Black plate
		SeparationPlateName /Black eq
		{
			% output monochrome image to Black plate
			output_color_image
			/plateContent true def
		} if
	}
	{
		% separate DeviceN, CMYK or RGB image
		@np          									% no path but clipping

		/DataSource create_datasource def

		SeparateInColor
		{
			DocCmykSpace setcolorspace 			% CMYK colorspace for painting separation plates in color
			/numPlanes 4 def
		}
		{
			DocGrayScaleSpace setcolorspace % grayscale for default painting separation plates in black
			/numPlanes 1 def
		} ifelse

		% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
		/stripRows 65535 $wid $bts mul $ncl numPlanes max mul 8 div div floor cvi 1 max def

		numPlanes stripRows set_image_strip_parameters

		/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

		0 1 maxStripIndex 					% iterate through strips
		{
			/stripIndex exch def			% save buffer index

			/$t_ury										% calculate rectangle for strip image
				$ury stripHeight stripIndex mul add ceiling cvi
			def

			/$t_lly											% calculate rectangle for strip image
				$t_ury stripHeight add ceiling cvi
			def

			stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
			{
				numPlanes $hei maxStripIndex stripRows mul sub set_image_strip_parameters

				/$t_lly										% adjust strip image rectangle
					$t_ury stripHeight add ceiling cvi
				def
			} if

			readstrip pop								% read image data from the file

			@gs

			% separate color for each image pixel
			0 1 $wid stripRows mul 1 sub
			{
				/pixelIndex xd

				stripBuffer pixelIndex $ncl mul $ncl getinterval			% get color values array for single pixel from image strip

				{ 255 div } forall																		% image colors are 0..255 encoded, convert to 0.0..1.0

				% convert pixel color
				DevicenImage
				{
						ImageDevicenSpace create_devicen_color
				}
				{
					$ncl 3 eq
					{
						create_rgb_color
					}
					{
						create_cmyk_color
					} ifelse
				} ifelse

				/separate_color dexec

				{	% check if color has been separated to the current plate
					/plateContent true def
					% extract color values from colorspec
					begin
						color aload pop
					end
				}
				{
					pop numPlanes [ numPlanes 1 eq {1}{0}ifelse ] cvx repeat
				} ifelse


				numPlanes array astore																% pack alt colors value into array

				/pixelSepIndex pixelIndex numPlanes mul def

				/posColorant 0 def
				{
				 stripOutBuffer pixelSepIndex posColorant add 3 -1 roll 255 mul cvi put
				 /posColorant posColorant 1 add def										% put alt color values into separated strip buffer
				} forall
			} for

			$llx $t_lly Tl								% translate gstate origin
			$urx $llx sub
			$t_ury $t_lly sub scale				% set current scale for bitmap size

			strip_img_dict								% scanline image dictionary
			image													% draw image

			@gr
		}for

	  $SDF {$dsf $dsa $dsp @ss}if  		% reset default halftone screen
	} ifelse

	plateContent											% leave separation flag on stack
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_monochrome_image
% Stack: 	--> separate_output_monochrome_image --> separated
%				separated - true if image has been separated to current plate
% Desc: 		separates monochrome image according to global
%				separation parameters and then outputs it
%----------------------------------------------------------------------------
/separate_output_monochrome_image
{
	SeparationPlateName /Black eq
	{
		% output monochrome image to Black plate
		output_monochrome_image true
	}
	{
		false
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	output_monochrome_image
% Stack:  --> output_monochrome_image -->
% Desc: 	Outputs Grayscale/Mono bitmap
%----------------------------------------------------------------------------
/output_monochrome_image
{
	$frg 1 eq                 			% Check if foreground flag is set.
	{
		OutlineOverprint safe_setoverprint
		ImageForegroundColor /separate_set_color dexec		% Set foreground color
		{1}{0}ifelse
		/$frg xd
	}
	{
		/$frg false def
	} ifelse

	$bkg 1 eq                 % Check if background flag is set.
	{                      		% Not set for bitmap fill.
	 @gs $ctm setmatrix
	 F
	 @gr
	} if

	@np          								% no path but clipping

	/$dat $wid $bts mul 8 div ceiling cvi 65535 min string def    % string for data entry (each scan line)

	$bkg $frg add 1 ge
	{
		$SDF {$SCF $SCA $SCP @ss}if % alternate halftone screen? (determined by stroke attribs)
																% set params for the imagemask/image operator
		$llx $lly Tl
		$urx $llx sub $ury $lly sub scale

		% For monochrome bitmaps, the foreground colour is currently set.
		$bkg 1 eq
		{
		 FillColor /separate_set_color dexec pop
		} if

		$wid $hei abs          			% if height is negative, print it upside down
		$bts 1 eq
		{$bkg 1 ge }
		{$bts 1 ge }
		ifelse 											% either false or #bits/sample
		[ $wid 0 0
			$hei neg 0
			$hei 0 gt{$hei}{0}ifelse] % matrix(upside down if $hei is negative)
		/tcc load             			% @cc can be redefined
		$bts 1 eq
		{imagemask}
		{image}
		ifelse

		$SDF {$dsf $dsa $dsp @ss}if % reset default halftone screen
	}
	{
		$hei abs {tcc pop} repeat   % skip all lines
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 		output_color_image_level1
% Stack: 	--> output_color_image_level1 -->
% Desc: 		Outputs color bitmap on level 1 device
%----------------------------------------------------------------------------
/output_color_image_level1
{
	@np          								     % no path but clipping
	$ngx    											   % set screening function

	$llx $lly Tl
	$urx $llx sub
	$ury $lly sub scale              % set current scale for bitmap size
																	 % set parameters on stack for colorimage call:
	$wid $hei abs $bts        		   % width height #bits matrix
	[ $wid 0 0
	 $hei neg 0
	 $hei 0 gt{$hei}{0}ifelse        % matrix(upside down if $hei is negative)
	]

	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi 65535 min string def     % string for data entry (each scan line)

	$msimage false eq
	$ncl 1 eq or
	{                                % single-stream colorimage or grayscale
	 /@cc load
	 false $ncl
	 ColorImage              			   % colorimage redefined.
	}
	{                                % set parameters for multi-stream colorimage
	 $wid $bts mul 8 div ceiling cvi % calculate length of string
	 $ncl 3 eq
	 {                               % RGB colorimage
		 dup dup
		 /$dat1 exch string def        % string for data entry, Red component.
		 /$dat2 exch string def        % string for data entry, Green component.
		 /$dat3 exch string def        % string for data entry, Blue component.
		 /@cc1 load
		 /@cc2 load
		 /@cc3 load
	 }
	 {                               % CMYK colorimage
		 dup dup dup
		 /$dat1 exch string def        % string for data entry, Cyan component.
		 /$dat2 exch string def        % string for data entry, Magenta component.
		 /$dat3 exch string def        % string for data entry, Yellow component.
		 /$dat4 exch string def        % string for data entry, Black component.
		 /@cc1 load
		 /@cc2 load
		 /@cc3 load
		 /@cc4 load
	 } ifelse
	 true $ncl ColorImage
	} ifelse

	$SDF {$dsf $dsa $dsp @ss} if      % reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc1
% Stack: 	- @cc1 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc1
{
 currentfile $dat1 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc2
% Stack: 	- @cc2 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc2
{
 currentfile $dat2 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc3
% Stack: 	- @cc3 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc3
{
 currentfile $dat3 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc4
% Stack: 	- @cc4 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc4
{
 currentfile $dat4 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Multi-Stream Image ($msimage)
% sets the default value for the $msimage operator.
%
% false : the image contains one data stream
% true  : the image data is specified in multi-stream input
%----------------------------------------------------------------------------
/$msimage false def

%----------------------------------------------------------------------------
% sets the default value for the compression method, by default
% we do NOT use any filters,
%
% 0 : no compression is set
% 1 : indicates a JPEG compression filter
% 2 : a Run Length Encoding filter
% 3 : LZW compression filter
%----------------------------------------------------------------------------
/ImageCompression /None def
/MaskedImage false def

/DevicenImage false def

%----------------------------------------------------------------------------
% Proc: 		output_color_image
% Stack: 	--> output_color_image -->
% Desc: 		Output color bitmap using Level 2 image dictionary
%----------------------------------------------------------------------------
/output_color_image
{
	@np          									% no path but clipping

	$ncl 1 eq											% set device color space
	{DocGrayScaleSpace}						%	use document's grayscale colorspace
	{
		$ncl 3 eq
		{DocRgbSpace}								%	use document's RGB colorspace
		{DocCmykSpace}							%	use document's CMYK colorspace
		ifelse
	} ifelse
	setcolorspace

	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi 65535 min string def 	% string for data entry (each scan line)

	$ngx    											% set screening function

	$llx $lly Tl									% translate gstate origin
	$urx $llx sub $ury $lly sub scale  % set current scale for bitmap size

	8 dict begin                 	% start a Level 2 image dictionary
		/ImageType 1 def            % required: image type - there's only 1
		/Width $wid def							%	required: source width
		/Height $hei abs def        % required: source height
		/BitsPerComponent $bts def 	%	required: bits per sample
		/Decode                     % required: decode array (to follow)
			[ $ncl { 0 1 } repeat ]		% create decode array for DeviceN image
		def
		/ImageMatrix 								% required: map unit square to source
			[ $wid 0 0 $hei neg 0
				$hei 0 gt	{$hei}{0}	ifelse
			]
		def                      		% matrix(upside down if $hei is negative)
		/DataSource create_datasource def
	currentdict end              	% end image dictionary
	image			              			% call the image operator
	$SDF {$dsf $dsa $dsp @ss}if  	% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		simulate_devicen_image
% Stack: 	--> simulate_devicen_image -->
% Desc: 		simulating DeviceN image on Level 2 device by overprinting n  single-channel images
% Notes:		as there is not enough memory to hold whole image we output image strip by strips
%----------------------------------------------------------------------------
/simulate_devicen_image
{
	@np          										% no path but clipping
	$ngx    												% set screening function

	/colorantNames	ImageDevicenSpace 1 get def		% get DeviceN colorants name
	/altColorSpace ImageDevicenSpace 2 get	def		% get DeviceN alternative colorspace
	/tintProc ImageDevicenSpace 3 get def					% get tint procedure to convert from DeviceN to alt colorspace

	/DataSource create_datasource def

	% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
	/stripRows 65535 $wid $bts mul $ncl mul 8 div div floor cvi 1 max def

	1 stripRows set_image_strip_parameters

	/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

	0 1 maxStripIndex						% iterate through strips
	{
		/stripIndex exch def			% save buffer index

		/$t_ury										% calculate rectangle for strip image
			$ury stripHeight stripIndex mul add ceiling cvi
		def

		/$t_lly										% calculate rectangle for strip image
			$t_ury stripHeight add ceiling cvi
		def

		stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
		{
			1 $hei maxStripIndex stripRows mul sub set_image_strip_parameters

			/$t_lly										% adjust strip image rectangle
				$t_ury stripHeight add ceiling cvi
			def
		} if

		readstrip pop							% read image data from the file

		% simulate DeviceN output by overprinting n single channel images
		@gs

		$llx $t_lly Tl					% translate gstate origin
		$urx $llx sub
		$t_ury $t_lly sub
		scale										% set current scale for bitmap size

		0 1 $ncl 1 sub						% iterate through DeviceN plates
		{
			@gs
			/inkIndex exch def			% save current DeviceN plate index

			0 1 stripOutBuffer length 1 sub
			{
				dup
				$ncl mul inkIndex add stripBuffer exch get
				stripOutBuffer 3 1 roll put
			}for

			[ /Separation colorantNames inkIndex  get altColorSpace
				{																					% construct one channel tint transform function
					$ncl 1 sub {0} repeat										% convert single colorant color into n-channel DeviceN color
					$ncl inkIndex roll
					tintProc																% convert DeviceN color into alternative colorspace
				}
			] setcolorspace

			inkIndex 0 gt
			{
				true setoverprint
			} if

			strip_img_dict image		% draw single scanline image

			@gr			              	% restore graphics state
		}for
		@gr
	}for

  $SDF {$dsf $dsa $dsp @ss}if  				% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		output_devicen_image_alt
% Stack: 	--> output_devicen_image_alt -->
% Desc: 		outputing DeviceN image to Level 2 device in alternative colorspace
%----------------------------------------------------------------------------
/output_devicen_image_alt
{
	@np          										% no path but clipping
	$ngx    												% set screening function

	/colorantNames	ImageDevicenSpace 1 get def		% get DeviceN colorants name
	/altColorSpace ImageDevicenSpace 2 get	def		% get DeviceN alternative colorspace
	/tintProc ImageDevicenSpace 3 get def					% get tint procedure to convert from DeviceN to alt colorspace

	% determine how many colorants are in alternative colorspace
	altColorSpace DocCmykSpace eq
	{
		/numAltChannels 4 def
	}
	{
		altColorSpace DocRgbSpace eq
		{
			/numAltChannels 3 def
		}
		{
			/numAltChannels 1 def
		} ifelse
	}ifelse

	/DataSource create_datasource def
	
	altColorSpace setcolorspace			% use alternative colorspace

	% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
	/stripRows 65535 $wid $bts mul $ncl numAltChannels max mul 8 div div floor cvi 1 max def

	numAltChannels stripRows set_image_strip_parameters

	/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

	0 1 maxStripIndex 							% iterate through strips
	{
		/stripIndex exch def			% save buffer index

		/$t_ury										% calculate rectangle for strip image
			$ury stripHeight stripIndex mul add ceiling cvi
		def

		/$t_lly										% calculate rectangle for strip image
			$t_ury stripHeight add ceiling cvi
		def

		stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
		{
			numAltChannels $hei maxStripIndex stripRows mul sub set_image_strip_parameters

			/$t_lly										% adjust strip image rectangle
				$t_ury stripHeight add ceiling cvi
			def
		} if

		readstrip pop							% read image data from the file

		@gs

		% output DeviceN image in alternative colorspace
		0 1 stripBuffer length $ncl div cvi 1 sub
		{
			/pixelIndex xd

			stripBuffer pixelIndex $ncl mul $ncl getinterval			% get DeviceN color values array for single pixel from image scanline

			{ 255 div } forall																		% image colors are 0..255 encoded, convert to 0.0..1.0

			tintProc exec																					% convert DeviceN 0.0..1.0 encoded color values to alt colorspace

			numAltChannels array astore														% pack alt colors value into array

			/pixelAltIndex pixelIndex numAltChannels mul def

			/posColorant 0 def
			{
			 stripOutBuffer pixelAltIndex posColorant add 3 -1 roll 255 mul cvi put
			 /posColorant posColorant 1 add def										% put alt color values into alt colorspace scanline
			} forall
		} for

		$llx $t_lly Tl								% translate gstate origin
		$urx $llx sub
		$t_ury $t_lly sub scale				% set current scale for bitmap size

		strip_img_dict								% scanline image dictionary
		image													% draw image

		@gr
	}for

  $SDF {$dsf $dsa $dsp @ss}if  				% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		output_devicen_image_native
% Stack: 	--> output_devicen_image_native -->
% Desc: 		Output DeviceN image natively in Level3
%----------------------------------------------------------------------------
/output_devicen_image_native
{
	@np          											% no path but clipping
	$ngx    													% set screening function

	ImageDevicenSpace setcolorspace		% set DeviceN colorspace

	/scanline
		$wid $bts
		mul $ncl mul
		8 div
		ceiling cvi 65535 min string
	def 															% string for scanline data

	/readscanline
	{
		currentfile	scanline readhexstring pop
	} bind def

	$llx $lly Tl											% translate gstate origin
	$urx $llx sub $ury $lly sub scale % set current scale for bitmap size

	8 dict begin                 			% start a Level 2 image dictionary
		/ImageType 1 def             		% image type - there's only 1
		/Width $wid def									%	source width
		/Height $hei abs def         		% source height
		/BitsPerComponent $bts def 			%	bits per sample
		/Decode                     		% decode array (to follow)
			[ $ncl { 0 1 } repeat ]				% create decode array for DeviceN image
		def
		/ImageMatrix 										% required: map unit square to source
		[ $wid 0 0 $hei neg 0
				$hei 0 gt	{$hei}{0}	ifelse
		]	def                      			% matrix(upside down if $hei is negative)
		/DataSource											%	required: data source decode the entire bitmap
		{
			readscanline
		} def
	currentdict end              			% end image dictionary

	image			              					% call the image operator

  $SDF {$dsf $dsa $dsp @ss}if  			% reset default halftone screen
} bd


%----------------------------------------------------------------------------
% Proc: 	output_devicen_image
%
% Stack: 	pxlwid pxlhei bits ncolors llx lly urx ury cropllx croplly
%					cropurx cropury	matrix --> output_devicen_image -->
%
% Desc: 	Output DeviceN image
%
% Parms: 	colorspace				DeviceN image colorspace
%					pxlwid pxlhei 		size of bitmap in pixels
%         bits 							bits per component
%         ncolors 					color components (RGB=3, CMYK=4)
%         llx lly urx ury 	size of bitmap (before transfos)
%         cropllx croplly cropurx cropury: cropping rectangle (before transfos)
%         matrix: 					transfo matrix for stretching/rotating, etc..
%					Note :	Level 3 device - image will be output in native DeviceN colorspace
%									Level 2 Distiller or in-RIP separation - image will be output as
%									series of N overprinted bitmaps ( scanline by scanline )
%									Level 2 composite - image will be output in alternative colorspace
%
%----------------------------------------------------------------------------
/output_devicen_image
{
	Level3
	{
		output_devicen_image_native
	}
	{
		get_simulate_devicen
		{
			simulate_devicen_image
		}
		{
			output_devicen_image_alt
		} ifelse
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	output_masked_image
%
% Stack: 	pxlwid pxlhei bits ncolors llx lly urx ury cropllx croplly
%					cropurx cropury	matrix output_masked_image -
%
% Desc: 	Output level 3 color bitmap with mask
%
% Parms: 	pxlwid 	:
%					pxlhei	: size of bitmap in pixels
%         bits		: bits per component
%         ncolors	: color components (RGB=3, CMYK=4)
%         llx lly urx ury: 	size of bitmap (before transfos)
%         cropllx croplly cropurx cropury: cropping rectangle (before transfos)
%         matrix	: transfo matrix for stretching/rotating, etc.
%
%----------------------------------------------------------------------------
/output_masked_image
{
	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi 65535 min string def 	% string for data entry (each scan line)
	$ngx    											% set screening function

	DevicenImage									% DeviceN image
	{
		ImageDevicenSpace
	}
	{
		$ncl 1 eq										% set device color space
		{DocGrayScaleSpace}         %	use document's grayscale colorspace
		{
			$ncl 3 eq
			{DocRgbSpace}             %	use document's RGB colorspace
			{DocCmykSpace}            %	use document's CMYK colorspace
			ifelse
		} ifelse
	} ifelse
	setcolorspace

	$llx $lly Tl									% translate gstate origin
	$urx $llx sub
	$ury $lly sub scale						% set current scale for bitmap size

	/ImageDataDict 8 dict def			% start image data dictionary
	ImageDataDict begin
		/ImageType	1 def           % modified type 1 image dictionary
		/Width			$wid def				%	required: source width
		/Height			$hei abs def    % required: source height
		/BitsPerComponent $bts def 	%	required: bits per sample
		/Decode											% required: decode array (to follow)
		[ $ncl { 0 1 } repeat ]
		def

		/ImageMatrix [ 							%	required: image matrix
			$wid 0 0 $hei neg 0
			$hei 0 gt{$hei}{0} ifelse %	matrix(upside down if $hei is negative)
 		] def

		/DataSource create_datasource def
	end                           % end image data dictionary

	/MaskedImageDict 7 dict def   % start masked image dictionary
	MaskedImageDict begin
		/ImageType 3 def            % masked image
		/InterleaveType 3 def       % mask and data appear in separate streams
		/MaskDict ImageMaskDict def % dictionary to define mask
		/DataDict ImageDataDict def % dictionary to define data
	end

  MaskedImageDict image					% do the image

	$SDF {$dsf $dsa $dsp @ss}if  	% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 	set_image_mask
% Stack: 	pxlwid pxlhei bits set_image_mask -
%
% Desc: 	Level 3 set mask for masked images
%
% Parms: 	pxlwid 	:	Width of mask in pixels
%					pxlhei	: Height of mask in pixels
%         bits		: bits per mask component, must be 1 for InterleaveType 3
%----------------------------------------------------------------------------
/set_image_mask
{
	/$mbts xd           					% store # of bits for mask
	/$mhei xd 										%	height of mask
	/$mwid xd            					% width of mask

	/ImageMaskDict 8 dict def
	ImageMaskDict begin
		/ImageType 1 def            % modified type 1 image dictionary
		/Width		 $mwid def				%	required: source width
		/Height		 $mhei abs def		% required: source height
		/BitsPerComponent $mbts def %	required: bits per sample, must be 1 for InterleaveType 3

		/DataSource maskstream def	%	required for InterleaveType 3: data source of the mask

		/ImageMatrix [ 							%	required: image matrix
			$mwid 0 0 $mhei neg 0
			$mhei 0 gt
			{$mhei}{0} ifelse					%	matrix(upside down if $hei is negative)
 		] def

		/Decode [ 1 0 ] def         % required: mask 0 values.
	end                           % end image mask dictionary
} bd

%----------------------------------------------------------------------------
% Proc:		@daq
% Stack: 	one or more <arrays of data strings | data strings> daq -
% Desc: 	standard bitmap data acquistion routine
% NOTE:		This assumes ONLY arrays of data strings or data
%         strings are on the stack and that there are ENOUGH data
%         strings (total) for the specified bitmap.
%----------------------------------------------------------------------------
/@daq
{
 dup type /arraytype eq   		% is this an array
 {
  aload pop          					% dump strings in array onto stack
 }
 if            								% otherwise, should be a string, so leave it
} bd

%----------------------------------------------------------------------------
% Proc:		skip_image_body
%
% Stack: 	pxlwid pxlhei bits bitplanes
%         llx lly urx ury backgroundflag foregroundflag
%         cropllx croplly cropurx cropury matrix
%         dataproc --> skip_image_body -->
%
% Desc: 	skip over image binary body leaving stack clean

% NOTE:		This call should be followed by enable_raster_output call to restore
%					output_image function
%----------------------------------------------------------------------------
/skip_image_body
{
	8 rp  					% get rid of parameters on stack we do not need
	/$ury xd /$urx xd       % store the image rectangle
	/$lly xd /$llx xd       % still storing the image rectangle
	/$ncl xd           		% store # of color components
	/$bts xd           		% store # of bits per color component
	/$hei xd /$wid xd       % store pixel size

	DevicenImage not
	ImageCompression /JPEG eq or
	ImageCompression /RLE eq or
	ImageCompression /LZW eq or
	{
		create_datasource flushfile
	}
	{
		/scanline			% define string to keep single string of image data
			$wid $bts
			mul $ncl mul
			8 div
			ceiling cvi
			dup 65535 gt
			{
				pop $bts $ncl mul
			}if
			string
		def

		/upperBound $wid $hei mul $bts mul $ncl mul scanline length div cvi 1 sub def 
		0 1 upperBound			% iterate through image using scanline buffer
		{
			pop
			currentfile scanline readhexstring
			pop pop				% discard whatever we read
		}for
	}ifelse
}bd

%----------------------------------------------------------------------------
% Proc:		disable_raster_output
%
% Stack: 	--> disable_raster_output -->
%
% Desc: 	overload output_image procedure by skip_image_body procedure
%					which skips image data
%
% NOTE:		This call should be followed by enable_raster_output call to restore
%					output_image function
%----------------------------------------------------------------------------
/disable_raster_output
{
	deflevel 0 eq { @rs	} if
		
	/output_image load					% load current output_image function
	/output_image_original exch	% and save it
	def													% bind it there

	/output_image /skip_image_body load def	% overload function
	
	globaldict begin /bSkipDeviceNImage true def end
	
	deflevel 0 eq { @sv	} if
}def

%----------------------------------------------------------------------------
% Proc:		enable_raster_output
% Stack: 	--> enable_raster_output -->
% Desc: 	Function restores overloaded output_image function
% NOTE:		This call should go after disable_raster_output call
%----------------------------------------------------------------------------
/enable_raster_output
{
	deflevel 0 eq { @rs	} if
	
	/bSkipDeviceNImage where		% check whether output_image has been overloaded
	{
		/bSkipDeviceNImage undef
		
		/output_image /output_image_original load def		% load original raster function and assign it to output_image
	}if
	
	deflevel 0 eq { @sv	} if
}def


end
%%EndResource
%%EndProlog
%%BeginSetup
wCorel21Dict begin
@BeginSysCorelDict
/$dcm matrix currentmatrix def
@ssa
1.00 setflat
/$fst 128 def
%%EndSetup

%%Page: 1 1
%%ViewingOrientation: 1 0 0 1
%%BoundingBox: 0 0 1417 1417
%LogicalPage: 1
%%BeginPageSetup
@sv
@sm
@sv
%%EndPageSetup
@rax %Note: Object
1027.50520 971.75764 1207.36942 1466.40983 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
1073.58576 1461.57761 m
1073.58576 1446.12000 L
1070.88803 1446.12000 L
1055.68129 1446.12000 1044.11565 1434.61219 1043.70094 1420.26208 C
1042.96252 1466.40983 L
1027.50520 1466.38176 L
1027.50520 971.75764 L
1042.39587 972.04110 L
1043.70094 1017.87704 L
1043.37496 1003.25537 1055.68129 991.73565 1070.88803 991.73565 C
1073.58576 991.73565 L
1073.58576 976.56151 L
1207.36942 976.56151 L
1207.36942 1461.57761 L
1073.58576 1461.57761 L
@c
1033.12120 1360.10721 m
1033.12120 1360.10721 L
1033.12120 1361.45310 1034.21197 1362.54416 1035.55814 1362.54416 C
1036.90403 1362.54416 1037.99509 1361.45310 1037.99509 1360.10721 C
1037.99509 1310.90939 L
1037.99509 1309.56350 1036.90403 1308.47244 1035.55814 1308.47244 C
1034.21197 1308.47244 1033.12120 1309.56350 1033.12120 1310.90939 C
1033.12120 1360.10721 L
@c
1032.90917 1286.32904 m
1032.90917 1286.32904 L
1032.90917 1287.63609 1033.96876 1288.69512 1035.27553 1288.69512 C
1036.58258 1288.69512 1037.64189 1287.63609 1037.64189 1286.32904 C
1037.64189 1263.97276 L
1037.64189 1262.66598 1036.58258 1261.60639 1035.27553 1261.60639 C
1033.96876 1261.60639 1032.90917 1262.66598 1032.90917 1263.97276 C
1032.90917 1286.32904 L
@c
1040.68148 1202.90003 m
1040.68148 1202.90003 L
1040.68148 1200.22781 1038.51496 1198.06129 1035.84274 1198.06129 C
1033.17024 1198.06129 1031.00400 1200.22781 1031.00400 1202.90003 C
1031.00400 1235.11323 L
1031.00400 1237.78573 1033.17024 1239.95197 1035.84274 1239.95197 C
1038.51496 1239.95197 1040.68148 1237.78573 1040.68148 1235.11323 C
1040.68148 1202.90003 L
@c
1091.58435 1296.02948 m
1091.58435 1296.02948 L
1091.58435 1293.54208 1089.56806 1291.52580 1087.08066 1291.52580 C
1085.65994 1291.52580 L
1083.17282 1291.52580 1081.15654 1293.54208 1081.15654 1296.02948 C
1081.15654 1297.86265 L
1081.15654 1300.35005 1083.17282 1302.36633 1085.65994 1302.36633 C
1087.08066 1302.36633 L
1089.56806 1302.36633 1091.58435 1300.35005 1091.58435 1297.86265 C
1091.58435 1296.02948 L
@c
1105.46646 1320.68636 m
1105.46646 1320.68636 L
1105.46646 1317.14646 1104.03184 1313.37524 1101.71197 1311.05565 C
1099.39238 1308.73606 1095.62117 1307.30145 1092.08154 1307.30145 C
1081.22854 1307.30145 L
1077.68920 1307.30145 1073.91770 1308.73606 1071.59811 1311.05565 C
1069.27852 1313.37524 1067.84362 1317.14646 1067.84362 1320.68636 C
1067.84362 1396.03238 L
1067.84362 1399.57200 1069.27852 1403.34350 1071.59811 1405.66309 C
1073.91770 1407.98268 1077.68920 1409.41757 1081.22854 1409.41757 C
1092.08154 1409.41757 L
1095.62117 1409.41757 1099.39238 1407.98268 1101.71197 1405.66309 C
1104.03184 1403.34350 1105.46646 1399.57200 1105.46646 1396.03238 C
1105.46646 1320.68636 L
@c
1106.74828 1451.48202 m
1106.74828 1451.48202 L
1105.29609 1451.48202 1104.11433 1452.66378 1104.11433 1454.11597 C
1104.11433 1455.56787 1105.29609 1456.74879 1106.74828 1456.74879 C
1108.20047 1456.74879 1109.38110 1455.56787 1109.38110 1454.11597 C
1109.38110 1452.66378 1108.20047 1451.48202 1106.74828 1451.48202 C
@c
1142.46737 982.38132 m
1142.46737 982.38132 L
1126.51257 982.38132 L
1123.88457 982.38132 1121.74696 984.51921 1121.74696 987.14693 C
1121.74696 989.77408 1123.88457 991.91169 1126.51257 991.91169 C
1142.46737 991.91169 L
1145.09509 991.91169 1147.23298 989.77408 1147.23298 987.14693 C
1147.23298 984.51921 1145.09509 982.38132 1142.46737 982.38132 C
@c
1168.48970 981.73531 m
1168.48970 981.73531 L
1167.01257 981.73531 1165.81039 982.93748 1165.81039 984.41490 C
1165.81039 985.89203 1167.01257 987.09420 1168.48970 987.09420 C
1169.96683 987.09420 1171.16929 985.89203 1171.16929 984.41490 C
1171.16929 982.93748 1169.96683 981.73531 1168.48970 981.73531 C
@c
F

@rax %Note: Object
1071.81581 1311.22091 1101.49455 1405.35609 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
1092.19890 1405.35609 m
1081.11118 1405.35609 L
1075.97735 1405.35609 1071.81581 1401.19427 1071.81581 1396.06044 C
1071.81581 1320.51628 L
1071.81581 1315.38274 1075.97735 1311.22091 1081.11118 1311.22091 C
1092.19890 1311.22091 L
1097.33272 1311.22091 1101.49455 1315.38274 1101.49455 1320.51628 C
1101.49455 1396.06044 L
1101.49455 1401.19427 1097.33272 1405.35609 1092.19890 1405.35609 C
@c
1095.95055 1325.51263 m
1095.95055 1325.51263 L
1095.95055 1321.81767 1092.95546 1318.82258 1089.26050 1318.82258 C
1084.04986 1318.82258 L
1080.35490 1318.82258 1077.35953 1321.81767 1077.35953 1325.51263 C
1077.35953 1330.72356 L
1077.35953 1334.41824 1080.35490 1337.41361 1084.04986 1337.41361 C
1089.26050 1337.41361 L
1092.95546 1337.41361 1095.95055 1334.41824 1095.95055 1330.72356 C
1095.95055 1325.51263 L
@c
1095.95055 1356.54236 m
1095.95055 1356.54236 L
1095.95055 1352.84740 1092.95546 1349.85203 1089.26050 1349.85203 C
1084.04986 1349.85203 L
1080.35490 1349.85203 1077.35953 1352.84740 1077.35953 1356.54236 C
1077.35953 1361.75329 L
1077.35953 1365.44797 1080.35490 1368.44334 1084.04986 1368.44334 C
1089.26050 1368.44334 L
1092.95546 1368.44334 1095.95055 1365.44797 1095.95055 1361.75329 C
1095.95055 1356.54236 L
@c
1095.95055 1387.57181 m
1095.95055 1387.57181 L
1095.95055 1383.87713 1092.95546 1380.88176 1089.26050 1380.88176 C
1084.04986 1380.88176 L
1080.35490 1380.88176 1077.35953 1383.87713 1077.35953 1387.57181 C
1077.35953 1392.78274 L
1077.35953 1396.47770 1080.35490 1399.47307 1084.04986 1399.47307 C
1089.26050 1399.47307 L
1092.95546 1399.47307 1095.95055 1396.47770 1095.95055 1392.78274 C
1095.95055 1387.57181 L
@c
F

@rax %Note: Object
1212.92220 971.91354 1391.51083 1465.97074 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
1376.62016 1465.97074 m
1375.59827 1419.85134 L
1375.18328 1434.20117 1366.53279 1445.20384 1348.26945 1445.99244 C
1345.57200 1445.99244 L
1345.57200 1461.02485 L
1212.92220 1461.02485 L
1212.92220 975.86702 L
1346.70586 975.86702 L
1346.70586 991.32463 L
1348.26945 991.32463 L
1364.68176 991.49386 1375.84828 1002.38910 1375.59827 1017.46602 C
1376.05323 971.91354 L
1391.51083 971.91354 L
1391.51083 1465.97074 L
1376.62016 1465.97074 L
@c
1344.72671 1410.08627 m
1344.72671 1410.08627 L
1347.84482 1410.08627 1350.37247 1407.55861 1350.37247 1404.44079 C
1350.37247 1401.32268 1347.84482 1398.79531 1344.72671 1398.79531 C
1341.60917 1398.79531 1339.08123 1401.32268 1339.08123 1404.44079 C
1339.08123 1407.55861 1341.60917 1410.08627 1344.72671 1410.08627 C
@c
1322.69783 1405.53524 m
1322.69783 1405.53524 L
1322.69783 1406.90296 1323.80674 1408.01159 1325.17446 1408.01159 C
1327.02491 1408.01159 L
1328.39263 1408.01159 1329.50126 1406.90296 1329.50126 1405.53524 C
1329.50126 1397.50866 L
1329.50126 1396.14094 1328.39263 1395.03231 1327.02491 1395.03231 C
1325.17446 1395.03231 L
1323.80674 1395.03231 1322.69783 1396.14094 1322.69783 1397.50866 C
1322.69783 1405.53524 L
@c
1293.89357 1454.10265 m
1293.89357 1454.10265 L
1293.89357 1455.28753 1294.85424 1456.24819 1296.03940 1456.24819 C
1297.22428 1456.24819 1298.18494 1455.28753 1298.18494 1454.10265 C
1298.18494 1452.40724 L
1298.18494 1451.22236 1297.22428 1450.26198 1296.03940 1450.26198 C
1294.85424 1450.26198 1293.89357 1451.22236 1293.89357 1452.40724 C
1293.89357 1454.10265 L
@c
1288.46665 1454.10265 m
1288.46665 1454.10265 L
1288.46665 1455.28753 1289.42702 1456.24819 1290.61219 1456.24819 C
1291.79679 1456.24819 1292.75745 1455.28753 1292.75745 1454.10265 C
1292.75745 1452.40724 L
1292.75745 1451.22236 1291.79679 1450.26198 1290.61219 1450.26198 C
1289.42702 1450.26198 1288.46665 1451.22236 1288.46665 1452.40724 C
1288.46665 1454.10265 L
@c
1282.89770 1454.10265 m
1282.89770 1454.10265 L
1282.89770 1455.28753 1283.85808 1456.24819 1285.04324 1456.24819 C
1286.22813 1456.24819 1287.18879 1455.28753 1287.18879 1454.10265 C
1287.18879 1452.40724 L
1287.18879 1451.22236 1286.22813 1450.26198 1285.04324 1450.26198 C
1283.85808 1450.26198 1282.89770 1451.22236 1282.89770 1452.40724 C
1282.89770 1454.10265 L
@c
1304.00447 1406.94151 m
1304.00447 1406.94151 L
1305.35376 1406.94151 1306.44765 1405.84762 1306.44765 1404.49833 C
1306.44765 1403.14904 1305.35376 1402.05515 1304.00447 1402.05515 C
1281.80580 1402.05515 L
1280.45650 1402.05515 1279.36261 1403.14904 1279.36261 1404.49833 C
1279.36261 1405.84762 1280.45650 1406.94151 1281.80580 1406.94151 C
1304.00447 1406.94151 L
@c
1277.32876 1454.10265 m
1277.32876 1454.10265 L
1277.32876 1455.28753 1278.28913 1456.24819 1279.47430 1456.24819 C
1280.65918 1456.24819 1281.61984 1455.28753 1281.61984 1454.10265 C
1281.61984 1452.40724 L
1281.61984 1451.22236 1280.65918 1450.26198 1279.47430 1450.26198 C
1278.28913 1450.26198 1277.32876 1451.22236 1277.32876 1452.40724 C
1277.32876 1454.10265 L
@c
1271.90154 1454.10265 m
1271.90154 1454.10265 L
1271.90154 1455.28753 1272.86192 1456.24819 1274.04709 1456.24819 C
1275.23225 1456.24819 1276.19263 1455.28753 1276.19263 1454.10265 C
1276.19263 1452.40724 L
1276.19263 1451.22236 1275.23225 1450.26198 1274.04709 1450.26198 C
1272.86192 1450.26198 1271.90154 1451.22236 1271.90154 1452.40724 C
1271.90154 1454.10265 L
@c
1276.75956 982.64268 m
1276.75956 982.64268 L
1276.75956 981.45780 1275.79918 980.49713 1274.61402 980.49713 C
1273.42913 980.49713 1272.46847 981.45780 1272.46847 982.64268 C
1272.46847 984.33780 L
1272.46847 985.52296 1273.42913 986.48362 1274.61402 986.48362 C
1275.79918 986.48362 1276.75956 985.52296 1276.75956 984.33780 C
1276.75956 982.64268 L
@c
1282.18677 982.64268 m
1282.18677 982.64268 L
1282.18677 981.45780 1281.22639 980.49713 1280.04123 980.49713 C
1278.85606 980.49713 1277.89569 981.45780 1277.89569 982.64268 C
1277.89569 984.33780 L
1277.89569 985.52296 1278.85606 986.48362 1280.04123 986.48362 C
1281.22639 986.48362 1282.18677 985.52296 1282.18677 984.33780 C
1282.18677 982.64268 L
@c
1287.75572 982.64268 m
1287.75572 982.64268 L
1287.75572 981.45780 1286.79506 980.49713 1285.61017 980.49713 C
1284.42501 980.49713 1283.46463 981.45780 1283.46463 982.64268 C
1283.46463 984.33780 L
1283.46463 985.52296 1284.42501 986.48362 1285.61017 986.48362 C
1286.79506 986.48362 1287.75572 985.52296 1287.75572 984.33780 C
1287.75572 982.64268 L
@c
1293.32438 982.64268 m
1293.32438 982.64268 L
1293.32438 981.45780 1292.36400 980.49713 1291.17883 980.49713 C
1289.99395 980.49713 1289.03357 981.45780 1289.03357 982.64268 C
1289.03357 984.33780 L
1289.03357 985.52296 1289.99395 986.48362 1291.17883 986.48362 C
1292.36400 986.48362 1293.32438 985.52296 1293.32438 984.33780 C
1293.32438 982.64268 L
@c
1298.75159 982.64268 m
1298.75159 982.64268 L
1298.75159 981.45780 1297.79093 980.49713 1296.60605 980.49713 C
1295.42117 980.49713 1294.46050 981.45780 1294.46050 982.64268 C
1294.46050 984.33780 L
1294.46050 985.52296 1295.42117 986.48362 1296.60605 986.48362 C
1297.79093 986.48362 1298.75159 985.52296 1298.75159 984.33780 C
1298.75159 982.64268 L
@c
1358.76104 1080.60576 m
1358.76104 1080.60576 L
1358.76104 1072.90942 1352.49931 1066.64769 1344.80296 1066.64769 C
1241.02743 1066.64769 L
1233.33165 1066.64769 1227.06964 1072.90942 1227.06964 1080.60576 C
1227.06964 1356.43096 L
1227.06964 1364.12787 1233.33165 1370.38876 1241.02743 1370.38876 C
1344.80296 1370.38876 L
1352.49931 1370.38876 1358.76104 1364.12787 1358.76104 1356.43096 C
1358.76104 1080.60576 L
@c
1387.80737 1311.11036 m
1387.80737 1311.11036 L
1387.80737 1308.95660 1386.06180 1307.21074 1383.90803 1307.21074 C
1381.75455 1307.21074 1380.00869 1308.95660 1380.00869 1311.11036 C
1380.00869 1359.23839 L
1380.00869 1361.39187 1381.75455 1363.13773 1383.90803 1363.13773 C
1386.06180 1363.13773 1387.80737 1361.39187 1387.80737 1359.23839 C
1387.80737 1311.11036 L
@c
F

@rax %Note: Object
1382.17663 1309.82570 1385.63943 1313.28850 @E
/$fm 1 def
0 J 0 j 10.000002565393789 setmiterlimit
[] 0 d 0 R 0 @G
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_outline
0 1.00006 1.00006 0.00000 @w
1383.90803 1313.28850 m
1382.95191 1313.28850 1382.17663 1312.51351 1382.17663 1311.55710 C
1382.17663 1310.60098 1382.95191 1309.82570 1383.90803 1309.82570 C
1384.86416 1309.82570 1385.63943 1310.60098 1385.63943 1311.55710 C
1385.63943 1312.51351 1384.86416 1313.28850 1383.90803 1313.28850 C
@c
S

@rax %Note: Object
676.84507 993.02542 832.59609 1445.14205 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
832.45436 1439.72929 m
832.45436 1442.56224 830.70000 1445.14205 827.04132 1445.14205 C
702.04479 1445.14205 L
688.12753 1445.14205 676.84507 1435.37159 676.84507 1419.94205 C
676.84507 1218.65839 L
676.84507 1018.22542 L
676.84507 1004.30787 686.61553 993.02542 702.04479 993.02542 C
749.58576 993.02542 L
750.71169 993.02542 751.79225 993.46932 752.59304 994.26047 C
754.06422 995.43061 L
755.02970 996.38447 756.33194 996.91909 757.68917 996.91909 C
776.00750 996.91909 L
777.26721 996.91909 778.48356 996.45789 779.42665 995.62280 C
781.50614 994.06431 L
782.15159 993.49313 783.38466 993.02542 784.24668 993.02542 C
827.04132 993.02542 L
830.70000 993.02542 832.45436 995.60551 832.45436 998.43846 C
832.59609 1004.84872 L
832.59609 1218.65839 L
832.59609 1433.70057 L
832.45436 1439.72929 L
@c
724.03087 1296.02948 m
724.03087 1296.02948 L
724.03087 1293.54208 722.01458 1291.52551 719.52718 1291.52551 C
718.10646 1291.52551 L
715.61906 1291.52551 713.60277 1293.54208 713.60277 1296.02948 C
713.60277 1297.86265 L
713.60277 1300.35005 715.61906 1302.36633 718.10646 1302.36633 C
719.52718 1302.36633 L
722.01458 1302.36633 724.03087 1300.35005 724.03087 1297.86265 C
724.03087 1296.02948 L
@c
737.91298 1320.68636 m
737.91298 1320.68636 L
737.91298 1317.14646 736.47808 1313.37524 734.15849 1311.05565 C
731.83890 1308.73606 728.06769 1307.30117 724.52806 1307.30117 C
713.67506 1307.30117 L
710.13543 1307.30117 706.36422 1308.73606 704.04463 1311.05565 C
701.72476 1313.37524 700.29014 1317.14646 700.29014 1320.68636 C
700.29014 1396.03238 L
700.29014 1399.57200 701.72476 1403.34350 704.04463 1405.66309 C
706.36422 1407.98268 710.13543 1409.41729 713.67506 1409.41729 C
724.52806 1409.41729 L
728.06769 1409.41729 731.83890 1407.98268 734.15849 1405.66309 C
736.47808 1403.34350 737.91298 1399.57200 737.91298 1396.03238 C
737.91298 1320.68636 L
@c
F

@rax %Note: Object
704.26205 1311.22091 733.94079 1405.35609 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
724.64513 1405.35609 m
713.55770 1405.35609 L
708.42387 1405.35609 704.26205 1401.19427 704.26205 1396.06044 C
704.26205 1320.51628 L
704.26205 1315.38246 708.42387 1311.22091 713.55770 1311.22091 C
724.64513 1311.22091 L
729.77896 1311.22091 733.94079 1315.38246 733.94079 1320.51628 C
733.94079 1396.06044 L
733.94079 1401.19427 729.77896 1405.35609 724.64513 1405.35609 C
@c
728.39707 1325.51263 m
728.39707 1325.51263 L
728.39707 1321.81767 725.40170 1318.82258 721.70702 1318.82258 C
716.49609 1318.82258 L
712.80113 1318.82258 709.80576 1321.81767 709.80576 1325.51263 C
709.80576 1330.72356 L
709.80576 1334.41824 712.80113 1337.41361 716.49609 1337.41361 C
721.70702 1337.41361 L
725.40170 1337.41361 728.39707 1334.41824 728.39707 1330.72356 C
728.39707 1325.51263 L
@c
728.39707 1356.54236 m
728.39707 1356.54236 L
728.39707 1352.84740 725.40170 1349.85203 721.70702 1349.85203 C
716.49609 1349.85203 L
712.80113 1349.85203 709.80576 1352.84740 709.80576 1356.54236 C
709.80576 1361.75329 L
709.80576 1365.44797 712.80113 1368.44334 716.49609 1368.44334 C
721.70702 1368.44334 L
725.40170 1368.44334 728.39707 1365.44797 728.39707 1361.75329 C
728.39707 1356.54236 L
@c
728.39707 1387.57181 m
728.39707 1387.57181 L
728.39707 1383.87713 725.40170 1380.88176 721.70702 1380.88176 C
716.49609 1380.88176 L
712.80113 1380.88176 709.80576 1383.87713 709.80576 1387.57181 C
709.80576 1392.78274 L
709.80576 1396.47770 712.80113 1399.47307 716.49609 1399.47307 C
721.70702 1399.47307 L
725.40170 1399.47307 728.39707 1396.47770 728.39707 1392.78274 C
728.39707 1387.57181 L
@c
F

@rax %Note: Object
838.64494 993.02542 994.39625 1445.14205 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
969.19597 1445.14205 m
844.19972 1445.14205 L
840.54132 1445.14205 838.78668 1442.56224 838.78668 1439.72929 C
838.64494 1433.70057 L
838.64494 1004.84872 L
838.78668 998.43846 L
838.78668 995.60551 840.54132 993.02542 844.19972 993.02542 C
969.19597 993.02542 L
983.86980 993.02542 994.39625 1004.30787 994.39625 1018.22542 C
994.39625 1419.94205 L
994.39625 1434.61559 983.11380 1445.14205 969.19597 1445.14205 C
@c
964.42469 1410.36180 m
964.42469 1410.36180 L
967.54252 1410.36180 970.07017 1407.83414 970.07017 1404.71631 C
970.07017 1401.59849 967.54252 1399.07083 964.42469 1399.07083 C
961.30687 1399.07083 958.77921 1401.59849 958.77921 1404.71631 C
958.77921 1407.83414 961.30687 1410.36180 964.42469 1410.36180 C
@c
942.39609 1405.81106 m
942.39609 1405.81106 L
942.39609 1407.17877 943.50472 1408.28740 944.87244 1408.28740 C
946.72290 1408.28740 L
948.09033 1408.28740 949.19924 1407.17877 949.19924 1405.81106 C
949.19924 1397.78447 L
949.19924 1396.41676 948.09033 1395.30784 946.72290 1395.30784 C
944.87244 1395.30784 L
943.50472 1395.30784 942.39609 1396.41676 942.39609 1397.78447 C
942.39609 1405.81106 L
@c
901.50378 1407.21732 m
901.50378 1407.21732 L
923.70217 1407.21732 L
925.05175 1407.21732 926.14564 1406.12315 926.14564 1404.77386 C
926.14564 1403.42457 925.05175 1402.33068 923.70217 1402.33068 C
901.50378 1402.33068 L
900.15449 1402.33068 899.06060 1403.42457 899.06060 1404.77386 C
899.06060 1406.12315 900.15449 1407.21732 901.50378 1407.21732 C
@c
978.45902 1080.88129 m
978.45902 1080.88129 L
978.45902 1073.18494 972.19729 1066.92350 964.50094 1066.92350 C
860.72570 1066.92350 L
853.02935 1066.92350 846.76762 1073.18494 846.76762 1080.88129 C
846.76762 1356.70649 L
846.76762 1364.40312 853.02935 1370.66457 860.72570 1370.66457 C
964.50094 1370.66457 L
972.19729 1370.66457 978.45902 1364.40312 978.45902 1356.70649 C
978.45902 1080.88129 L
@c
F

@rax %Note: Object
327.84038 1004.32375 635.23219 1433.84372 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
630.41074 1412.58784 m
555.22857 1412.48523 L
549.26816 1412.61364 540.34328 1412.53087 534.63345 1416.17083 C
529.45597 1419.47178 527.73392 1422.22110 525.22554 1428.26939 C
523.82069 1431.65594 520.92652 1433.68866 517.14312 1433.84372 C
342.24038 1433.56025 L
334.28750 1433.56025 327.84038 1428.62513 327.84038 1419.16025 C
327.84038 1019.18636 L
327.84038 1011.24964 333.50258 1004.81528 342.19247 1004.78636 C
482.00598 1004.32375 L
482.08734 1004.32375 L
620.88038 1004.78636 L
629.57027 1004.81528 635.23219 1011.24964 635.23219 1019.18608 C
635.23219 1407.76611 L
635.23219 1410.42898 633.07361 1412.58784 630.41074 1412.58784 C
@c
F

@rax %Note: Object
146.59880 997.03729 294.73143 1441.13046 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
273.96680 1440.84699 m
146.59880 1441.13046 L
146.59880 1438.21162 L
146.59880 1435.82570 147.49370 1433.89162 150.63534 1433.89162 C
169.42450 1434.17509 L
171.99014 1434.17509 175.45776 1432.57918 176.99754 1430.52690 C
178.79244 1428.13616 179.48948 1424.86809 180.94337 1422.28658 C
185.03802 1415.01855 192.78028 1412.87017 200.07638 1412.87017 C
283.40617 1413.72057 L
286.06025 1413.72057 288.21175 1411.56907 288.21175 1408.91499 C
288.49521 1015.23005 L
288.49521 1008.65339 282.35934 1004.12391 276.53868 1004.12391 C
152.55071 1003.55698 L
150.16507 1003.55698 148.51446 1003.13461 148.51446 999.23698 C
148.51446 997.03729 L
277.54753 997.03729 L
286.72469 997.03729 294.73143 1004.28803 294.73143 1014.22120 C
294.73143 1420.36583 L
294.73143 1434.10167 285.43493 1440.84699 273.96680 1440.84699 C
@c
287.49770 1418.32743 m
287.49770 1418.32743 L
286.53279 1417.27521 284.72428 1416.58781 281.59058 1416.58781 C
196.86983 1416.30435 L
195.37002 1416.30435 194.06126 1416.46876 192.87184 1416.80778 C
187.60252 1418.30702 183.15298 1423.71184 183.15298 1429.13140 C
183.15298 1431.64035 184.87361 1435.31943 191.32498 1435.31943 C
270.74665 1435.89430 L
272.78079 1435.88693 277.33068 1435.59893 279.99383 1434.55691 C
285.55228 1432.38274 288.73191 1428.17386 289.18913 1422.92296 C
289.34050 1421.18844 288.70866 1419.64838 287.49770 1418.32743 C
@c
F

@rax %Note: Object
184.85405 1417.43849 287.79392 1434.18501 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
279.65792 1432.68945 m
277.45654 1433.55090 273.10422 1433.90211 270.74098 1433.90976 C
191.32554 1434.18501 L
186.48595 1434.18501 184.85405 1431.29225 184.85405 1429.13169 C
184.85405 1424.20932 188.86252 1419.39156 194.18769 1417.87644 C
195.33345 1417.55046 196.52967 1417.43849 197.72107 1417.43849 C
281.87461 1417.43877 L
286.60422 1417.43849 287.95465 1420.75899 287.77890 1422.77556 C
287.36476 1427.52728 284.35833 1430.85005 279.65792 1432.68945 C
@c
199.14180 1420.15238 m
199.14180 1420.15238 L
195.93751 1420.15238 193.34013 1422.74976 193.34013 1425.95376 C
193.34013 1429.15776 195.93751 1431.75515 199.14180 1431.75515 C
202.34580 1431.75515 204.94318 1429.15776 204.94318 1425.95376 C
204.94318 1422.74976 202.34580 1420.15238 199.14180 1420.15238 C
@c
218.93613 1420.15238 m
218.93613 1420.15238 L
215.73213 1420.15238 213.13474 1422.74976 213.13474 1425.95376 C
213.13474 1429.15776 215.73213 1431.75515 218.93613 1431.75515 C
222.14013 1431.75515 224.73751 1429.15776 224.73751 1425.95376 C
224.73751 1422.74976 222.14013 1420.15238 218.93613 1420.15238 C
@c
248.26195 1419.07975 m
248.26195 1419.07975 L
246.85143 1419.07975 245.70794 1420.22324 245.70794 1421.63376 C
245.70794 1423.04457 246.85143 1424.18806 248.26195 1424.18806 C
249.67276 1424.18806 250.81654 1423.04457 250.81654 1421.63376 C
250.81654 1420.22324 249.67276 1419.07975 248.26195 1419.07975 C
@c
248.26195 1425.47046 m
248.26195 1425.47046 L
246.28734 1425.47046 244.68690 1427.07090 244.68690 1429.04551 C
244.68690 1431.02013 246.28734 1432.62085 248.26195 1432.62085 C
250.23657 1432.62085 251.83757 1431.02013 251.83757 1429.04551 C
251.83757 1427.07090 250.23657 1425.47046 248.26195 1425.47046 C
@c
F

@rax %Note: Object
-3.75761 997.03729 142.74255 1441.13046 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
138.70602 1003.55698 m
14.43515 1003.55698 L
8.61477 1003.55698 2.47861 1008.08674 2.47861 1014.66312 C
2.47861 1422.93742 L
2.47861 1429.51408 8.61477 1434.04384 14.43515 1434.04384 C
138.42255 1434.61077 L
140.80847 1434.61077 142.45909 1435.03313 142.45909 1438.93077 C
142.45909 1441.13046 L
13.42630 1441.13046 L
4.24913 1441.13046 -3.75761 1433.87972 -3.75761 1423.94655 C
-3.75761 1014.22120 L
-3.75761 1004.28803 4.24913 997.03729 13.42630 997.03729 C
142.74255 997.03729 L
142.74255 999.23698 L
142.74255 1003.13461 141.09194 1003.55698 138.70602 1003.55698 C
@c
F

@rax %Note: Object
668.34142 984.17820 1002.89991 1453.98926 @E
/$fm 1 def
0 J 0 j 10.000002565393789 setmiterlimit
[] 0 d 0 R 0 @G
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_outline
0 1.00006 1.00006 0.00000 @w
668.34142 984.17820 m
668.34142 1453.98926 L
1002.89991 1453.98926 L
1002.89991 984.17820 L
668.34142 984.17820 L
@c
S

@rax %Note: Object
1019.00098 963.34583 1400.01477 1474.82164 @E
/$fm 1 def
0 J 0 j 10.000002565393789 setmiterlimit
[] 0 d 0 R 0 @G
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_outline
0 1.00006 1.00006 0.00000 @w
1019.00098 963.34583 m
1019.00098 1474.82164 L
1400.01477 1474.82164 L
1400.01477 963.34583 L
1019.00098 963.34583 L
@c
S

@rax %Note: Object
319.33672 995.82009 643.73613 1442.34737 @E
/$fm 1 def
0 J 0 j 10.000002565393789 setmiterlimit
[] 0 d 0 R 0 @G
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_outline
0 1.00006 1.00006 0.00000 @w
319.33672 995.82009 m
319.33672 1442.34737 L
643.73613 1442.34737 L
643.73613 995.82009 L
319.33672 995.82009 L
@c
S

@rax %Note: Object
-12.26126 988.53364 303.23537 1449.63411 @E
/$fm 1 def
0 J 0 j 10.000002565393789 setmiterlimit
[] 0 d 0 R 0 @G
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_outline
0 1.00006 1.00006 0.00000 @w
-12.26126 988.53364 m
-12.26126 1449.63411 L
303.23537 1449.63411 L
303.23537 988.53364 L
-12.26126 988.53364 L
@c
S

@rax %Note: Object
1135.12762 924.04091 1144.33285 941.13354 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
1135.12762 941.13354 m
1144.33285 941.13354 L
1144.33285 939.28224 L
1137.33383 939.28224 L
1137.33383 933.60132 L
1143.80050 933.60132 L
1143.80050 931.77609 L
1137.33383 931.77609 L
1137.33383 924.04091 L
1135.12762 924.04091 L
1135.12762 941.13354 L
@c
F

@rax %Note: Object
1146.44013 923.76255 1156.88835 936.31521 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
1156.78687 927.38863 m
1156.78687 926.12098 1156.81238 925.00469 1156.88835 924.04091 C
1154.91005 924.04091 L
1154.78391 926.04472 L
1154.73317 926.04472 L
1154.14923 925.05543 1152.85635 923.76255 1150.67565 923.76255 C
1148.74781 923.76255 1146.44013 924.82696 1146.44013 929.13846 C
1146.44013 936.31521 L
1148.67156 936.31521 L
1148.67156 929.51830 L
1148.67156 927.18539 1149.38164 925.61301 1151.41096 925.61301 C
1152.90709 925.61301 1153.94712 926.65304 1154.35247 927.64233 C
1154.47918 927.97143 1154.55543 928.37792 1154.55543 928.78299 C
1154.55543 936.31521 L
1156.78687 936.31521 L
1156.78687 927.38863 L
@c
F

@rax %Note: Object
1160.49203 924.04091 1162.72346 942.04658 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
1160.49203 942.04658 m
1162.72346 942.04658 L
1162.72346 924.04091 L
1160.49203 924.04091 L
1160.49203 942.04658 L
@c
F

@rax %Note: Object
1166.47739 924.04091 1168.70882 942.04658 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
1166.47739 942.04658 m
1168.70882 942.04658 L
1168.70882 924.04091 L
1166.47739 924.04091 L
1166.47739 942.04658 L
@c
F

@rax %Note: Object
1175.45584 924.04091 1196.32706 941.13354 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
1179.79172 924.04091 m
1175.45584 941.13354 L
1177.78876 941.13354 L
1179.81723 932.48617 L
1180.32520 930.35537 1180.78101 928.22542 1181.08573 926.57707 C
1181.13647 926.57707 L
1181.41483 928.27616 1181.94803 930.30548 1182.53112 932.51140 C
1184.81329 941.13354 L
1187.12098 941.13354 L
1189.20104 932.46094 L
1189.68236 930.43162 1190.13846 928.40315 1190.39244 926.60230 C
1190.44318 926.60230 L
1190.79865 928.47940 1191.27997 930.38060 1191.81231 932.51140 C
1194.07011 941.13354 L
1196.32706 941.13354 L
1191.48321 924.04091 L
1189.17553 924.04091 L
1187.01950 932.94227 L
1186.48715 935.12381 1186.13169 936.79767 1185.90406 938.52142 C
1185.85332 938.52142 L
1185.54860 936.82205 1185.16876 935.14932 1184.53408 932.94227 C
1182.09940 924.04091 L
1179.79172 924.04091 L
@c
F

@rax %Note: Object
1197.87789 924.04091 1204.03984 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
1197.97937 932.48617 m
1197.97937 933.93156 1197.95386 935.17455 1197.87789 936.31521 C
1199.82983 936.31521 L
1199.90608 933.90605 L
1200.00756 933.90605 L
1200.56627 935.55439 1201.90989 936.59471 1203.40602 936.59471 C
1203.66000 936.59471 1203.83773 936.56920 1204.03984 936.51846 C
1204.03984 934.41288 L
1203.81222 934.46362 1203.58375 934.48913 1203.27902 934.48913 C
1201.70693 934.48913 1200.59178 933.29773 1200.28706 931.62387 C
1200.23603 931.31915 1200.18529 930.96482 1200.18529 930.58384 C
1200.18529 924.04091 L
1197.97937 924.04091 L
1197.97937 932.48617 L
@c
F

@rax %Note: Object
1205.18249 923.76255 1214.97137 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
1212.94205 924.04091 m
1212.76545 925.58778 L
1212.68920 925.58778 L
1212.00378 924.62485 1210.68539 923.76255 1208.93528 923.76255 C
1206.45014 923.76255 1205.18249 925.51153 1205.18249 927.28687 C
1205.18249 930.25474 1207.82013 931.87786 1212.56249 931.85235 C
1212.56249 932.10520 L
1212.56249 933.12000 1212.28299 934.94608 1209.77235 934.94608 C
1208.63169 934.94608 1207.43915 934.59061 1206.57685 934.03304 C
1206.07030 935.50365 L
1207.08482 936.16299 1208.55543 936.59471 1210.10230 936.59471 C
1213.85537 936.59471 1214.76841 934.03304 1214.76841 931.57313 C
1214.76841 926.98328 L
1214.76841 925.91773 1214.81915 924.87770 1214.97137 924.04091 C
1212.94205 924.04091 L
@c
1212.61294 930.30548 m
1212.61294 930.30548 L
1210.17855 930.35537 1207.41392 929.92450 1207.41392 927.54085 C
1207.41392 926.09546 1208.37770 925.41090 1209.51950 925.41090 C
1211.11682 925.41090 1212.13077 926.42457 1212.48624 927.46460 C
1212.56249 927.69335 1212.61294 927.94620 1212.61294 928.17468 C
1212.61294 930.30548 L
@c
F

@rax %Note: Object
1218.27033 919.01934 1229.98620 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
1218.37181 932.30844 m
1218.37181 933.88082 1218.32107 935.14932 1218.27033 936.31521 C
1220.27329 936.31521 L
1220.37477 934.21077 L
1220.42551 934.21077 L
1221.33855 935.70690 1222.78394 936.59471 1224.78775 936.59471 C
1227.75477 936.59471 1229.98620 934.08378 1229.98620 930.35537 C
1229.98620 925.94324 1227.29868 923.76255 1224.40706 923.76255 C
1222.78394 923.76255 1221.36406 924.47263 1220.62876 925.68926 C
1220.57802 925.68926 L
1220.57802 919.01934 L
1218.37181 919.01934 L
1218.37181 932.30844 L
@c
1220.57802 929.03698 m
1220.57802 929.03698 L
1220.57802 928.70702 1220.62876 928.40315 1220.67950 928.12394 C
1221.08485 926.57707 1222.42932 925.51153 1224.02721 925.51153 C
1226.38564 925.51153 1227.75477 927.43937 1227.75477 930.25474 C
1227.75477 932.71465 1226.46189 934.81909 1224.10346 934.81909 C
1222.58183 934.81909 1221.16082 933.72831 1220.73024 932.05446 C
1220.65427 931.77609 1220.57802 931.44614 1220.57802 931.14142 C
1220.57802 929.03698 L
@c
F

@rax %Note: Object
1238.25657 923.88841 1249.03389 941.26054 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
1238.25657 940.90507 m
1239.21950 941.10831 1240.74198 941.26054 1242.28885 941.26054 C
1244.49506 941.26054 1245.91493 940.87984 1246.98019 940.01839 C
1247.86800 939.35820 1248.40006 938.34454 1248.40006 936.99978 C
1248.40006 935.35143 1247.30929 933.90605 1245.50957 933.24699 C
1245.50957 933.19625 L
1247.13269 932.79005 1249.03389 931.44614 1249.03389 928.90998 C
1249.03389 927.43937 1248.45109 926.32309 1247.58879 925.48630 C
1246.39739 924.39638 1244.46954 923.88841 1241.67940 923.88841 C
1240.15805 923.88841 1238.99187 923.99017 1238.25657 924.09165 C
1238.25657 940.90507 L
@c
1240.46277 933.90605 m
1240.46277 933.90605 L
1242.46573 933.90605 L
1244.79978 933.90605 1246.16863 935.12381 1246.16863 936.77244 C
1246.16863 938.77512 1244.64728 939.56145 1242.41584 939.56145 C
1241.40104 939.56145 1240.81710 939.48520 1240.46277 939.40894 C
1240.46277 933.90605 L
@c
1240.46277 925.71477 m
1240.46277 925.71477 L
1240.89335 925.63852 1241.52803 925.61301 1242.31436 925.61301 C
1244.59654 925.61301 1246.70098 926.45008 1246.70098 928.93550 C
1246.70098 931.26841 1244.69802 932.23219 1242.28885 932.23219 C
1240.46277 932.23219 L
1240.46277 925.71477 L
@c
F

@rax %Note: Object
1250.96372 923.76255 1260.75288 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
1258.72356 924.04091 m
1258.54668 925.58778 L
1258.47043 925.58778 L
1257.78501 924.62485 1256.46661 923.76255 1254.71679 923.76255 C
1252.23137 923.76255 1250.96372 925.51153 1250.96372 927.28687 C
1250.96372 930.25474 1253.60135 931.87786 1258.34343 931.85235 C
1258.34343 932.10520 L
1258.34343 933.12000 1258.06422 934.94608 1255.55357 934.94608 C
1254.41291 934.94608 1253.22066 934.59061 1252.35836 934.03304 C
1251.85124 935.50365 L
1252.86605 936.16299 1254.33666 936.59471 1255.88353 936.59471 C
1259.63660 936.59471 1260.54964 934.03304 1260.54964 931.57313 C
1260.54964 926.98328 L
1260.54964 925.91773 1260.60038 924.87770 1260.75288 924.04091 C
1258.72356 924.04091 L
@c
1258.39446 930.30548 m
1258.39446 930.30548 L
1255.95978 930.35537 1253.19515 929.92450 1253.19515 927.54085 C
1253.19515 926.09546 1254.15893 925.41090 1255.30044 925.41090 C
1256.89833 925.41090 1257.91200 926.42457 1258.26746 927.46460 C
1258.34343 927.69335 1258.39446 927.94620 1258.39446 928.17468 C
1258.39446 930.30548 L
@c
F

@rax %Note: Object
1263.26551 923.78806 1272.95291 936.56920 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
1272.90217 924.49786 m
1272.31909 924.19313 1271.02507 923.78806 1269.37672 923.78806 C
1265.67468 923.78806 1263.26551 926.29786 1263.26551 930.05150 C
1263.26551 933.82980 1265.85241 936.56920 1269.85918 936.56920 C
1271.17757 936.56920 1272.34460 936.23924 1272.95291 935.93537 C
1272.44523 934.21077 L
1271.91288 934.51465 1271.07609 934.79386 1269.85918 934.79386 C
1267.04381 934.79386 1265.52217 932.71465 1265.52217 930.15326 C
1265.52217 927.31238 1267.34854 925.56227 1269.78293 925.56227 C
1271.05058 925.56227 1271.88765 925.89250 1272.52120 926.17172 C
1272.90217 924.49786 L
@c
F

@rax %Note: Object
1275.51657 924.04091 1285.81228 942.04658 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
1277.72249 930.68532 m
1277.77323 930.68532 L
1278.07795 931.11704 1278.50854 931.64910 1278.86400 932.07997 C
1282.46457 936.31521 L
1285.15323 936.31521 L
1280.41087 931.26841 L
1285.81228 924.04091 L
1283.09839 924.04091 L
1278.86400 929.92450 L
1277.72249 928.65713 L
1277.72249 924.04091 L
1275.51657 924.04091 L
1275.51657 942.04658 L
1277.72249 942.04658 L
1277.72249 930.68532 L
@c
F

@rax %Note: Object
790.90328 924.04091 800.10822 941.13354 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
790.90328 941.13354 m
800.10822 941.13354 L
800.10822 939.28224 L
793.10920 939.28224 L
793.10920 933.60132 L
799.57587 933.60132 L
799.57587 931.77609 L
793.10920 931.77609 L
793.10920 924.04091 L
790.90328 924.04091 L
790.90328 941.13354 L
@c
F

@rax %Note: Object
802.74898 924.04091 804.98013 942.04658 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
802.74898 942.04658 m
804.98013 942.04658 L
804.98013 924.04091 L
802.74898 924.04091 L
802.74898 942.04658 L
@c
F

@rax %Note: Object
807.77027 923.76255 817.55943 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
815.53011 924.04091 m
815.35323 925.58778 L
815.27726 925.58778 L
814.59156 924.62485 813.27317 923.76255 811.52334 923.76255 C
809.03792 923.76255 807.77027 925.51153 807.77027 927.28687 C
807.77027 930.25474 810.40819 931.87786 815.15027 931.85235 C
815.15027 932.10520 L
815.15027 933.12000 814.87077 934.94608 812.36013 934.94608 C
811.21946 934.94608 810.02721 934.59061 809.16491 934.03304 C
808.65808 935.50365 L
809.67260 936.16299 811.14350 936.59471 812.69036 936.59471 C
816.44315 936.59471 817.35619 934.03304 817.35619 931.57313 C
817.35619 926.98328 L
817.35619 925.91773 817.40693 924.87770 817.55943 924.04091 C
815.53011 924.04091 L
@c
815.20101 930.30548 m
815.20101 930.30548 L
812.76633 930.35537 810.00170 929.92450 810.00170 927.54085 C
810.00170 926.09546 810.96576 925.41090 812.10728 925.41090 C
813.70488 925.41090 814.71855 926.42457 815.07402 927.46460 C
815.15027 927.69335 815.20101 927.94620 815.20101 928.17468 C
815.20101 930.30548 L
@c
F

@rax %Note: Object
819.46261 923.78806 826.74113 939.84066 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
823.54564 939.84066 m
823.54564 936.31521 L
826.74113 936.31521 L
826.74113 934.61613 L
823.54564 934.61613 L
823.54564 927.99694 L
823.54564 926.47531 823.97735 925.61301 825.21950 925.61301 C
825.80343 925.61301 826.23430 925.68926 826.51351 925.76551 C
826.61499 924.09165 L
826.18328 923.91392 825.49899 923.78806 824.63669 923.78806 C
823.59638 923.78806 822.75959 924.11688 822.22724 924.72548 C
821.59370 925.38567 821.36494 926.47531 821.36494 927.92069 C
821.36494 934.61613 L
819.46261 934.61613 L
819.46261 936.31521 L
821.36494 936.31521 L
821.36494 939.25672 L
823.54564 939.84066 L
@c
F

@rax %Note: Object
834.70677 923.88841 845.48409 941.26054 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
834.70677 940.90507 m
835.66970 941.10831 837.19219 941.26054 838.73906 941.26054 C
840.94526 941.26054 842.36513 940.87984 843.43039 940.01839 C
844.31820 939.35820 844.85027 938.34454 844.85027 936.99978 C
844.85027 935.35143 843.75950 933.90605 841.95978 933.24699 C
841.95978 933.19625 L
843.58290 932.79005 845.48409 931.44614 845.48409 928.90998 C
845.48409 927.43937 844.90129 926.32309 844.03899 925.48630 C
842.84759 924.39638 840.91975 923.88841 838.12961 923.88841 C
836.60825 923.88841 835.44208 923.99017 834.70677 924.09165 C
834.70677 940.90507 L
@c
836.91298 933.90605 m
836.91298 933.90605 L
838.91594 933.90605 L
841.24998 933.90605 842.61883 935.12381 842.61883 936.77244 C
842.61883 938.77512 841.09748 939.56145 838.86520 939.56145 C
837.85124 939.56145 837.26731 939.48520 836.91298 939.40894 C
836.91298 933.90605 L
@c
836.91298 925.71477 m
836.91298 925.71477 L
837.34356 925.63852 837.97824 925.61301 838.76457 925.61301 C
841.04674 925.61301 843.15118 926.45008 843.15118 928.93550 C
843.15118 931.26841 841.14822 932.23219 838.73906 932.23219 C
836.91298 932.23219 L
836.91298 925.71477 L
@c
F

@rax %Note: Object
847.41392 923.76255 857.20309 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
855.17376 924.04091 m
854.99688 925.58778 L
854.92063 925.58778 L
854.23606 924.62485 852.91682 923.76255 851.16671 923.76255 C
848.68157 923.76255 847.41392 925.51153 847.41392 927.28687 C
847.41392 930.25474 850.05156 931.87786 854.79364 931.85235 C
854.79364 932.10520 L
854.79364 933.12000 854.51443 934.94608 852.00378 934.94608 C
850.86312 934.94608 849.67087 934.59061 848.80828 934.03304 C
848.30145 935.50365 L
849.31625 936.16299 850.78687 936.59471 852.33373 936.59471 C
856.08680 936.59471 856.99984 934.03304 856.99984 931.57313 C
856.99984 926.98328 L
856.99984 925.91773 857.05058 924.87770 857.20309 924.04091 C
855.17376 924.04091 L
@c
854.84466 930.30548 m
854.84466 930.30548 L
852.40998 930.35537 849.64535 929.92450 849.64535 927.54085 C
849.64535 926.09546 850.60913 925.41090 851.75065 925.41090 C
853.34854 925.41090 854.36220 926.42457 854.71767 927.46460 C
854.79364 927.69335 854.84466 927.94620 854.84466 928.17468 C
854.84466 930.30548 L
@c
F

@rax %Note: Object
859.71572 923.78806 869.40312 936.56920 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
869.35238 924.49786 m
868.76929 924.19313 867.47528 923.78806 865.82693 923.78806 C
862.12488 923.78806 859.71572 926.29786 859.71572 930.05150 C
859.71572 933.82980 862.30261 936.56920 866.30939 936.56920 C
867.62778 936.56920 868.79480 936.23924 869.40312 935.93537 C
868.89628 934.21077 L
868.36309 934.51465 867.52630 934.79386 866.30939 934.79386 C
863.49402 934.79386 861.97238 932.71465 861.97238 930.15326 C
861.97238 927.31238 863.79874 925.56227 866.23313 925.56227 C
867.50079 925.56227 868.33757 925.89250 868.97140 926.17172 C
869.35238 924.49786 L
@c
F

@rax %Note: Object
871.96677 924.04091 882.26249 942.04658 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
874.17269 930.68532 m
874.22343 930.68532 L
874.52816 931.11704 874.95874 931.64910 875.31420 932.07997 C
878.91477 936.31521 L
881.60343 936.31521 L
876.86107 931.26841 L
882.26249 924.04091 L
879.54860 924.04091 L
875.31420 929.92450 L
874.17269 928.65713 L
874.17269 924.04091 L
871.96677 924.04091 L
871.96677 942.04658 L
874.17269 942.04658 L
874.17269 930.68532 L
@c
F

@rax %Note: Object
332.13005 923.78806 342.47650 941.41304 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
332.68762 926.72929 m
333.67691 926.12098 335.12202 925.61301 336.64365 925.61301 C
338.90031 925.61301 340.21984 926.80554 340.21984 928.53014 C
340.21984 930.12775 339.30680 931.04079 336.99912 931.92860 C
334.20898 932.91676 332.48438 934.36299 332.48438 936.77244 C
332.48438 939.43446 334.69143 941.41304 338.01279 941.41304 C
339.76290 941.41304 341.03140 941.00683 341.79194 940.57597 C
341.18362 938.77512 L
340.62520 939.07984 339.48454 939.58668 337.93767 939.58668 C
335.60362 939.58668 334.71581 938.19231 334.71581 937.02529 C
334.71581 935.42769 335.75584 934.64135 338.11427 933.72831 C
341.00589 932.61317 342.47650 931.21767 342.47650 928.70702 C
342.47650 926.07024 340.52343 923.78806 336.49143 923.78806 C
334.84280 923.78806 333.04309 924.26939 332.13005 924.87770 C
332.68762 926.72929 L
@c
F

@rax %Note: Object
344.68554 923.78806 354.37323 936.56920 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
354.32220 924.49786 m
353.73940 924.19313 352.44539 923.78806 350.79704 923.78806 C
347.09471 923.78806 344.68554 926.29786 344.68554 930.05150 C
344.68554 933.82980 347.27244 936.56920 351.27950 936.56920 C
352.59761 936.56920 353.76463 936.23924 354.37323 935.93537 C
353.86639 934.21077 L
353.33320 934.51465 352.49613 934.79386 351.27950 934.79386 C
348.46384 934.79386 346.94249 932.71465 346.94249 930.15326 C
346.94249 927.31238 348.76857 925.56227 351.20324 925.56227 C
352.47090 925.56227 353.30769 925.89250 353.94151 926.17172 C
354.32220 924.49786 L
@c
F

@rax %Note: Object
356.83512 924.04091 362.99707 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
356.93660 932.48617 m
356.93660 933.93156 356.91137 935.17455 356.83512 936.31521 C
358.78734 936.31521 L
358.86331 933.90605 L
358.96507 933.90605 L
359.52350 935.55439 360.86712 936.59471 362.36324 936.59471 C
362.61723 936.59471 362.79411 936.56920 362.99707 936.51846 C
362.99707 934.41288 L
362.76973 934.46362 362.54126 934.48913 362.23654 934.48913 C
360.66416 934.48913 359.54787 933.29773 359.24428 931.62387 C
359.19354 931.31915 359.14252 930.96482 359.14252 930.58384 C
359.14252 924.04091 L
356.93660 924.04091 L
356.93660 932.48617 L
@c
F

@rax %Note: Object
364.08898 923.78806 374.91704 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
366.21893 929.77228 m
366.26967 926.75480 368.19723 925.51153 370.42894 925.51153 C
372.02655 925.51153 372.99033 925.79074 373.82712 926.14620 C
374.20724 924.54860 L
373.42091 924.19313 372.07729 923.78806 370.12422 923.78806 C
366.34592 923.78806 364.08898 926.27235 364.08898 929.97553 C
364.08898 933.67757 366.26967 936.59471 369.84586 936.59471 C
373.85263 936.59471 374.91704 933.06926 374.91704 930.81231 C
374.91704 930.35537 374.86715 930.00076 374.84192 929.77228 C
366.21893 929.77228 L
@c
372.76186 931.36989 m
372.76186 931.36989 L
372.78737 932.79005 372.17877 934.99682 369.66813 934.99682 C
367.41118 934.99682 366.42189 932.91676 366.24416 931.36989 C
372.76186 931.36989 L
@c
F

@rax %Note: Object
376.79613 923.78806 387.62419 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
378.92580 929.77228 m
378.97654 926.75480 380.90438 925.51153 383.13581 925.51153 C
384.73342 925.51153 385.69748 925.79074 386.53427 926.14620 C
386.91411 924.54860 L
386.12806 924.19313 384.78416 923.78806 382.83109 923.78806 C
379.05279 923.78806 376.79613 926.27235 376.79613 929.97553 C
376.79613 933.67757 378.97654 936.59471 382.55272 936.59471 C
386.55978 936.59471 387.62419 933.06926 387.62419 930.81231 C
387.62419 930.35537 387.57430 930.00076 387.54907 929.77228 C
378.92580 929.77228 L
@c
385.46872 931.36989 m
385.46872 931.36989 L
385.49424 932.79005 384.88592 934.99682 382.37528 934.99682 C
380.11833 934.99682 379.12904 932.91676 378.95131 931.36989 C
385.46872 931.36989 L
@c
F

@rax %Note: Object
390.28904 924.04091 400.83902 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
390.39080 932.99301 m
390.39080 934.26151 390.36529 935.30069 390.28904 936.31521 C
392.26677 936.31521 L
392.39376 934.28702 L
392.44450 934.28702 L
393.05282 935.45291 394.47383 936.59471 396.50202 936.59471 C
398.20110 936.59471 400.83902 935.57991 400.83902 931.36989 C
400.83902 924.04091 L
398.60759 924.04091 L
398.60759 931.11704 L
398.60759 933.09449 397.87228 934.74312 395.76671 934.74312 C
394.29609 934.74312 393.15458 933.70309 392.77446 932.46094 C
392.67298 932.18145 392.62224 931.80161 392.62224 931.42063 C
392.62224 924.04091 L
390.39080 924.04091 L
390.39080 932.99301 L
@c
F

@rax %Note: Object
409.61622 920.97241 414.68854 941.64151 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
414.68854 941.64151 m
412.83694 939.15609 411.49332 935.85912 411.49332 931.26841 C
411.49332 926.75480 412.88797 923.50857 414.68854 920.97241 C
412.93843 920.97241 L
411.34082 923.07713 409.61622 926.32309 409.61622 931.26841 C
409.64173 936.26447 411.34082 939.51071 412.93843 941.64151 C
414.68854 941.64151 L
@c
F

@rax %Note: Object
417.12406 924.04091 426.32929 941.13354 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
417.12406 941.13354 m
426.32929 941.13354 L
426.32929 939.28224 L
419.33027 939.28224 L
419.33027 933.60132 L
425.79694 933.60132 L
425.79694 931.77609 L
419.33027 931.77609 L
419.33027 924.04091 L
417.12406 924.04091 L
417.12406 941.13354 L
@c
F

@rax %Note: Object
427.72677 923.76255 439.72186 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
439.72186 930.28025 m
439.72186 925.74000 436.57710 923.76255 433.61036 923.76255 C
430.28816 923.76255 427.72677 926.19723 427.72677 930.07701 C
427.72677 934.18554 430.41515 936.59471 433.81276 936.59471 C
437.33792 936.59471 439.72186 934.03304 439.72186 930.28025 C
@c
429.98343 930.15326 m
429.98343 930.15326 L
429.98343 927.46460 431.53030 925.43641 433.71099 925.43641 C
435.84208 925.43641 437.43940 927.43937 437.43940 930.20400 C
437.43940 932.28293 436.39965 934.92085 433.76173 934.92085 C
431.12523 934.92085 429.98343 932.48617 429.98343 930.15326 C
@c
F

@rax %Note: Object
442.43773 924.04091 448.59969 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
442.53921 932.48617 m
442.53921 933.93156 442.51370 935.17455 442.43773 936.31521 C
444.38967 936.31521 L
444.46592 933.90605 L
444.56740 933.90605 L
445.12611 935.55439 446.46973 936.59471 447.96586 936.59471 C
448.21984 936.59471 448.39757 936.56920 448.59969 936.51846 C
448.59969 934.41288 L
448.37206 934.46362 448.14359 934.48913 447.83887 934.48913 C
446.26677 934.48913 445.15134 933.29773 444.84661 931.62387 C
444.79616 931.31915 444.74513 930.96482 444.74513 930.58384 C
444.74513 924.04091 L
442.53921 924.04091 L
442.53921 932.48617 L
@c
F

@rax %Note: Object
454.81465 923.78806 462.09288 939.84066 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
458.89767 939.84066 m
458.89767 936.31521 L
462.09288 936.31521 L
462.09288 934.61613 L
458.89767 934.61613 L
458.89767 927.99694 L
458.89767 926.47531 459.32910 925.61301 460.57124 925.61301 C
461.15546 925.61301 461.58605 925.68926 461.86526 925.76551 C
461.96702 924.09165 L
461.53531 923.91392 460.85074 923.78806 459.98844 923.78806 C
458.94841 923.78806 458.11134 924.11688 457.57928 924.72548 C
456.94545 925.38567 456.71698 926.47531 456.71698 927.92069 C
456.71698 934.61613 L
454.81465 934.61613 L
454.81465 936.31521 L
456.71698 936.31521 L
456.71698 939.25672 L
458.89767 939.84066 L
@c
F

@rax %Note: Object
464.50403 924.04091 470.66627 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
464.60551 932.48617 m
464.60551 933.93156 464.58028 935.17455 464.50403 936.31521 C
466.45625 936.31521 L
466.53222 933.90605 L
466.63398 933.90605 L
467.19241 935.55439 468.53631 936.59471 470.03244 936.59471 C
470.28614 936.59471 470.46387 936.56920 470.66627 936.51846 C
470.66627 934.41288 L
470.43865 934.46362 470.21017 934.48913 469.90545 934.48913 C
468.33307 934.48913 467.21792 933.29773 466.91320 931.62387 C
466.86246 931.31915 466.81172 930.96482 466.81172 930.58384 C
466.81172 924.04091 L
464.60551 924.04091 L
464.60551 932.48617 L
@c
F

@rax %Note: Object
471.80976 923.76255 481.59865 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
479.56932 924.04091 m
479.39272 925.58778 L
479.31647 925.58778 L
478.63191 924.62485 477.31266 923.76255 475.56255 923.76255 C
473.07713 923.76255 471.80976 925.51153 471.80976 927.28687 C
471.80976 930.25474 474.44740 931.87786 479.18948 931.85235 C
479.18948 932.10520 L
479.18948 933.12000 478.91027 934.94608 476.39962 934.94608 C
475.25896 934.94608 474.06643 934.59061 473.20413 934.03304 C
472.69729 935.50365 L
473.71209 936.16299 475.18271 936.59471 476.72957 936.59471 C
480.48265 936.59471 481.39569 934.03304 481.39569 931.57313 C
481.39569 926.98328 L
481.39569 925.91773 481.44643 924.87770 481.59865 924.04091 C
479.56932 924.04091 L
@c
479.24022 930.30548 m
479.24022 930.30548 L
476.80583 930.35537 474.04120 929.92450 474.04120 927.54085 C
474.04120 926.09546 475.00498 925.41090 476.14649 925.41090 C
477.74438 925.41090 478.75805 926.42457 479.11323 927.46460 C
479.18948 927.69335 479.24022 927.94620 479.24022 928.17468 C
479.24022 930.30548 L
@c
F

@rax %Note: Object
484.89761 924.04091 495.44731 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
484.99909 932.99301 m
484.99909 934.26151 484.97386 935.30069 484.89761 936.31521 C
486.87506 936.31521 L
487.00205 934.28702 L
487.05279 934.28702 L
487.66110 935.45291 489.08211 936.59471 491.11058 936.59471 C
492.80967 936.59471 495.44731 935.57991 495.44731 931.36989 C
495.44731 924.04091 L
493.21587 924.04091 L
493.21587 931.11704 L
493.21587 933.09449 492.47943 934.74312 490.37528 934.74312 C
488.90438 934.74312 487.76287 933.70309 487.38302 932.46094 C
487.28126 932.18145 487.23052 931.80161 487.23052 931.42063 C
487.23052 924.04091 L
484.99909 924.04091 L
484.99909 932.99301 L
@c
F

@rax %Note: Object
498.21392 923.78806 506.25298 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
498.77150 926.32309 m
499.43083 925.89250 500.59786 925.43641 501.71301 925.43641 C
503.33613 925.43641 504.09780 926.24797 504.09780 927.26164 C
504.09780 928.32690 503.46283 928.90998 501.81449 929.51830 C
499.60857 930.30548 498.56854 931.52239 498.56854 932.99301 C
498.56854 934.97159 500.16614 936.59471 502.80378 936.59471 C
504.04706 936.59471 505.13698 936.23924 505.82126 935.83389 C
505.26369 934.21077 L
504.78236 934.51465 503.89455 934.92085 502.75304 934.92085 C
501.43465 934.92085 500.69934 934.16003 500.69934 933.24699 C
500.69934 932.23219 501.43465 931.77609 503.03225 931.16693 C
505.16220 930.35537 506.25298 929.29096 506.25298 927.46460 C
506.25298 925.30942 504.57912 923.78806 501.66312 923.78806 C
500.31836 923.78806 499.07622 924.11688 498.21392 924.62485 C
498.77150 926.32309 L
@c
F

@rax %Note: Object
509.01874 919.01934 520.73433 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
509.12022 932.30844 m
509.12022 933.88082 509.06948 935.14932 509.01874 936.31521 C
511.02142 936.31521 L
511.12318 934.21077 L
511.17392 934.21077 L
512.08696 935.70690 513.53235 936.59471 515.53616 936.59471 C
518.50318 936.59471 520.73433 934.08378 520.73433 930.35537 C
520.73433 925.94324 518.04680 923.76255 515.15546 923.76255 C
513.53235 923.76255 512.11247 924.47263 511.37717 925.68926 C
511.32614 925.68926 L
511.32614 919.01934 L
509.12022 919.01934 L
509.12022 932.30844 L
@c
511.32614 929.03698 m
511.32614 929.03698 L
511.32614 928.70702 511.37717 928.40315 511.42791 928.12394 C
511.83326 926.57707 513.17773 925.51153 514.77534 925.51153 C
517.13376 925.51153 518.50318 927.43937 518.50318 930.25474 C
518.50318 932.71465 517.21002 934.81909 514.85159 934.81909 C
513.33024 934.81909 511.90923 933.72831 511.47865 932.05446 C
511.40239 931.77609 511.32614 931.44614 511.32614 931.14142 C
511.32614 929.03698 L
@c
F

@rax %Note: Object
522.58791 923.76255 532.37707 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
530.34775 924.04091 m
530.17115 925.58778 L
530.09490 925.58778 L
529.40920 924.62485 528.09080 923.76255 526.34098 923.76255 C
523.85556 923.76255 522.58791 925.51153 522.58791 927.28687 C
522.58791 930.25474 525.22554 931.87786 529.96791 931.85235 C
529.96791 932.10520 L
529.96791 933.12000 529.68841 934.94608 527.17776 934.94608 C
526.03710 934.94608 524.84485 934.59061 523.98255 934.03304 C
523.47572 935.50365 L
524.49024 936.16299 525.96113 936.59471 527.50800 936.59471 C
531.26079 936.59471 532.17383 934.03304 532.17383 931.57313 C
532.17383 926.98328 L
532.17383 925.91773 532.22485 924.87770 532.37707 924.04091 C
530.34775 924.04091 L
@c
530.01865 930.30548 m
530.01865 930.30548 L
527.58397 930.35537 524.81934 929.92450 524.81934 927.54085 C
524.81934 926.09546 525.78340 925.41090 526.92491 925.41090 C
528.52252 925.41090 529.53619 926.42457 529.89165 927.46460 C
529.96791 927.69335 530.01865 927.94620 530.01865 928.17468 C
530.01865 930.30548 L
@c
F

@rax %Note: Object
535.67575 924.04091 541.83798 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
535.77751 932.48617 m
535.77751 933.93156 535.75200 935.17455 535.67575 936.31521 C
537.62797 936.31521 L
537.70422 933.90605 L
537.80570 933.90605 L
538.36441 935.55439 539.70803 936.59471 541.20416 936.59471 C
541.45814 936.59471 541.63587 936.56920 541.83798 936.51846 C
541.83798 934.41288 L
541.61036 934.46362 541.38189 934.48913 541.07717 934.48913 C
539.50507 934.48913 538.38964 933.29773 538.08491 931.62387 C
538.03417 931.31915 537.98343 930.96482 537.98343 930.58384 C
537.98343 924.04091 L
535.77751 924.04091 L
535.77751 932.48617 L
@c
F

@rax %Note: Object
542.92961 923.78806 553.75795 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
545.05956 929.77228 m
545.11058 926.75480 547.03814 925.51153 549.26957 925.51153 C
550.86718 925.51153 551.83124 925.79074 552.66803 926.14620 C
553.04787 924.54860 L
552.26183 924.19313 550.91792 923.78806 548.96485 923.78806 C
545.18655 923.78806 542.92961 926.27235 542.92961 929.97553 C
542.92961 933.67757 545.11058 936.59471 548.68677 936.59471 C
552.69354 936.59471 553.75795 933.06926 553.75795 930.81231 C
553.75795 930.35537 553.70806 930.00076 553.68283 929.77228 C
545.05956 929.77228 L
@c
551.60277 931.36989 m
551.60277 931.36989 L
551.62800 932.79005 551.01969 934.99682 548.50876 934.99682 C
546.25209 934.99682 545.26280 932.91676 545.08507 931.36989 C
551.60277 931.36989 L
@c
F

@rax %Note: Object
556.42280 924.04091 566.97279 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
556.52457 932.99301 m
556.52457 934.26151 556.49906 935.30069 556.42280 936.31521 C
558.40054 936.31521 L
558.52753 934.28702 L
558.57827 934.28702 L
559.18658 935.45291 560.60759 936.59471 562.63578 936.59471 C
564.33515 936.59471 566.97279 935.57991 566.97279 931.36989 C
566.97279 924.04091 L
564.74135 924.04091 L
564.74135 931.11704 L
564.74135 933.09449 564.00491 934.74312 561.90047 934.74312 C
560.42986 934.74312 559.28806 933.70309 558.90822 932.46094 C
558.80674 932.18145 558.75600 931.80161 558.75600 931.42063 C
558.75600 924.04091 L
556.52457 924.04091 L
556.52457 932.99301 L
@c
F

@rax %Note: Object
569.10444 923.78806 576.38296 939.84066 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
573.18775 939.84066 m
573.18775 936.31521 L
576.38296 936.31521 L
576.38296 934.61613 L
573.18775 934.61613 L
573.18775 927.99694 L
573.18775 926.47531 573.61918 925.61301 574.86132 925.61301 C
575.44554 925.61301 575.87613 925.68926 576.15534 925.76551 C
576.25682 924.09165 L
575.82539 923.91392 575.14082 923.78806 574.27852 923.78806 C
573.23820 923.78806 572.40142 924.11688 571.86935 924.72548 C
571.23553 925.38567 571.00706 926.47531 571.00706 927.92069 C
571.00706 934.61613 L
569.10444 934.61613 L
569.10444 936.31521 L
571.00706 936.31521 L
571.00706 939.25672 L
573.18775 939.84066 L
@c
F

@rax %Note: Object
583.41033 923.78806 591.44939 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
583.96791 926.32309 m
584.62696 925.89250 585.79398 925.43641 586.90913 925.43641 C
588.53225 925.43641 589.29392 926.24797 589.29392 927.26164 C
589.29392 928.32690 588.65924 928.90998 587.01090 929.51830 C
584.80469 930.30548 583.76466 931.52239 583.76466 932.99301 C
583.76466 934.97159 585.36255 936.59471 588.00019 936.59471 C
589.24318 936.59471 590.33310 936.23924 591.01767 935.83389 C
590.46009 934.21077 L
589.97877 934.51465 589.09096 934.92085 587.94945 934.92085 C
586.63106 934.92085 585.89575 934.16003 585.89575 933.24699 C
585.89575 932.23219 586.63106 931.77609 588.22866 931.16693 C
590.35861 930.35537 591.44939 929.29096 591.44939 927.46460 C
591.44939 925.30942 589.77553 923.78806 586.85953 923.78806 C
585.51477 923.78806 584.27263 924.11688 583.41033 924.62485 C
583.96791 926.32309 L
@c
F

@rax %Note: Object
594.31663 924.04091 604.61235 942.04658 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
596.52255 930.68532 m
596.57329 930.68532 L
596.87802 931.11704 597.30860 931.64910 597.66406 932.07997 C
601.26463 936.31521 L
603.95329 936.31521 L
599.21093 931.26841 L
604.61235 924.04091 L
601.89846 924.04091 L
597.66406 929.92450 L
596.52255 928.65713 L
596.52255 924.04091 L
594.31663 924.04091 L
594.31663 942.04658 L
596.52255 942.04658 L
596.52255 930.68532 L
@c
F

@rax %Note: Object
606.36444 924.04091 609.12992 941.15906 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
609.12907 939.76441 m
609.15458 939.00359 608.59587 938.39528 607.70806 938.39528 C
606.92202 938.39528 606.36444 939.00359 606.36444 939.76441 C
606.36444 940.55074 606.94724 941.15906 607.75880 941.15906 C
608.59587 941.15906 609.12907 940.55074 609.12907 939.76441 C
@c
606.64365 924.04091 m
606.64365 924.04091 L
606.64365 936.31521 L
608.87509 936.31521 L
608.87509 924.04091 L
606.64365 924.04091 L
@c
F

@rax %Note: Object
612.47764 924.04091 623.02734 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
612.57912 932.99301 m
612.57912 934.26151 612.55389 935.30069 612.47764 936.31521 C
614.45509 936.31521 L
614.58208 934.28702 L
614.63282 934.28702 L
615.24142 935.45291 616.66214 936.59471 618.69061 936.59471 C
620.38970 936.59471 623.02734 935.57991 623.02734 931.36989 C
623.02734 924.04091 L
620.79591 924.04091 L
620.79591 931.11704 L
620.79591 933.09449 620.05975 934.74312 617.95502 934.74312 C
616.48441 934.74312 615.34290 933.70309 614.96306 932.46094 C
614.86157 932.18145 614.81055 931.80161 614.81055 931.42063 C
614.81055 924.04091 L
612.57912 924.04091 L
612.57912 932.99301 L
@c
F

@rax %Note: Object
625.31178 920.97241 630.35858 941.64151 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
625.31178 920.97241 m
627.11235 923.48334 628.50699 926.78003 628.50699 931.34466 C
628.50699 935.88463 627.13786 939.13058 625.31178 941.64151 C
627.03638 941.64151 L
628.65921 939.56145 630.35858 936.31521 630.35858 931.31915 C
630.35858 926.34860 628.65921 923.12787 627.03638 920.97241 C
625.31178 920.97241 L
@c
F

@rax %Note: Object
110.77654 923.78806 121.12328 941.41304 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
111.33411 926.72929 m
112.32340 926.12098 113.76850 925.61301 115.29014 925.61301 C
117.54680 925.61301 118.86633 926.80554 118.86633 928.53014 C
118.86633 930.12775 117.95329 931.04079 115.64561 931.92860 C
112.85546 932.91676 111.13087 934.36299 111.13087 936.77244 C
111.13087 939.43446 113.33792 941.41304 116.65928 941.41304 C
118.40910 941.41304 119.67789 941.00683 120.43843 940.57597 C
119.83011 938.77512 L
119.27140 939.07984 118.13102 939.58668 116.58416 939.58668 C
114.25011 939.58668 113.36258 938.19231 113.36258 937.02529 C
113.36258 935.42769 114.40233 934.64135 116.76076 933.72831 C
119.65238 932.61317 121.12328 931.21767 121.12328 928.70702 C
121.12328 926.07024 119.16992 923.78806 115.13792 923.78806 C
113.48929 923.78806 111.68957 924.26939 110.77654 924.87770 C
111.33411 926.72929 L
@c
F

@rax %Note: Object
123.33203 923.78806 133.01972 936.56920 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
132.96898 924.49786 m
132.38589 924.19313 131.09187 923.78806 129.44353 923.78806 C
125.74148 923.78806 123.33203 926.29786 123.33203 930.05150 C
123.33203 933.82980 125.91893 936.56920 129.92598 936.56920 C
131.24438 936.56920 132.41112 936.23924 133.01972 935.93537 C
132.51288 934.21077 L
131.97940 934.51465 131.14261 934.79386 129.92598 934.79386 C
127.11033 934.79386 125.58898 932.71465 125.58898 930.15326 C
125.58898 927.31238 127.41506 925.56227 129.84973 925.56227 C
131.11710 925.56227 131.95417 925.89250 132.58800 926.17172 C
132.96898 924.49786 L
@c
F

@rax %Note: Object
135.48161 924.04091 141.64356 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
135.58309 932.48617 m
135.58309 933.93156 135.55786 935.17455 135.48161 936.31521 C
137.43354 936.31521 L
137.50980 933.90605 L
137.61156 933.90605 L
138.16998 935.55439 139.51361 936.59471 141.00973 936.59471 C
141.26372 936.59471 141.44060 936.56920 141.64356 936.51846 C
141.64356 934.41288 L
141.41622 934.46362 141.18775 934.48913 140.88302 934.48913 C
139.31065 934.48913 138.19436 933.29773 137.89077 931.62387 C
137.84003 931.31915 137.78901 930.96482 137.78901 930.58384 C
137.78901 924.04091 L
135.58309 924.04091 L
135.58309 932.48617 L
@c
F

@rax %Note: Object
142.73546 923.78806 153.56353 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
144.86542 929.77228 m
144.91616 926.75480 146.84372 925.51153 149.07543 925.51153 C
150.67304 925.51153 151.63682 925.79074 152.47361 926.14620 C
152.85373 924.54860 L
152.06740 924.19313 150.72378 923.78806 148.77071 923.78806 C
144.99213 923.78806 142.73546 926.27235 142.73546 929.97553 C
142.73546 933.67757 144.91616 936.59471 148.49235 936.59471 C
152.49912 936.59471 153.56353 933.06926 153.56353 930.81231 C
153.56353 930.35537 153.51364 930.00076 153.48841 929.77228 C
144.86542 929.77228 L
@c
151.40835 931.36989 m
151.40835 931.36989 L
151.43357 932.79005 150.82526 934.99682 148.31461 934.99682 C
146.05767 934.99682 145.06838 932.91676 144.89065 931.36989 C
151.40835 931.36989 L
@c
F

@rax %Note: Object
155.44233 923.78806 166.27068 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
157.57228 929.77228 m
157.62302 926.75480 159.55087 925.51153 161.78230 925.51153 C
163.37991 925.51153 164.34397 925.79074 165.18076 926.14620 C
165.56060 924.54860 L
164.77455 924.19313 163.43065 923.78806 161.47757 923.78806 C
157.69928 923.78806 155.44233 926.27235 155.44233 929.97553 C
155.44233 933.67757 157.62302 936.59471 161.19921 936.59471 C
165.20627 936.59471 166.27068 933.06926 166.27068 930.81231 C
166.27068 930.35537 166.22079 930.00076 166.19556 929.77228 C
157.57228 929.77228 L
@c
164.11521 931.36989 m
164.11521 931.36989 L
164.14072 932.79005 163.53241 934.99682 161.02148 934.99682 C
158.76482 934.99682 157.77553 932.91676 157.59780 931.36989 C
164.11521 931.36989 L
@c
F

@rax %Note: Object
168.93553 924.04091 179.48551 936.59471 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 1.0000  create_cmyk_color set_solid_fill
169.03729 932.99301 m
169.03729 934.26151 169.01178 935.30069 168.93553 936.31521 C
170.91326 936.31521 L
171.04025 934.28702 L
171.09099 934.28702 L
171.69931 935.45291 173.12031 936.59471 175.14850 936.59471 C
176.84787 936.59471 179.48551 935.57991 179.48551 931.36989 C
179.48551 924.04091 L
177.25408 924.04091 L
177.25408 931.11704 L
177.25408 933.09449 176.51877 934.74312 174.41320 934.74312 C
172.94258 934.74312 171.80079 933.70309 171.42094 932.46094 C
171.31946 932.18145 171.26872 931.80161 171.26872 931.42063 C
171.26872 924.04091 L
169.03729 924.04091 L
169.03729 932.99301 L
@c
F

@rax %Note: Object
414.09326 841.80416 1023.54066 902.49335 @E
/$fm 0 def
 0 O 0 @g
0.0000 0.0000 0.0000 0.0000  create_cmyk_color set_solid_fill
414.09326 902.49335 m
414.09326 841.80416 L
1023.54066 841.80416 L
1023.54066 902.49335 L
414.09326 902.49335 L
@c
F

@rax %Note: Object
475.66460 883.09502 559.67726 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
481.31887 899.56800 m
482.85921 899.56800 484.06110 899.15924 484.90781 898.34173 C
485.75424 897.52394 486.22819 896.60409 486.31266 895.56491 C
484.72157 895.56491 L
484.53534 896.34841 484.17987 896.97883 483.62117 897.43861 C
483.07946 897.89868 482.31751 898.12006 481.33587 898.12006 C
480.13370 898.12006 479.16879 897.69430 478.44085 896.85950 C
477.71291 896.00769 477.34044 894.71310 477.34044 892.97546 C
477.34044 891.54454 477.67918 890.38602 478.33937 889.48318 C
478.99956 888.59735 479.99820 888.15430 481.30214 888.15430 C
482.52104 888.15430 483.45194 888.61436 484.07811 889.55121 C
484.41657 890.04529 484.67083 890.70973 484.82306 891.51052 C
486.43143 891.51052 L
486.27893 890.21565 485.80498 889.14246 485.00929 888.27364 C
484.04438 887.21745 482.75773 886.68935 481.11591 886.68935 C
479.71049 886.68935 478.52561 887.11540 477.56069 887.98422 C
476.29106 889.12545 475.66460 890.88009 475.66460 893.24816 C
475.66460 895.05383 476.13855 896.53578 477.08646 897.67729 C
478.11912 898.93786 479.52425 899.56800 481.31887 899.56800 C
@c
F

@rax %Note: Object
475.66460 883.09502 559.67726 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
492.25748 887.98422 m
493.23969 887.98422 493.91688 888.35896 494.28907 889.10844 C
494.64482 889.85792 494.83077 890.69272 494.83077 891.61257 C
494.83077 892.44737 494.69528 893.11181 494.44157 893.63991 C
494.01808 894.45742 493.30715 894.86646 492.27449 894.86646 C
491.36031 894.86646 490.70013 894.52573 490.29392 893.82728 C
489.87071 893.12882 489.66775 892.27701 489.66775 891.28885 C
489.66775 890.35200 489.87071 889.55121 490.29392 888.92107 C
490.70013 888.29065 491.36031 887.98422 492.25748 887.98422 C
@c
492.30850 896.17805 m
493.44265 896.17805 494.40784 895.80331 495.20324 895.03682 C
495.99893 894.27005 496.38841 893.12882 496.38841 891.64658 C
496.38841 890.21565 496.04967 889.02312 495.35575 888.08627 C
494.66154 887.14942 493.57814 886.68935 492.12227 886.68935 C
490.90365 886.68935 489.93846 887.09811 489.21052 887.93291 C
488.49959 888.76772 488.14413 889.87493 488.14413 891.27184 C
488.14413 892.77109 488.51631 893.96362 489.27827 894.84945 C
490.04022 895.73528 491.03887 896.17805 492.30850 896.17805 C
@c
F

@rax %Note: Object
475.66460 883.09502 559.67726 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
501.89046 888.01824 m
502.58438 888.01824 503.16009 888.30765 503.61704 888.90406 C
504.07398 889.48318 504.31124 890.35200 504.31124 891.52753 C
504.31124 892.22598 504.20948 892.83912 504.00652 893.35020 C
503.61704 894.32135 502.92312 894.81515 501.89046 894.81515 C
500.85780 894.81515 500.16359 894.30435 499.77439 893.26517 C
499.57087 892.70277 499.46939 892.00431 499.46939 891.15279 C
499.46939 890.47134 499.57087 889.89194 499.77439 889.39814 C
500.16359 888.47802 500.85780 888.01824 501.89046 888.01824 C
@c
498.04753 895.88863 m
499.48639 895.88863 L
499.48639 894.69609 L
499.77439 895.10485 500.11257 895.41156 500.46803 895.63294 C
500.95899 895.97367 501.55172 896.14403 502.22891 896.14403 C
503.22756 896.14403 504.09099 895.75228 504.78520 894.98551 C
505.47912 894.20202 505.83458 893.09480 505.83458 891.66359 C
505.83458 889.72157 505.32661 888.34195 504.32825 887.50715 C
503.68479 886.97906 502.93984 886.70636 502.09342 886.70636 C
501.43323 886.70636 500.87452 886.85972 500.41729 887.14942 C
500.14658 887.31978 499.85887 887.60920 499.53713 888.01824 C
499.53713 883.46976 L
498.04753 883.46976 L
498.04753 895.88863 L
@c
F

@rax %Note: Object
475.66460 883.09502 559.67726 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
512.25080 895.92265 m
513.89263 895.92265 L
513.68967 895.36054 513.23272 894.04866 512.50450 892.00431 C
511.96280 890.48835 511.50586 889.24479 511.15039 888.27364 C
510.28696 886.00791 509.67751 884.61099 509.32205 884.11720 C
508.96658 883.62312 508.37414 883.36743 507.51071 883.36743 C
507.29074 883.36743 507.13824 883.36743 507.01975 883.38444 C
506.90126 883.40145 506.76576 883.43575 506.61354 883.46976 C
506.61354 884.84967 L
506.86724 884.76435 507.05348 884.73033 507.17225 884.71332 C
507.29074 884.69631 507.39222 884.67931 507.47698 884.67931 C
507.74769 884.67931 507.95065 884.73033 508.08614 884.81537 C
508.20491 884.90069 508.32312 885.02003 508.40787 885.15609 C
508.44161 885.20740 508.54337 885.42879 508.71260 885.83754 C
508.88211 886.24658 509.00031 886.55301 509.08507 886.75767 C
505.80085 895.92265 L
507.49370 895.92265 L
509.86375 888.66539 L
512.25080 895.92265 L
@c
F

@rax %Note: Object
475.66460 883.09502 559.67726 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
514.89156 895.92265 m
516.29698 895.92265 L
516.29698 894.38939 L
516.41518 894.67909 516.70318 895.05383 517.16013 895.47959 C
517.61735 895.90564 518.12532 896.12702 518.71748 896.12702 C
518.73477 896.12702 518.78551 896.12702 518.85298 896.11002 C
518.92101 896.11002 519.03921 896.09301 519.19172 896.07600 C
519.19172 894.49172 L
519.10724 894.50872 519.02249 894.52573 518.95474 894.52573 C
518.86998 894.54274 518.78551 894.54274 518.70076 894.54274 C
517.95581 894.54274 517.38038 894.30435 516.97389 893.81027 C
516.58469 893.31619 516.38145 892.77109 516.38145 892.14066 C
516.38145 887.01307 L
514.89156 887.01307 L
514.89156 895.92265 L
@c
F

@rax %Note: Object
475.66460 883.09502 559.67726 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
519.97039 895.88863 m
521.49402 895.88863 L
521.49402 887.01307 L
519.97039 887.01307 L
519.97039 895.88863 L
@c
519.97039 899.22756 m
521.49402 899.22756 L
521.49402 897.54094 L
519.97039 897.54094 L
519.97039 899.22756 L
@c
F

@rax %Note: Object
475.66460 883.09502 559.67726 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
527.20186 896.07600 m
527.89606 896.07600 528.50551 895.90564 529.01348 895.56491 C
529.30120 895.37754 529.58891 895.08784 529.87663 894.71310 C
529.87663 895.83732 L
531.24775 895.83732 L
531.24775 887.72854 L
531.24775 886.60431 531.07852 885.71849 530.75707 885.05405 C
530.13061 883.84450 528.96246 883.24838 527.25260 883.24838 C
526.30469 883.24838 525.50901 883.46976 524.84882 883.89553 C
524.20564 884.32157 523.84989 884.98573 523.76513 885.90586 C
525.27203 885.90586 L
525.35679 885.51383 525.49200 885.20740 525.71225 884.98573 C
526.03370 884.66230 526.55839 884.49194 527.28661 884.49194 C
528.42076 884.49194 529.18271 884.90069 529.53817 885.70148 C
529.74142 886.17827 529.84290 887.03008 529.82589 888.25663 C
529.52117 887.79657 529.16570 887.45613 528.74249 887.23446 C
528.31928 887.01307 527.77729 886.91074 527.08337 886.91074 C
526.11846 886.91074 525.28904 887.25146 524.57783 887.93291 C
523.84989 888.61436 523.49443 889.73887 523.49443 891.32315 C
523.49443 892.82211 523.84989 893.98063 524.57783 894.81515 C
525.30576 895.64995 526.16920 896.07600 527.20186 896.07600 C
@c
529.87663 891.51052 m
529.87663 892.61773 529.65666 893.43553 529.19972 893.96362 C
528.74249 894.49172 528.16706 894.76413 527.47285 894.76413 C
526.42318 894.76413 525.71225 894.27005 525.32277 893.28217 C
525.11953 892.75408 525.01833 892.05562 525.01833 891.20381 C
525.01833 890.19865 525.22129 889.44917 525.62750 888.92107 C
526.03370 888.39298 526.57569 888.12028 527.25260 888.12028 C
528.31928 888.12028 529.08094 888.61436 529.52117 889.58551 C
529.75814 890.13061 529.87663 890.77776 529.87663 891.51052 C
@c
F

@rax %Note: Object
475.66460 883.09502 559.67726 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
533.99055 899.27858 m
535.48016 899.27858 L
535.48016 894.71310 L
535.83591 895.17288 536.15735 895.47959 536.42806 895.66696 C
536.91931 895.99068 537.51146 896.14403 538.22268 896.14403 C
539.50932 896.14403 540.38976 895.68397 540.84643 894.78113 C
541.10069 894.28706 541.21918 893.60589 541.21918 892.71978 C
541.21918 887.01307 L
539.67855 887.01307 L
539.67855 892.63474 L
539.67855 893.28217 539.59380 893.75896 539.44157 894.06567 C
539.17087 894.55975 538.66290 894.79814 537.91795 894.79814 C
537.29150 894.79814 536.73307 894.57676 536.24211 894.15099 C
535.73414 893.72494 535.48016 892.92444 535.48016 891.73191 C
535.48016 887.01307 L
533.99055 887.01307 L
533.99055 899.27858 L
@c
F

@rax %Note: Object
475.66460 883.09502 559.67726 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
543.19975 898.40976 m
544.70665 898.40976 L
544.70665 895.92265 L
546.11178 895.92265 L
546.11178 894.69609 L
544.70665 894.69609 L
544.70665 888.88706 L
544.70665 888.58035 544.80784 888.37597 545.01109 888.25663 C
545.12957 888.20561 545.33282 888.17159 545.60381 888.17159 C
545.67128 888.17159 545.73931 888.17159 545.82378 888.17159 C
545.90825 888.17159 546.01002 888.17159 546.11178 888.18860 C
546.11178 887.01307 L
545.94227 886.96205 545.77304 886.92803 545.58680 886.91074 C
545.40057 886.89373 545.21405 886.87672 544.99408 886.87672 C
544.30016 886.87672 543.82620 887.04709 543.57222 887.40482 C
543.31852 887.76255 543.19975 888.23962 543.19975 888.80173 C
543.19975 894.69609 L
541.99786 894.69609 L
541.99786 895.92265 L
543.19975 895.92265 L
543.19975 898.40976 L
@c
F

@rax %Note: Object
544.75852 884.08091 562.30526 899.54419 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
549.82743 897.08967 m
550.68009 897.08967 551.50554 896.86800 552.31710 896.42523 C
553.12866 895.99606 553.76135 895.35940 554.21490 894.54274 C
554.66901 893.72608 554.88926 892.88164 554.88926 891.98220 C
554.88926 891.10998 554.66901 890.26583 554.22879 889.44917 C
553.77496 888.63250 553.15587 888.00973 552.34431 887.56668 C
551.54665 887.11002 550.70759 886.88863 549.82743 886.88863 C
548.94699 886.88863 548.10794 887.11002 547.31027 887.56668 C
546.49871 888.00973 545.87962 888.63250 545.42580 889.44917 C
544.97197 890.26583 544.75172 891.10998 544.75172 891.98220 C
544.75172 892.88164 544.98557 893.72608 545.43940 894.54274 C
545.89351 895.35940 546.52620 895.99606 547.33776 896.42523 C
548.14932 896.86800 548.97449 897.08967 549.82743 897.08967 C
@c
549.82743 896.24523 m
549.11225 896.24523 548.42428 896.06523 547.75049 895.69162 C
547.07641 895.31773 546.55342 894.79191 546.16847 894.11357 C
545.79713 893.43553 545.60466 892.71581 545.60466 891.98220 C
545.60466 891.24860 545.78353 890.55638 546.15458 889.87833 C
546.52620 889.20000 547.04891 888.67389 547.72299 888.30028 C
548.39707 887.92668 549.09836 887.73279 549.82743 887.73279 C
550.55650 887.73279 551.25780 887.92668 551.93187 888.30028 C
552.60567 888.67389 553.12866 889.20000 553.49972 889.87833 C
553.87106 890.55638 554.04992 891.24860 554.04992 891.98220 C
554.04992 892.71581 553.85745 893.43553 553.48611 894.11357 C
553.11477 894.79191 552.57846 895.31773 551.90438 895.69162 C
551.23030 896.06523 550.52872 896.24523 549.82743 896.24523 C
@c
551.45055 891.16554 m
552.27572 890.91638 L
552.15184 890.34888 551.86299 889.90583 551.42277 889.57361 C
550.98255 889.22778 550.46013 889.06167 549.84132 889.06167 C
549.05698 889.06167 548.41039 889.32444 547.91518 889.83666 C
547.42025 890.34888 547.17279 891.06860 547.17279 891.96831 C
547.17279 892.56331 547.28249 893.08942 547.51635 893.51858 C
547.73660 893.96135 548.05294 894.29357 548.46567 894.51496 C
548.87839 894.73663 549.35972 894.84718 549.89603 894.84718 C
550.48762 894.84718 550.96923 894.70885 551.36806 894.41830 C
551.76690 894.12746 552.02797 893.73997 552.17934 893.25553 C
551.38139 893.06164 L
551.24391 893.39386 551.05172 893.64302 550.79008 893.82302 C
550.52872 894.00302 550.21238 894.09969 549.86854 894.09969 C
549.34611 894.09969 548.91950 893.91997 548.58926 893.54608 C
548.25931 893.17247 548.09405 892.64636 548.09405 891.95443 C
548.09405 891.26249 548.24542 890.73638 548.56176 890.39027 C
548.87839 890.04444 549.29083 889.86444 549.78605 889.86444 C
550.18488 889.86444 550.54261 889.97499 550.84507 890.21027 C
551.16142 890.44583 551.35417 890.76416 551.45055 891.16554 C
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
560.08403 887.01307 m
560.13477 888.03524 560.35502 888.92107 560.72750 889.68756 C
561.08296 890.45433 561.79389 891.13550 562.86057 891.76592 C
564.45165 892.68576 L
565.16287 893.11181 565.65383 893.46954 565.94154 893.75896 C
566.39849 894.21902 566.61846 894.73011 566.61846 895.32624 C
566.61846 896.02469 566.41550 896.56980 566.00929 896.97883 C
565.58608 897.38759 565.04409 897.59197 564.35017 897.59197 C
563.33452 897.59197 562.62359 897.20022 562.23411 896.43373 C
562.03087 896.00769 561.91238 895.42857 561.89537 894.69609 C
560.37203 894.69609 L
560.38904 895.73528 560.59200 896.56980 560.94746 897.23424 C
561.59093 898.39276 562.72507 898.97187 564.36718 898.97187 C
565.72129 898.97187 566.70321 898.59713 567.32995 897.86466 C
567.95613 897.13219 568.27786 896.29739 568.27786 895.39455 C
568.27786 894.44041 567.93912 893.62290 567.27893 892.95846 C
566.88945 892.56671 566.19553 892.08964 565.19660 891.52753 C
564.06246 890.89710 L
563.52076 890.59039 563.09726 890.30098 562.79282 890.02828 C
562.23411 889.55121 561.89537 889.02312 561.74343 888.42699 C
568.21011 888.42699 L
568.21011 887.01307 L
560.08403 887.01307 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
573.39014 898.92085 m
574.91376 898.92085 576.01417 898.29043 576.70809 897.01285 C
577.23307 896.04170 577.50406 894.69609 577.50406 892.99247 C
577.50406 891.37417 577.26709 890.02828 576.77613 888.97209 C
576.08192 887.45613 574.94778 886.68935 573.37313 886.68935 C
571.95128 886.68935 570.90161 887.30277 570.20769 888.54633 C
569.61524 889.58551 569.32724 890.98243 569.32724 892.71978 C
569.32724 894.08268 569.49647 895.24120 569.85222 896.21206 C
570.51241 898.01802 571.68028 898.92085 573.39014 898.92085 C
@c
573.37313 888.05225 m
574.13537 888.05225 574.74454 888.39298 575.20176 889.09143 C
575.65871 889.77288 575.89597 891.05046 575.89597 892.92444 C
575.89597 894.27005 575.72646 895.39455 575.40472 896.26337 C
575.06627 897.13219 574.42280 897.57496 573.47490 897.57496 C
572.59474 897.57496 571.95128 897.16620 571.54507 896.33140 C
571.13858 895.49660 570.93562 894.28706 570.93562 892.66876 C
570.93562 891.45921 571.07112 890.47134 571.32482 889.73887 C
571.73131 888.61436 572.40850 888.05225 573.37313 888.05225 C
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
579.84009 895.44557 m
579.84009 896.60409 L
580.90649 896.70614 581.66844 896.87650 582.09165 897.13219 C
582.51515 897.37058 582.81959 897.94970 583.03984 898.86983 C
584.20772 898.86983 L
584.20772 887.01307 L
582.61635 887.01307 L
582.61635 895.44557 L
579.84009 895.44557 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
589.70976 889.89194 m
589.76050 889.05742 590.06523 888.49502 590.65767 888.17159 C
590.96239 888.01824 591.30113 887.93291 591.69033 887.93291 C
592.40126 887.93291 593.01099 888.22261 593.50195 888.81874 C
593.99263 889.41515 594.34809 890.62469 594.56835 892.44737 C
594.24661 891.91928 593.82340 891.56154 593.33272 891.34016 C
592.84176 891.11849 592.31679 891.01644 591.75836 891.01644 C
590.62394 891.01644 589.70976 891.37417 589.04957 892.08964 C
588.38910 892.80510 588.06737 893.72494 588.06737 894.84945 C
588.06737 895.93965 588.38910 896.89351 589.04957 897.71131 C
589.70976 898.52910 590.67468 898.93786 591.94431 898.93786 C
593.67118 898.93786 594.85606 898.15408 595.51625 896.60409 C
595.87172 895.73528 596.05795 894.66208 596.05795 893.36721 C
596.05795 891.91928 595.83798 890.62469 595.41477 889.50019 C
594.68683 887.60920 593.46794 886.67235 591.74135 886.67235 C
590.57320 886.67235 589.69276 886.97906 589.10031 887.59219 C
588.50787 888.20561 588.20287 888.97209 588.20287 889.89194 C
589.70976 889.89194 L
@c
591.96132 892.34504 m
592.55376 892.34504 593.09546 892.53241 593.58643 892.92444 C
594.07739 893.31619 594.31436 893.99764 594.31436 894.96850 C
594.31436 895.83732 594.09439 896.50176 593.65417 896.92753 C
593.21395 897.35357 592.65553 897.57496 591.97833 897.57496 C
591.25039 897.57496 590.67468 897.33657 590.25146 896.84249 C
589.82825 896.34841 589.60800 895.70098 589.60800 894.86646 C
589.60800 894.09969 589.79424 893.48655 590.16699 893.02649 C
590.53946 892.56671 591.13162 892.34504 591.96132 892.34504 C
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
603.82290 899.22756 m
607.31008 888.81874 L
610.74680 899.22756 L
612.59187 899.22756 L
608.17351 887.01307 L
606.42992 887.01307 L
601.99427 899.22756 L
603.82290 899.22756 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
616.87757 896.12702 m
617.50403 896.12702 618.11348 895.97367 618.70620 895.68397 C
619.29836 895.37754 619.73887 894.98551 620.06060 894.52573 C
620.34803 894.06567 620.55128 893.55458 620.65276 892.95846 C
620.73751 892.54970 620.78825 891.88526 620.78825 890.98243 C
614.28784 890.98243 L
614.32157 890.07931 614.54154 889.36384 614.93074 888.81874 C
615.32022 888.27364 615.94668 888.00123 616.77609 888.00123 C
617.55477 888.00123 618.18123 888.25663 618.63817 888.76772 C
618.89244 889.05742 619.07839 889.41515 619.19717 889.80690 C
620.65276 889.80690 L
620.61902 889.48318 620.50054 889.10844 620.28057 888.71669 C
620.06060 888.30765 619.80633 887.98422 619.53562 887.72854 C
619.07839 887.28576 618.51997 886.97906 617.85950 886.82570 C
617.50403 886.74038 617.11483 886.68935 616.65761 886.68935 C
615.55748 886.68935 614.60929 887.09811 613.84734 887.89890 C
613.08567 888.71669 612.69619 889.84091 612.69619 891.28885 C
612.69619 892.71978 613.08567 893.87830 613.86435 894.78113 C
614.62602 895.68397 615.64195 896.12702 616.87757 896.12702 C
@c
619.24791 892.17468 m
619.19717 892.82211 619.04466 893.35020 618.82469 893.74195 C
618.41820 894.45742 617.74101 894.81515 616.79310 894.81515 C
616.09890 894.81515 615.52346 894.55975 615.06624 894.06567 C
614.60929 893.57159 614.35531 892.94145 614.33858 892.17468 C
619.24791 892.17468 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
626.01931 896.17805 m
627.01824 896.17805 627.83065 895.93965 628.45710 895.44557 C
629.08328 894.95150 629.45575 894.11669 629.59124 892.92444 C
628.13537 892.92444 L
628.05061 893.48655 627.84765 893.92932 627.52592 894.28706 C
627.22148 894.64479 626.71351 894.83244 626.01931 894.83244 C
625.07112 894.83244 624.39392 894.37238 623.98772 893.43553 C
623.73402 892.83912 623.59852 892.08964 623.59852 891.20381 C
623.59852 890.30098 623.78476 889.55121 624.15723 888.95509 C
624.52942 888.34195 625.12214 888.03524 625.91783 888.03524 C
626.54428 888.03524 627.03524 888.22261 627.39071 888.61436 C
627.74617 888.98910 627.99987 889.50019 628.13537 890.16463 C
629.59124 890.16463 L
629.42202 888.98910 628.99880 888.12028 628.33861 887.57518 C
627.67843 887.03008 626.83172 886.75767 625.79934 886.75767 C
624.64819 886.75767 623.73402 887.18343 623.03981 888.03524 C
622.34589 888.88706 622.00715 889.94324 622.00715 891.22082 C
622.00715 892.78809 622.37962 893.99764 623.14129 894.86646 C
623.90324 895.73528 624.85115 896.17805 626.01931 896.17805 C
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
637.26038 893.63991 m
638.02205 893.63991 638.63178 893.79326 639.08844 894.09969 C
639.54567 894.40639 639.76564 894.96850 639.76564 895.78630 C
639.76564 896.65512 639.44419 897.23424 638.81773 897.55795 C
638.47928 897.72831 638.02205 897.81335 637.46334 897.81335 C
633.45118 897.81335 L
633.45118 893.63991 L
637.26038 893.63991 L
@c
631.80935 899.22756 m
637.42961 899.22756 L
638.36079 899.22756 639.12246 899.09121 639.71490 898.81852 C
640.84904 898.29043 641.42504 897.33657 641.42504 895.93965 C
641.42504 895.20718 641.27254 894.59376 640.98454 894.13398 C
640.67981 893.67392 640.25660 893.29918 639.71490 893.02649 C
640.18913 892.82211 640.54460 892.56671 640.78157 892.26000 C
641.03528 891.93628 641.17077 891.42520 641.18778 890.70973 C
641.25553 889.07443 L
641.27254 888.61436 641.30627 888.25663 641.35701 888.03524 C
641.45877 887.64350 641.64501 887.40482 641.89871 887.28576 C
641.89871 887.01307 L
639.86740 887.01307 L
639.81638 887.11540 639.78265 887.25146 639.74891 887.42183 C
639.71490 887.59219 639.68117 887.91591 639.66444 888.39298 C
639.56268 890.42003 L
639.51194 891.22082 639.22394 891.76592 638.68224 892.02161 C
638.36079 892.17468 637.86954 892.26000 637.19235 892.26000 C
633.45118 892.26000 L
633.45118 887.01307 L
631.80935 887.01307 L
631.80935 899.22756 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
645.11830 889.38085 m
645.11830 888.95509 645.27052 888.61436 645.59225 888.35896 C
645.91370 888.10328 646.28617 887.98422 646.70939 887.98422 C
647.23436 887.98422 647.72532 888.10328 648.21628 888.35896 C
649.04542 888.75071 649.46891 889.41515 649.46891 890.33499 C
649.46891 891.54454 L
649.28268 891.42520 649.04542 891.34016 648.75798 891.25483 C
648.46998 891.16980 648.19899 891.11849 647.91156 891.08447 C
647.01439 890.96542 L
646.47269 890.89710 646.06620 890.77776 645.79550 890.62469 C
645.33827 890.36901 645.11830 889.94324 645.11830 889.38085 C
@c
648.72397 892.41335 m
649.06243 892.46438 649.28268 892.60072 649.40117 892.83912 C
649.46891 892.97546 649.50265 893.16283 649.50265 893.41824 C
649.50265 893.92932 649.31641 894.30435 648.96094 894.52573 C
648.60548 894.74712 648.08079 894.86646 647.42060 894.86646 C
646.64192 894.86646 646.08293 894.66208 645.76120 894.23603 C
645.57496 894.01465 645.45676 893.65691 645.40573 893.19685 C
644.01761 893.19685 L
644.03490 894.30435 644.39036 895.07083 645.08428 895.49660 C
645.76120 895.92265 646.55717 896.14403 647.45433 896.14403 C
648.48699 896.14403 649.33342 895.93965 649.97688 895.53090 C
650.63679 895.13887 650.95852 894.50872 650.95852 893.67392 C
650.95852 888.54633 L
650.95852 888.39298 650.99225 888.25663 651.04328 888.17159 C
651.11102 888.08627 651.24652 888.03524 651.44948 888.03524 C
651.51723 888.03524 651.58498 888.03524 651.66945 888.03524 C
651.75420 888.05225 651.83868 888.06926 651.94044 888.08627 C
651.94044 886.97906 L
651.70346 886.91074 651.51723 886.85972 651.39874 886.84271 C
651.28025 886.82570 651.12775 886.82570 650.90778 886.82570 C
650.39981 886.82570 650.02762 887.01307 649.79065 887.37080 C
649.67216 887.55817 649.58712 887.83087 649.53666 888.18860 C
649.23165 887.79657 648.79172 887.43883 648.23301 887.14942 C
647.67430 886.85972 647.04813 886.70636 646.35392 886.70636 C
645.52450 886.70636 644.86403 886.96205 644.33934 887.47313 C
643.81465 887.96693 643.56066 888.59735 643.56066 889.34683 C
643.56066 890.18164 643.81465 890.81206 644.32233 891.27184 C
644.84731 891.73191 645.52450 892.00431 646.35392 892.10665 C
648.72397 892.41335 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
654.61521 889.80690 m
654.66624 889.31282 654.78444 888.92107 654.98769 888.66539 C
655.36016 888.17159 656.00334 887.93291 656.93452 887.93291 C
657.49323 887.93291 657.96746 888.05225 658.39039 888.29065 C
658.81361 888.54633 659.01685 888.92107 659.01685 889.41515 C
659.01685 889.80690 658.84762 890.09660 658.50888 890.28397 C
658.28863 890.40302 657.86570 890.55638 657.23924 890.70973 C
656.05436 891.01644 L
655.29241 891.20381 654.75071 891.40819 654.39524 891.64658 C
653.75178 892.05562 653.43033 892.61773 653.43033 893.33320 C
653.43033 894.16800 653.73477 894.84945 654.32750 895.37754 C
654.93694 895.90564 655.74964 896.16104 656.76529 896.16104 C
658.10268 896.16104 659.06759 895.76929 659.66003 894.96850 C
660.01550 894.47443 660.20173 893.92932 660.18472 893.36721 C
658.77959 893.36721 L
658.76287 893.69093 658.64409 893.99764 658.42413 894.28706 C
658.08567 894.67909 657.49323 894.86646 656.64680 894.86646 C
656.08809 894.86646 655.66488 894.76413 655.37717 894.54274 C
655.08917 894.32135 654.93694 894.04866 654.93694 893.69093 C
654.93694 893.29918 655.12318 892.99247 655.51238 892.75408 C
655.73263 892.61773 656.05436 892.49839 656.49430 892.39635 C
657.47622 892.15767 L
658.54290 891.90227 659.25383 891.64658 659.62630 891.39118 C
660.20173 891.01644 660.48973 890.42003 660.48973 889.58551 C
660.48973 888.80173 660.18472 888.12028 659.59228 887.54117 C
658.99984 886.96205 658.08567 886.67235 656.86677 886.67235 C
655.54639 886.67235 654.61521 886.97906 654.05650 887.57518 C
653.51480 888.17159 653.22709 888.92107 653.17635 889.80690 C
654.61521 889.80690 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
673.38397 899.56800 m
674.92431 899.56800 676.12649 899.15924 676.97291 898.34173 C
677.81934 897.52394 678.29357 896.60409 678.37805 895.56491 C
676.78668 895.56491 L
676.60044 896.34841 676.24498 896.97883 675.68627 897.43861 C
675.14457 897.89868 674.38261 898.12006 673.40098 898.12006 C
672.19909 898.12006 671.23389 897.69430 670.50595 896.85950 C
669.77802 896.00769 669.40583 894.71310 669.40583 892.97546 C
669.40583 891.54454 669.74428 890.38602 670.40476 889.48318 C
671.06466 888.59735 672.06359 888.15430 673.36724 888.15430 C
674.58614 888.15430 675.51704 888.61436 676.14321 889.55121 C
676.48195 890.04529 676.73594 890.70973 676.88844 891.51052 C
678.49654 891.51052 L
678.34403 890.21565 677.87008 889.14246 677.07468 888.27364 C
676.10948 887.21745 674.82312 886.68935 673.18101 886.68935 C
671.77559 886.68935 670.59071 887.11540 669.62580 887.98422 C
668.35616 889.12545 667.72970 890.88009 667.72970 893.24816 C
667.72970 895.05383 668.20365 896.53578 669.15156 897.67729 C
670.18422 898.93786 671.58935 899.56800 673.38397 899.56800 C
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
680.85241 895.92265 m
682.25783 895.92265 L
682.25783 894.38939 L
682.37603 894.67909 682.66403 895.05383 683.12069 895.47959 C
683.57792 895.90564 684.08589 896.12702 684.67833 896.12702 C
684.69534 896.12702 684.74608 896.12702 684.81383 896.11002 C
684.88157 896.11002 685.00006 896.09301 685.15228 896.07600 C
685.15228 894.49172 L
685.06781 894.50872 684.98306 894.52573 684.91559 894.52573 C
684.83055 894.54274 684.74608 894.54274 684.66132 894.54274 C
683.91666 894.54274 683.34123 894.30435 682.93474 893.81027 C
682.54526 893.31619 682.34230 892.77109 682.34230 892.14066 C
682.34230 887.01307 L
680.85241 887.01307 L
680.85241 895.92265 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
689.45216 896.12702 m
690.07861 896.12702 690.68806 895.97367 691.28050 895.68397 C
691.87294 895.37754 692.31317 894.98551 692.63490 894.52573 C
692.92261 894.06567 693.12557 893.55458 693.22734 892.95846 C
693.31181 892.54970 693.36283 891.88526 693.36283 890.98243 C
686.86214 890.98243 L
686.89616 890.07931 687.11613 889.36384 687.50532 888.81874 C
687.89452 888.27364 688.52126 888.00123 689.35068 888.00123 C
690.12935 888.00123 690.75581 888.25663 691.21276 888.76772 C
691.46674 889.05742 691.65298 889.41515 691.77146 889.80690 C
693.22734 889.80690 L
693.19361 889.48318 693.07512 889.10844 692.85487 888.71669 C
692.63490 888.30765 692.38091 887.98422 692.11020 887.72854 C
691.65298 887.28576 691.09427 886.97906 690.43408 886.82570 C
690.07861 886.74038 689.68942 886.68935 689.23219 886.68935 C
688.13178 886.68935 687.18359 887.09811 686.42192 887.89890 C
685.66025 888.71669 685.27077 889.84091 685.27077 891.28885 C
685.27077 892.71978 685.66025 893.87830 686.43893 894.78113 C
687.20060 895.68397 688.21625 896.12702 689.45216 896.12702 C
@c
691.82220 892.17468 m
691.77146 892.82211 691.61924 893.35020 691.39928 893.74195 C
690.99279 894.45742 690.31559 894.81515 689.36769 894.81515 C
688.67348 894.81515 688.09805 894.55975 687.64082 894.06567 C
687.18359 893.57159 686.92989 892.94145 686.91288 892.17468 C
691.82220 892.17468 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
696.32532 889.38085 m
696.32532 888.95509 696.47783 888.61436 696.79956 888.35896 C
697.12101 888.10328 697.49348 887.98422 697.91669 887.98422 C
698.44139 887.98422 698.93263 888.10328 699.42359 888.35896 C
700.25272 888.75071 700.67622 889.41515 700.67622 890.33499 C
700.67622 891.54454 L
700.48998 891.42520 700.25272 891.34016 699.96529 891.25483 C
699.67729 891.16980 699.40630 891.11849 699.11858 891.08447 C
698.22142 890.96542 L
697.67972 890.89710 697.27323 890.77776 697.00252 890.62469 C
696.54557 890.36901 696.32532 889.94324 696.32532 889.38085 C
@c
699.93099 892.41335 m
700.26973 892.46438 700.48998 892.60072 700.60819 892.83912 C
700.67622 892.97546 700.70995 893.16283 700.70995 893.41824 C
700.70995 893.92932 700.52372 894.30435 700.16825 894.52573 C
699.81279 894.74712 699.28809 894.86646 698.62762 894.86646 C
697.84923 894.86646 697.29024 894.66208 696.96850 894.23603 C
696.78227 894.01465 696.66406 893.65691 696.61304 893.19685 C
695.22491 893.19685 L
695.24192 894.30435 695.59767 895.07083 696.29159 895.49660 C
696.96850 895.92265 697.76447 896.14403 698.66164 896.14403 C
699.69430 896.14403 700.54072 895.93965 701.18419 895.53090 C
701.84409 895.13887 702.16583 894.50872 702.16583 893.67392 C
702.16583 888.54633 L
702.16583 888.39298 702.19956 888.25663 702.25058 888.17159 C
702.31805 888.08627 702.45354 888.03524 702.65679 888.03524 C
702.72425 888.03524 702.79228 888.03524 702.87676 888.03524 C
702.96151 888.05225 703.04598 888.06926 703.14775 888.08627 C
703.14775 886.97906 L
702.91077 886.91074 702.72425 886.85972 702.60605 886.84271 C
702.48756 886.82570 702.33506 886.82570 702.11509 886.82570 C
701.60712 886.82570 701.23465 887.01307 700.99795 887.37080 C
700.87918 887.55817 700.79443 887.83087 700.74369 888.18860 C
700.43896 887.79657 699.99902 887.43883 699.44031 887.14942 C
698.88161 886.85972 698.25543 886.70636 697.56123 886.70636 C
696.73153 886.70636 696.07134 886.96205 695.54665 887.47313 C
695.02167 887.96693 694.76797 888.59735 694.76797 889.34683 C
694.76797 890.18164 695.02167 890.81206 695.52964 891.27184 C
696.05433 891.73191 696.73153 892.00431 697.56123 892.10665 C
699.93099 892.41335 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
705.23008 898.40976 m
706.73669 898.40976 L
706.73669 895.92265 L
708.14183 895.92265 L
708.14183 894.69609 L
706.73669 894.69609 L
706.73669 888.88706 L
706.73669 888.58035 706.83817 888.37597 707.04142 888.25663 C
707.15991 888.20561 707.36315 888.17159 707.63414 888.17159 C
707.70161 888.17159 707.76964 888.17159 707.85411 888.17159 C
707.93858 888.17159 708.04035 888.17159 708.14183 888.18860 C
708.14183 887.01307 L
707.97260 886.96205 707.80337 886.92803 707.61713 886.91074 C
707.43090 886.89373 707.24438 886.87672 707.02441 886.87672 C
706.33020 886.87672 705.85654 887.04709 705.60255 887.40482 C
705.34857 887.76255 705.23008 888.23962 705.23008 888.80173 C
705.23008 894.69609 L
704.02819 894.69609 L
704.02819 895.92265 L
705.23008 895.92265 L
705.23008 898.40976 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
709.28731 895.88863 m
710.81093 895.88863 L
710.81093 887.01307 L
709.28731 887.01307 L
709.28731 895.88863 L
@c
709.28731 899.22756 m
710.81093 899.22756 L
710.81093 897.54094 L
709.28731 897.54094 L
709.28731 899.22756 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
716.90825 887.98422 m
717.89017 887.98422 718.56737 888.35896 718.93984 889.10844 C
719.29531 889.85792 719.48154 890.69272 719.48154 891.61257 C
719.48154 892.44737 719.34605 893.11181 719.09206 893.63991 C
718.66885 894.45742 717.95764 894.86646 716.92498 894.86646 C
716.01109 894.86646 715.35061 894.52573 714.94441 893.82728 C
714.52148 893.12882 714.31824 892.27701 714.31824 891.28885 C
714.31824 890.35200 714.52148 889.55121 714.94441 888.92107 C
715.35061 888.29065 716.01109 887.98422 716.90825 887.98422 C
@c
716.95928 896.17805 m
718.09313 896.17805 719.05833 895.80331 719.85373 895.03682 C
720.64970 894.27005 721.03890 893.12882 721.03890 891.64658 C
721.03890 890.21565 720.70044 889.02312 720.00624 888.08627 C
719.31203 887.14942 718.22863 886.68935 716.77304 886.68935 C
715.55414 886.68935 714.58894 887.09811 713.86101 887.93291 C
713.15008 888.76772 712.79461 889.87493 712.79461 891.27184 C
712.79461 892.77109 713.16709 893.96362 713.92876 894.84945 C
714.69071 895.73528 715.68935 896.17805 716.95928 896.17805 C
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
722.29153 895.92265 m
723.71367 895.92265 L
723.71367 894.66208 L
724.13688 895.19017 724.57710 895.56491 725.05106 895.78630 C
725.50828 896.00769 726.03298 896.12702 726.60869 896.12702 C
727.86132 896.12702 728.70775 895.68397 729.14769 894.79814 C
729.40195 894.32135 729.52044 893.62290 729.52044 892.71978 C
729.52044 887.01307 L
727.99682 887.01307 L
727.99682 892.63474 L
727.99682 893.16283 727.91206 893.60589 727.75984 893.94633 C
727.50586 894.50872 727.01461 894.78113 726.32069 894.78113 C
725.96523 894.78113 725.67751 894.74712 725.45726 894.66208 C
725.05106 894.54274 724.69559 894.28706 724.39087 893.92932 C
724.13688 893.63991 723.98466 893.33320 723.89991 893.02649 C
723.81515 892.70277 723.78142 892.26000 723.78142 891.68088 C
723.78142 887.01307 L
722.29153 887.01307 L
722.29153 895.92265 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
732.26268 889.80690 m
732.31370 889.31282 732.43191 888.92107 732.63515 888.66539 C
733.00791 888.17159 733.65080 887.93291 734.58227 887.93291 C
735.14069 887.93291 735.61493 888.05225 736.03786 888.29065 C
736.46107 888.54633 736.66431 888.92107 736.66431 889.41515 C
736.66431 889.80690 736.49509 890.09660 736.15663 890.28397 C
735.93638 890.40302 735.51317 890.55638 734.88671 890.70973 C
733.70183 891.01644 L
732.93987 891.20381 732.39817 891.40819 732.04271 891.64658 C
731.39924 892.05562 731.07780 892.61773 731.07780 893.33320 C
731.07780 894.16800 731.38252 894.84945 731.97496 895.37754 C
732.58441 895.90564 733.39710 896.16104 734.41276 896.16104 C
735.75014 896.16104 736.71506 895.76929 737.30750 894.96850 C
737.66296 894.47443 737.84920 893.92932 737.83219 893.36721 C
736.42734 893.36721 L
736.41033 893.69093 736.29184 893.99764 736.07187 894.28706 C
735.73313 894.67909 735.14069 894.86646 734.29427 894.86646 C
733.73556 894.86646 733.31235 894.76413 733.02463 894.54274 C
732.73691 894.32135 732.58441 894.04866 732.58441 893.69093 C
732.58441 893.29918 732.77065 892.99247 733.15984 892.75408 C
733.38009 892.61773 733.70183 892.49839 734.14176 892.39635 C
735.12397 892.15767 L
736.19036 891.90227 736.90129 891.64658 737.27376 891.39118 C
737.84920 891.01644 738.13720 890.42003 738.13720 889.58551 C
738.13720 888.80173 737.83219 888.12028 737.24003 887.54117 C
736.64731 886.96205 735.73313 886.67235 734.51424 886.67235 C
733.19386 886.67235 732.26268 886.97906 731.70397 887.57518 C
731.16227 888.17159 730.87455 888.92107 730.82381 889.80690 C
732.26268 889.80690 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
746.07137 899.22756 m
751.53940 899.22756 L
752.62280 899.22756 753.50324 898.92085 754.16343 898.30743 C
754.82334 897.69430 755.14507 896.84249 755.14507 895.73528 C
755.14507 894.78113 754.85764 893.94633 754.26491 893.23087 C
753.67247 892.53241 752.77531 892.17468 751.53940 892.17468 C
747.73049 892.17468 L
747.73049 887.01307 L
746.07137 887.01307 L
746.07137 899.22756 L
@c
753.48624 895.71827 m
753.48624 896.62110 753.14778 897.23424 752.48731 897.55795 C
752.13184 897.72831 751.62387 897.81335 750.99742 897.81335 C
747.73049 897.81335 L
747.73049 893.57159 L
750.99742 893.57159 L
751.72564 893.57159 752.33509 893.72494 752.79231 894.04866 C
753.24898 894.37238 753.48624 894.91748 753.48624 895.71827 C
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
756.71660 895.92265 m
758.12202 895.92265 L
758.12202 894.38939 L
758.24050 894.67909 758.52822 895.05383 758.98517 895.47959 C
759.44239 895.90564 759.95036 896.12702 760.54280 896.12702 C
760.55981 896.12702 760.61055 896.12702 760.67830 896.11002 C
760.74605 896.11002 760.86425 896.09301 761.01676 896.07600 C
761.01676 894.49172 L
760.93228 894.50872 760.84753 894.52573 760.77978 894.52573 C
760.69502 894.54274 760.61055 894.54274 760.52580 894.54274 C
759.78085 894.54274 759.20542 894.30435 758.79893 893.81027 C
758.40973 893.31619 758.20649 892.77109 758.20649 892.14066 C
758.20649 887.01307 L
756.71660 887.01307 L
756.71660 895.92265 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
761.79543 895.88863 m
763.31906 895.88863 L
763.31906 887.01307 L
761.79543 887.01307 L
761.79543 895.88863 L
@c
761.79543 899.22756 m
763.31906 899.22756 L
763.31906 897.54094 L
761.79543 897.54094 L
761.79543 899.22756 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
766.62312 895.92265 m
768.99317 888.66539 L
771.46469 895.92265 L
773.08980 895.92265 L
769.75483 887.01307 L
768.16346 887.01307 L
764.89625 895.92265 L
766.62312 895.92265 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
775.17241 889.38085 m
775.17241 888.95509 775.32491 888.61436 775.64636 888.35896 C
775.96781 888.10328 776.34028 887.98422 776.76378 887.98422 C
777.28847 887.98422 777.77943 888.10328 778.27039 888.35896 C
779.09981 888.75071 779.52302 889.41515 779.52302 890.33499 C
779.52302 891.54454 L
779.33707 891.42520 779.09981 891.34016 778.81209 891.25483 C
778.52438 891.16980 778.25339 891.11849 777.96567 891.08447 C
777.06850 890.96542 L
776.52680 890.89710 776.12031 890.77776 775.84961 890.62469 C
775.39238 890.36901 775.17241 889.94324 775.17241 889.38085 C
@c
778.77808 892.41335 m
779.11654 892.46438 779.33707 892.60072 779.45528 892.83912 C
779.52302 892.97546 779.55704 893.16283 779.55704 893.41824 C
779.55704 893.92932 779.37080 894.30435 779.01534 894.52573 C
778.65987 894.74712 778.13490 894.86646 777.47471 894.86646 C
776.69603 894.86646 776.13732 894.66208 775.81559 894.23603 C
775.62935 894.01465 775.51087 893.65691 775.46013 893.19685 C
774.07172 893.19685 L
774.08901 894.30435 774.44447 895.07083 775.13868 895.49660 C
775.81559 895.92265 776.61128 896.14403 777.50844 896.14403 C
778.54110 896.14403 779.38753 895.93965 780.03099 895.53090 C
780.69118 895.13887 781.01263 894.50872 781.01263 893.67392 C
781.01263 888.54633 L
781.01263 888.39298 781.04665 888.25663 781.09767 888.17159 C
781.16513 888.08627 781.30063 888.03524 781.50359 888.03524 C
781.57134 888.03524 781.63909 888.03524 781.72384 888.03524 C
781.80860 888.05225 781.89307 888.06926 781.99483 888.08627 C
781.99483 886.97906 L
781.75786 886.91074 781.57134 886.85972 781.45313 886.84271 C
781.33436 886.82570 781.18214 886.82570 780.96217 886.82570 C
780.45420 886.82570 780.08173 887.01307 779.84476 887.37080 C
779.72627 887.55817 779.64151 887.83087 779.59077 888.18860 C
779.28605 887.79657 778.84583 887.43883 778.28740 887.14942 C
777.72841 886.85972 777.10224 886.70636 776.40831 886.70636 C
775.57861 886.70636 774.91843 886.96205 774.39345 887.47313 C
773.86876 887.96693 773.61506 888.59735 773.61506 889.34683 C
773.61506 890.18164 773.86876 890.81206 774.37672 891.27184 C
774.90142 891.73191 775.57861 892.00431 776.40831 892.10665 C
778.77808 892.41335 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
784.07688 898.40976 m
785.58378 898.40976 L
785.58378 895.92265 L
786.98891 895.92265 L
786.98891 894.69609 L
785.58378 894.69609 L
785.58378 888.88706 L
785.58378 888.58035 785.68526 888.37597 785.88822 888.25663 C
786.00699 888.20561 786.20995 888.17159 786.48094 888.17159 C
786.54869 888.17159 786.61644 888.17159 786.70091 888.17159 C
786.78539 888.17159 786.88715 888.17159 786.98891 888.18860 C
786.98891 887.01307 L
786.81969 886.96205 786.65017 886.92803 786.46394 886.91074 C
786.27798 886.89373 786.09146 886.87672 785.87150 886.87672 C
785.17729 886.87672 784.70362 887.04709 784.44935 887.40482 C
784.19565 887.76255 784.07688 888.23962 784.07688 888.80173 C
784.07688 894.69609 L
782.87499 894.69609 L
782.87499 895.92265 L
784.07688 895.92265 L
784.07688 898.40976 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
791.82454 896.12702 m
792.45128 896.12702 793.06044 895.97367 793.65317 895.68397 C
794.24561 895.37754 794.68583 894.98551 795.00756 894.52573 C
795.29499 894.06567 795.49824 893.55458 795.60000 892.95846 C
795.68447 892.54970 795.73550 891.88526 795.73550 890.98243 C
789.23480 890.98243 L
789.26854 890.07931 789.48850 889.36384 789.87798 888.81874 C
790.26718 888.27364 790.89364 888.00123 791.72334 888.00123 C
792.50173 888.00123 793.12847 888.25663 793.58513 888.76772 C
793.83940 889.05742 794.02564 889.41515 794.14413 889.80690 C
795.60000 889.80690 L
795.56598 889.48318 795.44750 889.10844 795.22753 888.71669 C
795.00756 888.30765 794.75357 887.98422 794.48287 887.72854 C
794.02564 887.28576 793.46693 886.97906 792.80674 886.82570 C
792.45128 886.74038 792.06180 886.68935 791.60457 886.68935 C
790.50444 886.68935 789.55625 887.09811 788.79458 887.89890 C
788.03291 888.71669 787.64315 889.84091 787.64315 891.28885 C
787.64315 892.71978 788.03291 893.87830 788.81131 894.78113 C
789.57298 895.68397 790.58891 896.12702 791.82454 896.12702 C
@c
794.19487 892.17468 m
794.14413 892.82211 793.99162 893.35020 793.77165 893.74195 C
793.36517 894.45742 792.68797 894.81515 791.74006 894.81515 C
791.04614 894.81515 790.47071 894.55975 790.01348 894.06567 C
789.55625 893.57159 789.30227 892.94145 789.28554 892.17468 C
794.19487 892.17468 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
802.95817 899.22756 m
804.60057 899.22756 L
804.60057 888.46101 L
810.76252 888.46101 L
810.76252 887.01307 L
802.95817 887.01307 L
802.95817 899.22756 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
812.33688 895.88863 m
813.86079 895.88863 L
813.86079 887.01307 L
812.33688 887.01307 L
812.33688 895.88863 L
@c
812.33688 899.22756 m
813.86079 899.22756 L
813.86079 897.54094 L
812.33688 897.54094 L
812.33688 899.22756 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
816.43663 895.92265 m
817.90980 895.92265 L
817.90980 894.66208 L
818.26526 895.08784 818.58699 895.41156 818.87443 895.61594 C
819.36539 895.95666 819.92409 896.12702 820.55055 896.12702 C
821.24476 896.12702 821.82019 895.95666 822.24340 895.59893 C
822.49739 895.39455 822.71735 895.10485 822.90359 894.71310 C
823.24205 895.19017 823.63153 895.54791 824.07175 895.76929 C
824.52898 896.00769 825.01965 896.12702 825.57865 896.12702 C
826.76324 896.12702 827.57594 895.68397 828.01616 894.81515 C
828.23641 894.35537 828.35461 893.72494 828.35461 892.94145 C
828.35461 887.01307 L
826.81427 887.01307 L
826.81427 893.19685 L
826.81427 893.79326 826.66205 894.20202 826.37405 894.42340 C
826.08605 894.64479 825.71386 894.76413 825.29065 894.76413 C
824.69820 894.76413 824.20724 894.55975 823.78375 894.16800 C
823.36082 893.77625 823.14085 893.11181 823.14085 892.19169 C
823.14085 887.01307 L
821.63395 887.01307 L
821.63395 892.82211 L
821.63395 893.43553 821.56649 893.87830 821.41398 894.15099 C
821.19373 894.57676 820.77052 894.78113 820.16135 894.78113 C
819.60236 894.78113 819.07767 894.55975 818.62072 894.11669 C
818.16350 893.67392 817.92652 892.87313 817.92652 891.73191 C
817.92652 887.01307 L
816.43663 887.01307 L
816.43663 895.92265 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
829.86151 895.88863 m
831.38513 895.88863 L
831.38513 887.01307 L
829.86151 887.01307 L
829.86151 895.88863 L
@c
829.86151 899.22756 m
831.38513 899.22756 L
831.38513 897.54094 L
829.86151 897.54094 L
829.86151 899.22756 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
834.26598 898.40976 m
835.77260 898.40976 L
835.77260 895.92265 L
837.17773 895.92265 L
837.17773 894.69609 L
835.77260 894.69609 L
835.77260 888.88706 L
835.77260 888.58035 835.87408 888.37597 836.07732 888.25663 C
836.19581 888.20561 836.39877 888.17159 836.66976 888.17159 C
836.73751 888.17159 836.80526 888.17159 836.89002 888.17159 C
836.97449 888.17159 837.07597 888.17159 837.17773 888.18860 C
837.17773 887.01307 L
837.00850 886.96205 836.83928 886.92803 836.65304 886.91074 C
836.46680 886.89373 836.28028 886.87672 836.06031 886.87672 C
835.36611 886.87672 834.89244 887.04709 834.63846 887.40482 C
834.38447 887.76255 834.26598 888.23962 834.26598 888.80173 C
834.26598 894.69609 L
833.06381 894.69609 L
833.06381 895.92265 L
834.26598 895.92265 L
834.26598 898.40976 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
841.84441 896.12702 m
842.47087 896.12702 843.08003 895.97367 843.67276 895.68397 C
844.26520 895.37754 844.70542 894.98551 845.02715 894.52573 C
845.31487 894.06567 845.51783 893.55458 845.61959 892.95846 C
845.70406 892.54970 845.75509 891.88526 845.75509 890.98243 C
839.25439 890.98243 L
839.28813 890.07931 839.50809 889.36384 839.89757 888.81874 C
840.28677 888.27364 840.91323 888.00123 841.74293 888.00123 C
842.52161 888.00123 843.14806 888.25663 843.60501 888.76772 C
843.85899 889.05742 844.04523 889.41515 844.16372 889.80690 C
845.61959 889.80690 L
845.58586 889.48318 845.46709 889.10844 845.24712 888.71669 C
845.02715 888.30765 844.77317 887.98422 844.50246 887.72854 C
844.04523 887.28576 843.48652 886.97906 842.82633 886.82570 C
842.47087 886.74038 842.08139 886.68935 841.62444 886.68935 C
840.52403 886.68935 839.57584 887.09811 838.81417 887.89890 C
838.05250 888.71669 837.66274 889.84091 837.66274 891.28885 C
837.66274 892.71978 838.05250 893.87830 838.83118 894.78113 C
839.59285 895.68397 840.60850 896.12702 841.84441 896.12702 C
@c
844.21446 892.17468 m
844.16372 892.82211 844.01150 893.35020 843.79124 893.74195 C
843.38476 894.45742 842.70784 894.81515 841.75994 894.81515 C
841.06573 894.81515 840.49030 894.55975 840.03307 894.06567 C
839.57584 893.57159 839.32214 892.94145 839.30513 892.17468 C
844.21446 892.17468 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
848.68384 891.35717 m
848.68384 890.40302 848.88680 889.60252 849.29301 888.97209 C
849.68249 888.32466 850.32567 888.00123 851.22312 888.00123 C
851.91704 888.00123 852.47575 888.30765 852.91597 888.90406 C
853.37320 889.50019 853.59317 890.35200 853.59317 891.45921 C
853.59317 892.58372 853.35591 893.41824 852.89896 893.96362 C
852.44202 894.50872 851.88331 894.78113 851.20611 894.78113 C
850.46117 894.78113 849.85172 894.49172 849.37805 893.91231 C
848.92082 893.33320 848.68384 892.48139 848.68384 891.35717 C
@c
850.91811 896.07600 m
851.61231 896.07600 852.17131 895.93965 852.62797 895.64995 C
852.88224 895.47959 853.18668 895.19017 853.52513 894.78113 C
853.52513 899.27858 L
854.96457 899.27858 L
854.96457 887.01307 L
853.62690 887.01307 L
853.62690 888.25663 L
853.27143 887.69452 852.86523 887.30277 852.39128 887.06409 C
851.91704 886.80869 851.37534 886.68935 850.76617 886.68935 C
849.76724 886.68935 848.92082 887.11540 848.19288 887.94992 C
847.46494 888.78472 847.10948 889.89194 847.10948 891.27184 C
847.10948 892.58372 847.44794 893.70794 848.10813 894.64479 C
848.76831 895.59893 849.69921 896.07600 850.91811 896.07600 C
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
856.99559 888.81874 m
858.73946 888.81874 L
858.73946 887.01307 L
856.99559 887.01307 L
856.99559 888.81874 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
871.88769 892.02161 m
870.04233 897.42161 L
868.09550 892.02161 L
871.88769 892.02161 L
@c
869.19619 899.22756 m
871.05798 899.22756 L
875.45991 887.01307 L
873.64828 887.01307 L
872.42939 890.67572 L
867.62183 890.67572 L
866.30117 887.01307 L
864.62504 887.01307 L
869.19619 899.22756 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
876.62494 899.22756 m
878.11483 899.22756 L
878.11483 887.01307 L
876.62494 887.01307 L
876.62494 899.22756 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
880.72469 899.22756 m
882.21458 899.22756 L
882.21458 887.01307 L
880.72469 887.01307 L
880.72469 899.22756 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
889.86359 895.92265 m
891.26901 895.92265 L
891.26901 894.38939 L
891.38721 894.67909 891.67521 895.05383 892.13216 895.47959 C
892.58939 895.90564 893.09707 896.12702 893.68951 896.12702 C
893.70680 896.12702 893.75754 896.12702 893.82501 896.11002 C
893.89304 896.11002 894.01124 896.09301 894.16375 896.07600 C
894.16375 894.49172 L
894.07928 894.50872 893.99452 894.52573 893.92677 894.52573 C
893.84202 894.54274 893.75754 894.54274 893.67279 894.54274 C
892.92784 894.54274 892.35241 894.30435 891.94592 893.81027 C
891.55672 893.31619 891.35348 892.77109 891.35348 892.14066 C
891.35348 887.01307 L
889.86359 887.01307 L
889.86359 895.92265 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
894.77291 895.88863 m
896.29654 895.88863 L
896.29654 887.01307 L
894.77291 887.01307 L
894.77291 895.88863 L
@c
894.77291 899.22756 m
896.29654 899.22756 L
896.29654 897.54094 L
894.77291 897.54094 L
894.77291 899.22756 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
902.00466 896.07600 m
902.69858 896.07600 903.30831 895.90564 903.81628 895.56491 C
904.10372 895.37754 904.39172 895.08784 904.67915 894.71310 C
904.67915 895.83732 L
906.05055 895.83732 L
906.05055 887.72854 L
906.05055 886.60431 905.88132 885.71849 905.55987 885.05405 C
904.93342 883.84450 903.76526 883.24838 902.05540 883.24838 C
901.10750 883.24838 900.31153 883.46976 899.65162 883.89553 C
899.00816 884.32157 898.65269 884.98573 898.56794 885.90586 C
900.07483 885.90586 L
900.15959 885.51383 900.29480 885.20740 900.51506 884.98573 C
900.83650 884.66230 901.36120 884.49194 902.08942 884.49194 C
903.22356 884.49194 903.98551 884.90069 904.34098 885.70148 C
904.54394 886.17827 904.64542 887.03008 904.62869 888.25663 C
904.32369 887.79657 903.96822 887.45613 903.54529 887.23446 C
903.12208 887.01307 902.58009 886.91074 901.88589 886.91074 C
900.92126 886.91074 900.09156 887.25146 899.38063 887.93291 C
898.65269 888.61436 898.29723 889.73887 898.29723 891.32315 C
898.29723 892.82211 898.65269 893.98063 899.38063 894.81515 C
900.10857 895.64995 900.97200 896.07600 902.00466 896.07600 C
@c
904.67915 891.51052 m
904.67915 892.61773 904.45918 893.43553 904.00252 893.96362 C
903.54529 894.49172 902.96957 894.76413 902.27565 894.76413 C
901.22598 894.76413 900.51506 894.27005 900.12557 893.28217 C
899.92233 892.75408 899.82085 892.05562 899.82085 891.20381 C
899.82085 890.19865 900.02409 889.44917 900.43030 888.92107 C
900.83650 888.39298 901.37849 888.12028 902.05540 888.12028 C
903.12208 888.12028 903.88375 888.61436 904.32369 889.58551 C
904.56094 890.13061 904.67915 890.77776 904.67915 891.51052 C
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
908.79279 899.27858 m
910.28268 899.27858 L
910.28268 894.71310 L
910.63814 895.17288 910.95987 895.47959 911.23058 895.66696 C
911.72154 895.99068 912.31398 896.14403 913.02491 896.14403 C
914.31184 896.14403 915.19200 895.68397 915.64894 894.78113 C
915.90293 894.28706 916.02170 893.60589 916.02170 892.71978 C
916.02170 887.01307 L
914.48107 887.01307 L
914.48107 892.63474 L
914.48107 893.28217 914.39631 893.75896 914.24381 894.06567 C
913.97310 894.55975 913.46542 894.79814 912.72047 894.79814 C
912.09402 894.79814 911.53531 894.57676 911.04435 894.15099 C
910.53666 893.72494 910.28268 892.92444 910.28268 891.73191 C
910.28268 887.01307 L
908.79279 887.01307 L
908.79279 899.27858 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
918.17178 898.40976 m
919.67868 898.40976 L
919.67868 895.92265 L
921.08381 895.92265 L
921.08381 894.69609 L
919.67868 894.69609 L
919.67868 888.88706 L
919.67868 888.58035 919.77987 888.37597 919.98312 888.25663 C
920.10161 888.20561 920.30485 888.17159 920.57584 888.17159 C
920.64331 888.17159 920.71134 888.17159 920.79581 888.17159 C
920.88028 888.17159 920.98205 888.17159 921.08381 888.18860 C
921.08381 887.01307 L
920.91430 886.96205 920.74507 886.92803 920.55883 886.91074 C
920.37260 886.89373 920.18608 886.87672 919.96611 886.87672 C
919.27219 886.87672 918.79824 887.04709 918.54425 887.40482 C
918.29027 887.76255 918.17178 888.23962 918.17178 888.80173 C
918.17178 894.69609 L
916.96989 894.69609 L
916.96989 895.92265 L
918.17178 895.92265 L
918.17178 898.40976 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
922.95694 889.80690 m
923.00797 889.31282 923.12617 888.92107 923.32942 888.66539 C
923.70189 888.17159 924.34507 887.93291 925.27625 887.93291 C
925.83496 887.93291 926.30920 888.05225 926.73213 888.29065 C
927.15534 888.54633 927.35858 888.92107 927.35858 889.41515 C
927.35858 889.80690 927.18935 890.09660 926.85090 890.28397 C
926.63036 890.40302 926.20743 890.55638 925.58098 890.70973 C
924.39609 891.01644 L
923.63414 891.20381 923.09244 891.40819 922.73698 891.64658 C
922.09351 892.05562 921.77206 892.61773 921.77206 893.33320 C
921.77206 894.16800 922.07650 894.84945 922.66923 895.37754 C
923.27868 895.90564 924.09137 896.16104 925.10702 896.16104 C
926.44441 896.16104 927.40932 895.76929 928.00176 894.96850 C
928.35723 894.47443 928.54346 893.92932 928.52646 893.36721 C
927.12161 893.36721 L
927.10460 893.69093 926.98611 893.99764 926.76586 894.28706 C
926.42740 894.67909 925.83496 894.86646 924.98854 894.86646 C
924.42983 894.86646 924.00661 894.76413 923.71890 894.54274 C
923.43090 894.32135 923.27868 894.04866 923.27868 893.69093 C
923.27868 893.29918 923.46491 892.99247 923.85411 892.75408 C
924.07436 892.61773 924.39609 892.49839 924.83603 892.39635 C
925.81795 892.15767 L
926.88463 891.90227 927.59556 891.64658 927.96803 891.39118 C
928.54346 891.01644 928.83146 890.42003 928.83146 889.58551 C
928.83146 888.80173 928.52646 888.12028 927.93430 887.54117 C
927.34157 886.96205 926.42740 886.67235 925.20850 886.67235 C
923.88813 886.67235 922.95694 886.97906 922.39824 887.57518 C
921.85654 888.17159 921.56882 888.92107 921.51808 889.80690 C
922.95694 889.80690 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
936.46035 895.92265 m
937.86576 895.92265 L
937.86576 894.38939 L
937.98425 894.67909 938.27197 895.05383 938.72891 895.47959 C
939.18614 895.90564 939.69411 896.12702 940.28627 896.12702 C
940.30356 896.12702 940.35430 896.12702 940.42176 896.11002 C
940.48980 896.11002 940.60800 896.09301 940.76050 896.07600 C
940.76050 894.49172 L
940.67603 894.50872 940.59128 894.52573 940.52353 894.52573 C
940.43877 894.54274 940.35430 894.54274 940.26954 894.54274 C
939.52460 894.54274 938.94917 894.30435 938.54268 893.81027 C
938.15348 893.31619 937.95024 892.77109 937.95024 892.14066 C
937.95024 887.01307 L
936.46035 887.01307 L
936.46035 895.92265 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
945.22989 896.12702 m
945.85635 896.12702 946.46551 895.97367 947.05824 895.68397 C
947.65068 895.37754 948.09090 894.98551 948.41263 894.52573 C
948.70035 894.06567 948.90331 893.55458 949.00507 892.95846 C
949.08954 892.54970 949.14057 891.88526 949.14057 890.98243 C
942.63987 890.98243 L
942.67361 890.07931 942.89386 889.36384 943.28306 888.81874 C
943.67225 888.27364 944.29871 888.00123 945.12841 888.00123 C
945.90709 888.00123 946.53354 888.25663 946.99049 888.76772 C
947.24447 889.05742 947.43071 889.41515 947.54920 889.80690 C
949.00507 889.80690 L
948.97134 889.48318 948.85257 889.10844 948.63260 888.71669 C
948.41263 888.30765 948.15865 887.98422 947.88794 887.72854 C
947.43071 887.28576 946.87200 886.97906 946.21181 886.82570 C
945.85635 886.74038 945.46687 886.68935 945.00992 886.68935 C
943.90951 886.68935 942.96132 887.09811 942.19965 887.89890 C
941.43798 888.71669 941.04850 889.84091 941.04850 891.28885 C
941.04850 892.71978 941.43798 893.87830 942.21666 894.78113 C
942.97833 895.68397 943.99398 896.12702 945.22989 896.12702 C
@c
947.59994 892.17468 m
947.54920 892.82211 947.39698 893.35020 947.17701 893.74195 C
946.77052 894.45742 946.09332 894.81515 945.14542 894.81515 C
944.45121 894.81515 943.87578 894.55975 943.41855 894.06567 C
942.96132 893.57159 942.70762 892.94145 942.69061 892.17468 C
947.59994 892.17468 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
951.84907 889.80690 m
951.90009 889.31282 952.01830 888.92107 952.22154 888.66539 C
952.59402 888.17159 953.23720 887.93291 954.16838 887.93291 C
954.72709 887.93291 955.20132 888.05225 955.62425 888.29065 C
956.04746 888.54633 956.25071 888.92107 956.25071 889.41515 C
956.25071 889.80690 956.08148 890.09660 955.74274 890.28397 C
955.52249 890.40302 955.09956 890.55638 954.47310 890.70973 C
953.28822 891.01644 L
952.52627 891.20381 951.98457 891.40819 951.62910 891.64658 C
950.98564 892.05562 950.66419 892.61773 950.66419 893.33320 C
950.66419 894.16800 950.96863 894.84945 951.56135 895.37754 C
952.17080 895.90564 952.98350 896.16104 953.99915 896.16104 C
955.33654 896.16104 956.30145 895.76929 956.89389 894.96850 C
957.24935 894.47443 957.43559 893.92932 957.41858 893.36721 C
956.01345 893.36721 L
955.99672 893.69093 955.87795 893.99764 955.65798 894.28706 C
955.31953 894.67909 954.72709 894.86646 953.88066 894.86646 C
953.32195 894.86646 952.89874 894.76413 952.61102 894.54274 C
952.32302 894.32135 952.17080 894.04866 952.17080 893.69093 C
952.17080 893.29918 952.35704 892.99247 952.74624 892.75408 C
952.96649 892.61773 953.28822 892.49839 953.72816 892.39635 C
954.71008 892.15767 L
955.77676 891.90227 956.48769 891.64658 956.86016 891.39118 C
957.43559 891.01644 957.72359 890.42003 957.72359 889.58551 C
957.72359 888.80173 957.41858 888.12028 956.82614 887.54117 C
956.23370 886.96205 955.31953 886.67235 954.10063 886.67235 C
952.78025 886.67235 951.84907 886.97906 951.29036 887.57518 C
950.74866 888.17159 950.46094 888.92107 950.41020 889.80690 C
951.84907 889.80690 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
963.78378 896.12702 m
964.41024 896.12702 965.01969 895.97367 965.61241 895.68397 C
966.20457 895.37754 966.64507 894.98551 966.96652 894.52573 C
967.25424 894.06567 967.45748 893.55458 967.55896 892.95846 C
967.64343 892.54970 967.69446 891.88526 967.69446 890.98243 C
961.19405 890.98243 L
961.22778 890.07931 961.44775 889.36384 961.83694 888.81874 C
962.22643 888.27364 962.85288 888.00123 963.68230 888.00123 C
964.46098 888.00123 965.08743 888.25663 965.54438 888.76772 C
965.79836 889.05742 965.98460 889.41515 966.10337 889.80690 C
967.55896 889.80690 L
967.52523 889.48318 967.40674 889.10844 967.18677 888.71669 C
966.96652 888.30765 966.71254 887.98422 966.44183 887.72854 C
965.98460 887.28576 965.42617 886.97906 964.76570 886.82570 C
964.41024 886.74038 964.02104 886.68935 963.56381 886.68935 C
962.46340 886.68935 961.51521 887.09811 960.75354 887.89890 C
959.99187 888.71669 959.60239 889.84091 959.60239 891.28885 C
959.60239 892.71978 959.99187 893.87830 960.77055 894.78113 C
961.53222 895.68397 962.54816 896.12702 963.78378 896.12702 C
@c
966.15383 892.17468 m
966.10337 892.82211 965.95087 893.35020 965.73090 893.74195 C
965.32441 894.45742 964.64721 894.81515 963.69931 894.81515 C
963.00510 894.81515 962.42967 894.55975 961.97244 894.06567 C
961.51521 893.57159 961.26151 892.94145 961.24450 892.17468 C
966.15383 892.17468 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
969.72576 895.92265 m
971.13118 895.92265 L
971.13118 894.38939 L
971.24939 894.67909 971.53739 895.05383 971.99433 895.47959 C
972.45156 895.90564 972.95924 896.12702 973.55169 896.12702 C
973.56898 896.12702 973.61972 896.12702 973.68718 896.11002 C
973.75521 896.11002 973.87342 896.09301 974.02592 896.07600 C
974.02592 894.49172 L
973.94145 894.50872 973.85669 894.52573 973.78894 894.52573 C
973.70419 894.54274 973.61972 894.54274 973.53496 894.54274 C
972.79002 894.54274 972.21458 894.30435 971.80809 893.81027 C
971.41890 893.31619 971.21565 892.77109 971.21565 892.14066 C
971.21565 887.01307 L
969.72576 887.01307 L
969.72576 895.92265 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
975.36302 895.92265 m
977.73335 888.66539 L
980.20488 895.92265 L
981.82998 895.92265 L
978.49502 887.01307 L
976.90365 887.01307 L
973.63616 895.92265 L
975.36302 895.92265 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
986.62110 896.12702 m
987.24756 896.12702 987.85701 895.97367 988.44973 895.68397 C
989.04217 895.37754 989.48239 894.98551 989.80413 894.52573 C
990.09156 894.06567 990.29480 893.55458 990.39657 892.95846 C
990.48104 892.54970 990.53206 891.88526 990.53206 890.98243 C
984.03137 890.98243 L
984.06510 890.07931 984.28507 889.36384 984.67455 888.81874 C
985.06375 888.27364 985.69020 888.00123 986.51991 888.00123 C
987.29830 888.00123 987.92476 888.25663 988.38170 888.76772 C
988.63597 889.05742 988.82220 889.41515 988.94069 889.80690 C
990.39657 889.80690 L
990.36255 889.48318 990.24406 889.10844 990.02409 888.71669 C
989.80413 888.30765 989.54986 887.98422 989.27915 887.72854 C
988.82220 887.28576 988.26350 886.97906 987.60331 886.82570 C
987.24756 886.74038 986.85836 886.68935 986.40113 886.68935 C
985.30101 886.68935 984.35282 887.09811 983.59115 887.89890 C
982.82948 888.71669 982.43972 889.84091 982.43972 891.28885 C
982.43972 892.71978 982.82948 893.87830 983.60787 894.78113 C
984.36954 895.68397 985.38548 896.12702 986.62110 896.12702 C
@c
988.99143 892.17468 m
988.94069 892.82211 988.78819 893.35020 988.56822 893.74195 C
988.16173 894.45742 987.48454 894.81515 986.53663 894.81515 C
985.84271 894.81515 985.26699 894.55975 984.81005 894.06567 C
984.35282 893.57159 984.09883 892.94145 984.08211 892.17468 C
988.99143 892.17468 L
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
993.29131 891.35717 m
993.29131 890.40302 993.49455 889.60252 993.90076 888.97209 C
994.28995 888.32466 994.93342 888.00123 995.83058 888.00123 C
996.52479 888.00123 997.08321 888.30765 997.52343 888.90406 C
997.98066 889.50019 998.20063 890.35200 998.20063 891.45921 C
998.20063 892.58372 997.96365 893.41824 997.50671 893.96362 C
997.04948 894.50872 996.49077 894.78113 995.81357 894.78113 C
995.06891 894.78113 994.45918 894.49172 993.98551 893.91231 C
993.52828 893.33320 993.29131 892.48139 993.29131 891.35717 C
@c
995.52586 896.07600 m
996.21978 896.07600 996.77877 895.93965 997.23572 895.64995 C
997.48970 895.47959 997.79414 895.19017 998.13288 894.78113 C
998.13288 899.27858 L
999.57203 899.27858 L
999.57203 887.01307 L
998.23465 887.01307 L
998.23465 888.25663 L
997.87918 887.69452 997.47298 887.30277 996.99874 887.06409 C
996.52479 886.80869 995.98309 886.68935 995.37364 886.68935 C
994.37471 886.68935 993.52828 887.11540 992.80035 887.94992 C
992.07241 888.78472 991.71694 889.89194 991.71694 891.27184 C
991.71694 892.58372 992.05569 893.70794 992.71559 894.64479 C
993.37578 895.59893 994.30696 896.07600 995.52586 896.07600 C
@c
F

@rax %Note: Object
560.08970 883.09502 1018.36857 900.13039 @E
/$fm 1 def
 0 O 0 @g
0.7400 0.6700 0.6700 0.9000  create_cmyk_color set_solid_fill
1001.60334 888.81874 m
1003.34693 888.81874 L
1003.34693 887.01307 L
1001.60334 887.01307 L
1001.60334 888.81874 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
609.31162 879.04913 m
610.80151 879.04913 L
610.80151 874.48365 L
611.15698 874.94343 611.47871 875.25014 611.74942 875.43751 C
612.24038 875.76123 612.83282 875.91458 613.54375 875.91458 C
614.83068 875.91458 615.71083 875.45452 616.16778 874.55169 C
616.42176 874.05761 616.54054 873.37644 616.54054 872.49033 C
616.54054 866.78362 L
614.99991 866.78362 L
614.99991 872.40529 L
614.99991 873.05272 614.91515 873.52951 614.76265 873.83622 C
614.49194 874.33030 613.98397 874.56869 613.23931 874.56869 C
612.61285 874.56869 612.05414 874.34731 611.56318 873.92154 C
611.05521 873.49550 610.80151 872.69499 610.80151 871.50246 C
610.80151 866.78362 L
609.31162 866.78362 L
609.31162 879.04913 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
618.52110 878.18031 m
620.02772 878.18031 L
620.02772 875.69320 L
621.43285 875.69320 L
621.43285 874.46665 L
620.02772 874.46665 L
620.02772 868.65761 L
620.02772 868.35090 620.12920 868.14652 620.33244 868.02718 C
620.45093 867.97616 620.65389 867.94214 620.92488 867.94214 C
620.99263 867.94214 621.06038 867.94214 621.14513 867.94214 C
621.22961 867.94214 621.33109 867.94214 621.43285 867.95915 C
621.43285 866.78362 L
621.26362 866.73260 621.09439 866.69858 620.90816 866.68129 C
620.72192 866.66428 620.53540 866.64728 620.31543 866.64728 C
619.62123 866.64728 619.14756 866.81764 618.89357 867.17537 C
618.63959 867.53310 618.52110 868.01017 618.52110 868.57228 C
618.52110 874.46665 L
617.31893 874.46665 L
617.31893 875.69320 L
618.52110 875.69320 L
618.52110 878.18031 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
622.88306 878.18031 m
624.38995 878.18031 L
624.38995 875.69320 L
625.79480 875.69320 L
625.79480 874.46665 L
624.38995 874.46665 L
624.38995 868.65761 L
624.38995 868.35090 624.49115 868.14652 624.69439 868.02718 C
624.81288 867.97616 625.01613 867.94214 625.28712 867.94214 C
625.35458 867.94214 625.42261 867.94214 625.50709 867.94214 C
625.59156 867.94214 625.69332 867.94214 625.79480 867.95915 C
625.79480 866.78362 L
625.62557 866.73260 625.45635 866.69858 625.27011 866.68129 C
625.08387 866.66428 624.89735 866.64728 624.67739 866.64728 C
623.98346 866.64728 623.50951 866.81764 623.25553 867.17537 C
623.00154 867.53310 622.88306 868.01017 622.88306 868.57228 C
622.88306 874.46665 L
621.68117 874.46665 L
621.68117 875.69320 L
622.88306 875.69320 L
622.88306 878.18031 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
630.68173 867.78879 m
631.37594 867.78879 631.95137 868.07820 632.40860 868.67461 C
632.86554 869.25373 633.10252 870.12255 633.10252 871.29808 C
633.10252 871.99654 633.00104 872.60967 632.79780 873.12076 C
632.40860 874.09191 631.71439 874.58570 630.68173 874.58570 C
629.64907 874.58570 628.95487 874.07490 628.56567 873.03572 C
628.36214 872.47332 628.26094 871.77487 628.26094 870.92334 C
628.26094 870.24189 628.36214 869.66249 628.56567 869.16869 C
628.95487 868.24857 629.64907 867.78879 630.68173 867.78879 C
@c
626.83880 875.65918 m
628.27767 875.65918 L
628.27767 874.46665 L
628.56567 874.87540 628.90384 875.18211 629.25959 875.40350 C
629.75055 875.74422 630.34328 875.91458 631.02019 875.91458 C
632.01883 875.91458 632.88227 875.52283 633.57647 874.75606 C
634.27039 873.97257 634.62586 872.86535 634.62586 871.43414 C
634.62586 869.49213 634.11817 868.11250 633.11953 867.27770 C
632.47606 866.74961 631.73140 866.47691 630.88469 866.47691 C
630.22450 866.47691 629.66608 866.63027 629.20885 866.91997 C
628.93814 867.09033 628.65014 867.37975 628.32841 867.78879 C
628.32841 863.24031 L
626.83880 863.24031 L
626.83880 875.65918 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
636.91143 869.57745 m
636.96246 869.08337 637.08066 868.69162 637.28391 868.43594 C
637.65638 867.94214 638.29956 867.70346 639.23074 867.70346 C
639.78945 867.70346 640.26340 867.82280 640.68661 868.06120 C
641.10983 868.31688 641.31307 868.69162 641.31307 869.18570 C
641.31307 869.57745 641.14384 869.86715 640.80510 870.05452 C
640.58485 870.17357 640.16192 870.32693 639.53546 870.48028 C
638.35058 870.78699 L
637.58863 870.97436 637.04693 871.17874 636.69146 871.41713 C
636.04800 871.82617 635.72655 872.38828 635.72655 873.10375 C
635.72655 873.93855 636.03099 874.62000 636.62372 875.14809 C
637.23317 875.67619 638.04586 875.93159 639.06151 875.93159 C
640.39861 875.93159 641.36381 875.53984 641.95625 874.73906 C
642.31172 874.24498 642.49795 873.69987 642.48094 873.13776 C
641.07581 873.13776 L
641.05909 873.46148 640.94031 873.76819 640.72035 874.05761 C
640.38189 874.44964 639.78945 874.63701 638.94302 874.63701 C
638.38431 874.63701 637.96082 874.53468 637.67339 874.31329 C
637.38539 874.09191 637.23317 873.81921 637.23317 873.46148 C
637.23317 873.06973 637.41940 872.76302 637.80860 872.52463 C
638.02885 872.38828 638.35058 872.26894 638.79052 872.16690 C
639.77244 871.92822 L
640.83912 871.67282 641.55005 871.41713 641.92252 871.16173 C
642.49795 870.78699 642.78567 870.19058 642.78567 869.35606 C
642.78567 868.57228 642.48094 867.89083 641.88850 867.31172 C
641.29578 866.73260 640.38189 866.44290 639.16299 866.44290 C
637.84261 866.44290 636.91143 866.74961 636.35272 867.34573 C
635.81102 867.94214 635.52331 868.69162 635.47257 869.57745 C
636.91143 869.57745 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
645.95169 875.57386 m
647.67855 875.57386 L
647.67855 873.76819 L
645.95169 873.76819 L
645.95169 875.57386 L
@c
645.95169 868.58929 m
647.67855 868.58929 L
647.67855 866.78362 L
645.95169 866.78362 L
645.95169 868.58929 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
652.29420 878.99811 m
653.54712 878.99811 L
649.68718 866.78362 L
648.43455 866.78362 L
652.29420 878.99811 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
656.82567 878.99811 m
658.07830 878.99811 L
654.21865 866.78362 L
652.96602 866.78362 L
656.82567 878.99811 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
659.30854 875.69320 m
661.67858 868.43594 L
664.15011 875.69320 L
665.77521 875.69320 L
662.44025 866.78362 L
660.84917 866.78362 L
657.58167 875.69320 L
659.30854 875.69320 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
670.56633 875.89757 m
671.19279 875.89757 671.80224 875.74422 672.39468 875.45452 C
672.98712 875.14809 673.42762 874.75606 673.74907 874.29628 C
674.03679 873.83622 674.24003 873.32513 674.34151 872.72901 C
674.42598 872.32025 674.47701 871.65581 674.47701 870.75298 C
667.97660 870.75298 L
668.01033 869.84986 668.23030 869.13439 668.61950 868.58929 C
669.00898 868.04419 669.63543 867.77178 670.46485 867.77178 C
671.24353 867.77178 671.86998 868.02718 672.32693 868.53827 C
672.58091 868.82797 672.76715 869.18570 672.88592 869.57745 C
674.34151 869.57745 L
674.30778 869.25373 674.18929 868.87899 673.96932 868.48724 C
673.74907 868.07820 673.49509 867.75477 673.22438 867.49909 C
672.76715 867.05631 672.20872 866.74961 671.54825 866.59625 C
671.19279 866.51093 670.80359 866.45991 670.34636 866.45991 C
669.24595 866.45991 668.29776 866.86866 667.53609 867.66945 C
666.77443 868.48724 666.38494 869.61146 666.38494 871.05940 C
666.38494 872.49033 666.77443 873.64885 667.55310 874.55169 C
668.31477 875.45452 669.33043 875.89757 670.56633 875.89757 C
@c
672.93638 871.94523 m
672.88592 872.59266 672.73342 873.12076 672.51345 873.51250 C
672.10696 874.22797 671.42976 874.58570 670.48186 874.58570 C
669.78765 874.58570 669.21222 874.33030 668.75499 873.83622 C
668.29776 873.34214 668.04406 872.71200 668.02706 871.94523 C
672.93638 871.94523 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
679.70806 875.94860 m
680.70699 875.94860 681.51940 875.71020 682.14586 875.21613 C
682.77203 874.72205 683.14450 873.88724 683.28000 872.69499 C
681.82413 872.69499 L
681.73937 873.25710 681.53641 873.69987 681.21468 874.05761 C
680.91024 874.41534 680.40227 874.60299 679.70806 874.60299 C
678.75987 874.60299 678.08268 874.14293 677.67647 873.20608 C
677.42277 872.60967 677.28728 871.86019 677.28728 870.97436 C
677.28728 870.07153 677.47351 869.32176 677.84598 868.72564 C
678.21817 868.11250 678.81090 867.80580 679.60630 867.80580 C
680.23304 867.80580 680.72400 867.99317 681.07946 868.38491 C
681.43493 868.75965 681.68863 869.27074 681.82413 869.93518 C
683.28000 869.93518 L
683.11077 868.75965 682.68756 867.89083 682.02737 867.34573 C
681.36690 866.80063 680.52047 866.52822 679.48809 866.52822 C
678.33694 866.52822 677.42277 866.95398 676.72857 867.80580 C
676.03465 868.65761 675.69591 869.71380 675.69591 870.99137 C
675.69591 872.55865 676.06838 873.76819 676.83005 874.63701 C
677.59200 875.50583 678.53991 875.94860 679.70806 875.94860 C
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
684.97285 875.69320 m
686.37827 875.69320 L
686.37827 874.15994 L
686.49676 874.44964 686.78447 874.82438 687.24142 875.25014 C
687.69865 875.67619 688.20661 875.89757 688.79877 875.89757 C
688.81606 875.89757 688.86680 875.89757 688.93427 875.88057 C
689.00230 875.88057 689.12050 875.86356 689.27301 875.84655 C
689.27301 874.26227 L
689.18854 874.27928 689.10378 874.29628 689.03603 874.29628 C
688.95128 874.31329 688.86680 874.31329 688.78205 874.31329 C
688.03710 874.31329 687.46167 874.07490 687.05518 873.58082 C
686.66598 873.08674 686.46274 872.54164 686.46274 871.91121 C
686.46274 866.78362 L
684.97285 866.78362 L
684.97285 875.69320 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
691.20283 869.15140 m
691.20283 868.72564 691.35534 868.38491 691.67707 868.12951 C
691.99852 867.87383 692.37071 867.75477 692.79420 867.75477 C
693.31890 867.75477 693.80986 867.87383 694.30082 868.12951 C
695.13024 868.52126 695.55373 869.18570 695.55373 870.10554 C
695.55373 871.31509 L
695.36750 871.19575 695.13024 871.11071 694.84252 871.02539 C
694.55480 870.94035 694.28381 870.88904 693.99609 870.85502 C
693.09893 870.73597 L
692.55723 870.66765 692.15074 870.54831 691.88003 870.39524 C
691.42280 870.13956 691.20283 869.71380 691.20283 869.15140 C
@c
694.80850 872.18391 m
695.14724 872.23493 695.36750 872.37128 695.48570 872.60967 C
695.55373 872.74602 695.58746 872.93339 695.58746 873.18879 C
695.58746 873.69987 695.40123 874.07490 695.04576 874.29628 C
694.69030 874.51767 694.16532 874.63701 693.50513 874.63701 C
692.72646 874.63701 692.16775 874.43263 691.84602 874.00658 C
691.65978 873.78520 691.54157 873.42746 691.49055 872.96740 C
690.10243 872.96740 L
690.11943 874.07490 690.47490 874.84139 691.16910 875.26715 C
691.84602 875.69320 692.64170 875.91458 693.53887 875.91458 C
694.57153 875.91458 695.41824 875.71020 696.06142 875.30145 C
696.72161 874.90942 697.04334 874.27928 697.04334 873.44447 C
697.04334 868.31688 L
697.04334 868.16353 697.07707 868.02718 697.12809 867.94214 C
697.19556 867.85682 697.33106 867.80580 697.53430 867.80580 C
697.60176 867.80580 697.66980 867.80580 697.75427 867.80580 C
697.83902 867.82280 697.92350 867.83981 698.02526 867.85682 C
698.02526 866.74961 L
697.78828 866.68129 697.60176 866.63027 697.48356 866.61326 C
697.36479 866.59625 697.21257 866.59625 696.99260 866.59625 C
696.48463 866.59625 696.11216 866.78362 695.87518 867.14135 C
695.75669 867.32872 695.67194 867.60142 695.62120 867.95915 C
695.31647 867.56712 694.87654 867.20939 694.31783 866.91997 C
693.75883 866.63027 693.13266 866.47691 692.43874 866.47691 C
691.60904 866.47691 690.94885 866.73260 690.42387 867.24369 C
689.89918 867.73748 689.64548 868.36791 689.64548 869.11739 C
689.64548 869.95219 689.89918 870.58261 690.40715 871.04239 C
690.93184 871.50246 691.60904 871.77487 692.43874 871.87720 C
694.80850 872.18391 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
700.69975 869.57745 m
700.75077 869.08337 700.86926 868.69162 701.07222 868.43594 C
701.44498 867.94214 702.08816 867.70346 703.01934 867.70346 C
703.57805 867.70346 704.05200 867.82280 704.47521 868.06120 C
704.89814 868.31688 705.10167 868.69162 705.10167 869.18570 C
705.10167 869.57745 704.93244 869.86715 704.59370 870.05452 C
704.37345 870.17357 703.95024 870.32693 703.32378 870.48028 C
702.13918 870.78699 L
701.37694 870.97436 700.83524 871.17874 700.47978 871.41713 C
699.83660 871.82617 699.51515 872.38828 699.51515 873.10375 C
699.51515 873.93855 699.81959 874.62000 700.41231 875.14809 C
701.02148 875.67619 701.83417 875.93159 702.85011 875.93159 C
704.18721 875.93159 705.15241 875.53984 705.74485 874.73906 C
706.10031 874.24498 706.28627 873.69987 706.26954 873.13776 C
704.86441 873.13776 L
704.84740 873.46148 704.72891 873.76819 704.50894 874.05761 C
704.17020 874.44964 703.57805 874.63701 702.73134 874.63701 C
702.17291 874.63701 701.74942 874.53468 701.46198 874.31329 C
701.17398 874.09191 701.02148 873.81921 701.02148 873.46148 C
701.02148 873.06973 701.20772 872.76302 701.59720 872.52463 C
701.81745 872.38828 702.13918 872.26894 702.57912 872.16690 C
703.56104 871.92822 L
704.62743 871.67282 705.33865 871.41713 705.71083 871.16173 C
706.28627 870.78699 706.57427 870.19058 706.57427 869.35606 C
706.57427 868.57228 706.26954 867.89083 705.67710 867.31172 C
705.08438 866.73260 704.17020 866.44290 702.95131 866.44290 C
701.63121 866.44290 700.69975 866.74961 700.14132 867.34573 C
699.59962 867.94214 699.31162 868.69162 699.26088 869.57745 C
700.69975 869.57745 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
709.46929 868.58929 m
711.21288 868.58929 L
711.21288 866.78362 L
709.46929 866.78362 L
709.46929 868.58929 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
717.06472 875.94860 m
718.06365 875.94860 718.87606 875.71020 719.50252 875.21613 C
720.12869 874.72205 720.50117 873.88724 720.63666 872.69499 C
719.18079 872.69499 L
719.09603 873.25710 718.89307 873.69987 718.57134 874.05761 C
718.26690 874.41534 717.75893 874.60299 717.06472 874.60299 C
716.11654 874.60299 715.43934 874.14293 715.03313 873.20608 C
714.77943 872.60967 714.64394 871.86019 714.64394 870.97436 C
714.64394 870.07153 714.83017 869.32176 715.20265 868.72564 C
715.57483 868.11250 716.16756 867.80580 716.96324 867.80580 C
717.58970 867.80580 718.08066 867.99317 718.43613 868.38491 C
718.79159 868.75965 719.04529 869.27074 719.18079 869.93518 C
720.63666 869.93518 L
720.46743 868.75965 720.04422 867.89083 719.38403 867.34573 C
718.72384 866.80063 717.87713 866.52822 716.84476 866.52822 C
715.69361 866.52822 714.77943 866.95398 714.08523 867.80580 C
713.39131 868.65761 713.05257 869.71380 713.05257 870.99137 C
713.05257 872.55865 713.42504 873.76819 714.18671 874.63701 C
714.94866 875.50583 715.89657 875.94860 717.06472 875.94860 C
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
725.96948 867.75477 m
726.95140 867.75477 727.62860 868.12951 728.00107 868.87899 C
728.35654 869.62847 728.54277 870.46328 728.54277 871.38312 C
728.54277 872.21792 728.40728 872.88236 728.15329 873.41046 C
727.73008 874.22797 727.01887 874.63701 725.98620 874.63701 C
725.07231 874.63701 724.41184 874.29628 724.00564 873.59783 C
723.58271 872.89937 723.37946 872.04756 723.37946 871.05940 C
723.37946 870.12255 723.58271 869.32176 724.00564 868.69162 C
724.41184 868.06120 725.07231 867.75477 725.96948 867.75477 C
@c
726.02050 875.94860 m
727.15436 875.94860 728.11956 875.57386 728.91496 874.80737 C
729.71093 874.04060 730.10013 872.89937 730.10013 871.41713 C
730.10013 869.98620 729.76167 868.79367 729.06746 867.85682 C
728.37326 866.91997 727.28986 866.45991 725.83427 866.45991 C
724.61537 866.45991 723.65017 866.86866 722.92224 867.70346 C
722.21131 868.53827 721.85584 869.64548 721.85584 871.04239 C
721.85584 872.54164 722.22831 873.73417 722.98998 874.62000 C
723.75194 875.50583 724.75058 875.94860 726.02050 875.94860 C
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
731.35276 875.69320 m
732.82592 875.69320 L
732.82592 874.43263 L
733.18139 874.85839 733.50312 875.18211 733.79055 875.38649 C
734.28151 875.72721 734.84022 875.89757 735.46668 875.89757 C
736.16088 875.89757 736.73631 875.72721 737.15924 875.36948 C
737.41351 875.16510 737.63348 874.87540 737.81972 874.48365 C
738.15817 874.96072 738.54765 875.31846 738.98787 875.53984 C
739.44510 875.77824 739.93578 875.89757 740.49449 875.89757 C
741.67937 875.89757 742.49206 875.45452 742.93228 874.58570 C
743.15254 874.12592 743.27074 873.49550 743.27074 872.71200 C
743.27074 866.78362 L
741.73039 866.78362 L
741.73039 872.96740 L
741.73039 873.56381 741.57789 873.97257 741.29017 874.19395 C
741.00217 874.41534 740.62970 874.53468 740.20677 874.53468 C
739.61433 874.53468 739.12337 874.33030 738.69987 873.93855 C
738.27694 873.54680 738.05698 872.88236 738.05698 871.96224 C
738.05698 866.78362 L
736.55008 866.78362 L
736.55008 872.59266 L
736.55008 873.20608 736.48233 873.64885 736.33011 873.92154 C
736.10986 874.34731 735.68665 874.55169 735.07748 874.55169 C
734.51849 874.55169 733.99380 874.33030 733.53685 873.88724 C
733.07962 873.44447 732.84265 872.64369 732.84265 871.50246 C
732.84265 866.78362 L
731.35276 866.78362 L
731.35276 875.69320 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
747.38466 878.99811 m
748.63729 878.99811 L
744.77735 866.78362 L
743.52472 866.78362 L
747.38466 878.99811 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
752.88104 867.78879 m
753.57496 867.78879 754.15039 868.07820 754.60762 868.67461 C
755.06457 869.25373 755.30183 870.12255 755.30183 871.29808 C
755.30183 871.99654 755.20006 872.60967 754.99710 873.12076 C
754.60762 874.09191 753.91370 874.58570 752.88104 874.58570 C
751.84838 874.58570 751.15417 874.07490 750.76498 873.03572 C
750.56145 872.47332 750.45997 871.77487 750.45997 870.92334 C
750.45997 870.24189 750.56145 869.66249 750.76498 869.16869 C
751.15417 868.24857 751.84838 867.78879 752.88104 867.78879 C
@c
749.03811 875.65918 m
750.47698 875.65918 L
750.47698 874.46665 L
750.76498 874.87540 751.10315 875.18211 751.45861 875.40350 C
751.94957 875.74422 752.54230 875.91458 753.21950 875.91458 C
754.21814 875.91458 755.08157 875.52283 755.77550 874.75606 C
756.46970 873.97257 756.82517 872.86535 756.82517 871.43414 C
756.82517 869.49213 756.31720 868.11250 755.31883 867.27770 C
754.67537 866.74961 753.93043 866.47691 753.08400 866.47691 C
752.42381 866.47691 751.86510 866.63027 751.40787 866.91997 C
751.13717 867.09033 750.84945 867.37975 750.52772 867.78879 C
750.52772 863.24031 L
749.03811 863.24031 L
749.03811 875.65918 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
759.36472 869.15140 m
759.36472 868.72564 759.51694 868.38491 759.83868 868.12951 C
760.16013 867.87383 760.53260 867.75477 760.95581 867.75477 C
761.48079 867.75477 761.97175 867.87383 762.46271 868.12951 C
763.29213 868.52126 763.71534 869.18570 763.71534 870.10554 C
763.71534 871.31509 L
763.52910 871.19575 763.29213 871.11071 763.00441 871.02539 C
762.71641 870.94035 762.44542 870.88904 762.15798 870.85502 C
761.26082 870.73597 L
760.71912 870.66765 760.31263 870.54831 760.04192 870.39524 C
759.58469 870.13956 759.36472 869.71380 759.36472 869.15140 C
@c
762.97039 872.18391 m
763.30885 872.23493 763.52910 872.37128 763.64759 872.60967 C
763.71534 872.74602 763.74935 872.93339 763.74935 873.18879 C
763.74935 873.69987 763.56312 874.07490 763.20765 874.29628 C
762.85191 874.51767 762.32721 874.63701 761.66702 874.63701 C
760.88835 874.63701 760.32935 874.43263 760.00791 874.00658 C
759.82167 873.78520 759.70318 873.42746 759.65216 872.96740 C
758.26403 872.96740 L
758.28132 874.07490 758.63679 874.84139 759.33099 875.26715 C
760.00791 875.69320 760.80359 875.91458 761.70076 875.91458 C
762.73342 875.91458 763.57984 875.71020 764.22331 875.30145 C
764.88321 874.90942 765.20494 874.27928 765.20494 873.44447 C
765.20494 868.31688 L
765.20494 868.16353 765.23868 868.02718 765.28970 867.94214 C
765.35745 867.85682 765.49294 867.80580 765.69591 867.80580 C
765.76365 867.80580 765.83140 867.80580 765.91587 867.80580 C
766.00091 867.82280 766.08539 867.83981 766.18687 867.85682 C
766.18687 866.74961 L
765.95017 866.68129 765.76365 866.63027 765.64517 866.61326 C
765.52668 866.59625 765.37417 866.59625 765.15420 866.59625 C
764.64652 866.59625 764.27405 866.78362 764.03707 867.14135 C
763.91858 867.32872 763.83383 867.60142 763.78309 867.95915 C
763.47836 867.56712 763.03814 867.20939 762.47972 866.91997 C
761.92072 866.63027 761.29455 866.47691 760.60035 866.47691 C
759.77093 866.47691 759.11046 866.73260 758.58576 867.24369 C
758.06107 867.73748 757.80709 868.36791 757.80709 869.11739 C
757.80709 869.95219 758.06107 870.58261 758.56876 871.04239 C
759.09373 871.50246 759.77093 871.77487 760.60035 871.87720 C
762.97039 872.18391 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
771.09619 875.84655 m
771.79039 875.84655 772.40013 875.67619 772.90781 875.33546 C
773.19553 875.14809 773.48353 874.85839 773.77096 874.48365 C
773.77096 875.60787 L
775.14236 875.60787 L
775.14236 867.49909 L
775.14236 866.37487 774.97285 865.48904 774.65169 864.82460 C
774.02523 863.61506 772.85679 863.01893 771.14693 863.01893 C
770.19902 863.01893 769.40334 863.24031 768.74343 863.66608 C
768.09997 864.09213 767.74450 864.75628 767.65975 865.67641 C
769.16636 865.67641 L
769.25112 865.28438 769.38633 864.97795 769.60687 864.75628 C
769.92803 864.43285 770.45301 864.26249 771.18123 864.26249 C
772.31509 864.26249 773.07732 864.67124 773.43279 865.47203 C
773.63575 865.94882 773.73723 866.80063 773.72022 868.02718 C
773.41550 867.56712 773.06003 867.22668 772.63682 867.00501 C
772.21389 866.78362 771.67191 866.68129 770.97770 866.68129 C
770.01307 866.68129 769.18337 867.02202 768.47244 867.70346 C
767.74450 868.38491 767.38904 869.50942 767.38904 871.09370 C
767.38904 872.59266 767.74450 873.75118 768.47244 874.58570 C
769.20038 875.42050 770.06353 875.84655 771.09619 875.84655 C
@c
773.77096 871.28107 m
773.77096 872.38828 773.55099 873.20608 773.09405 873.73417 C
772.63682 874.26227 772.06139 874.53468 771.36718 874.53468 C
770.31780 874.53468 769.60687 874.04060 769.21710 873.05272 C
769.01414 872.52463 768.91266 871.82617 768.91266 870.97436 C
768.91266 869.96920 769.11562 869.21972 769.52183 868.69162 C
769.92803 868.16353 770.47002 867.89083 771.14693 867.89083 C
772.21389 867.89083 772.97556 868.38491 773.41550 869.35606 C
773.65276 869.90117 773.77096 870.54831 773.77096 871.28107 C
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
781.40608 875.89757 m
782.03254 875.89757 782.64170 875.74422 783.23443 875.45452 C
783.82687 875.14809 784.26709 874.75606 784.58882 874.29628 C
784.87654 873.83622 785.07950 873.32513 785.18126 872.72901 C
785.26573 872.32025 785.31676 871.65581 785.31676 870.75298 C
778.81606 870.75298 L
778.84980 869.84986 779.07005 869.13439 779.45924 868.58929 C
779.84844 868.04419 780.47490 867.77178 781.30460 867.77178 C
782.08328 867.77178 782.70973 868.02718 783.16668 868.53827 C
783.42066 868.82797 783.60690 869.18570 783.72539 869.57745 C
785.18126 869.57745 L
785.14753 869.25373 785.02876 868.87899 784.80879 868.48724 C
784.58882 868.07820 784.33483 867.75477 784.06413 867.49909 C
783.60690 867.05631 783.04819 866.74961 782.38800 866.59625 C
782.03254 866.51093 781.64306 866.45991 781.18611 866.45991 C
780.08570 866.45991 779.13751 866.86866 778.37584 867.66945 C
777.61417 868.48724 777.22469 869.61146 777.22469 871.05940 C
777.22469 872.49033 777.61417 873.64885 778.39285 874.55169 C
779.15452 875.45452 780.17017 875.89757 781.40608 875.89757 C
@c
783.77613 871.94523 m
783.72539 872.59266 783.57317 873.12076 783.35320 873.51250 C
782.94671 874.22797 782.26951 874.58570 781.32161 874.58570 C
780.62740 874.58570 780.05197 874.33030 779.59474 873.83622 C
779.13751 873.34214 778.88381 872.71200 778.86680 871.94523 C
783.77613 871.94523 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
788.19449 869.57745 m
788.24551 869.08337 788.36372 868.69162 788.56696 868.43594 C
788.93972 867.94214 789.58261 867.70346 790.51408 867.70346 C
791.07250 867.70346 791.54674 867.82280 791.96967 868.06120 C
792.39288 868.31688 792.59613 868.69162 792.59613 869.18570 C
792.59613 869.57745 792.42690 869.86715 792.08844 870.05452 C
791.86819 870.17357 791.44498 870.32693 790.81852 870.48028 C
789.63364 870.78699 L
788.87169 870.97436 788.32998 871.17874 787.97452 871.41713 C
787.33106 871.82617 787.00961 872.38828 787.00961 873.10375 C
787.00961 873.93855 787.31433 874.62000 787.90677 875.14809 C
788.51622 875.67619 789.32891 875.93159 790.34457 875.93159 C
791.68195 875.93159 792.64687 875.53984 793.23931 874.73906 C
793.59477 874.24498 793.78101 873.69987 793.76428 873.13776 C
792.35915 873.13776 L
792.34214 873.46148 792.22365 873.76819 792.00369 874.05761 C
791.66494 874.44964 791.07250 874.63701 790.22608 874.63701 C
789.66737 874.63701 789.24416 874.53468 788.95644 874.31329 C
788.66872 874.09191 788.51622 873.81921 788.51622 873.46148 C
788.51622 873.06973 788.70246 872.76302 789.09165 872.52463 C
789.31191 872.38828 789.63364 872.26894 790.07357 872.16690 C
791.05578 871.92822 L
792.12217 871.67282 792.83310 871.41713 793.20557 871.16173 C
793.78101 870.78699 794.06901 870.19058 794.06901 869.35606 C
794.06901 868.57228 793.76428 867.89083 793.17184 867.31172 C
792.57912 866.73260 791.66494 866.44290 790.44605 866.44290 C
789.12567 866.44290 788.19449 866.74961 787.63606 867.34573 C
787.09436 867.94214 786.80636 868.69162 786.75562 869.57745 C
788.19449 869.57745 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
799.21559 878.99811 m
800.46822 878.99811 L
796.60828 866.78362 L
795.35565 866.78362 L
799.21559 878.99811 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
801.27524 878.18031 m
802.78186 878.18031 L
802.78186 875.69320 L
804.18699 875.69320 L
804.18699 874.46665 L
802.78186 874.46665 L
802.78186 868.65761 L
802.78186 868.35090 802.88334 868.14652 803.08658 868.02718 C
803.20507 867.97616 803.40831 867.94214 803.67931 867.94214 C
803.74677 867.94214 803.81480 867.94214 803.89928 867.94214 C
803.98375 867.94214 804.08551 867.94214 804.18699 867.95915 C
804.18699 866.78362 L
804.01776 866.73260 803.84854 866.69858 803.66230 866.68129 C
803.47606 866.66428 803.28954 866.64728 803.06957 866.64728 C
802.37537 866.64728 801.90170 866.81764 801.64772 867.17537 C
801.39373 867.53310 801.27524 868.01017 801.27524 868.57228 C
801.27524 874.46665 L
800.07335 874.46665 L
800.07335 875.69320 L
801.27524 875.69320 L
801.27524 878.18031 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
809.02290 875.89757 m
809.64935 875.89757 810.25880 875.74422 810.85124 875.45452 C
811.44369 875.14809 811.88391 874.75606 812.20564 874.29628 C
812.49335 873.83622 812.69631 873.32513 812.79808 872.72901 C
812.88255 872.32025 812.93357 871.65581 812.93357 870.75298 C
806.43288 870.75298 L
806.46690 869.84986 806.68687 869.13439 807.07606 868.58929 C
807.46554 868.04419 808.09200 867.77178 808.92142 867.77178 C
809.70009 867.77178 810.32655 868.02718 810.78350 868.53827 C
811.03748 868.82797 811.22372 869.18570 811.34249 869.57745 C
812.79808 869.57745 L
812.76435 869.25373 812.64586 868.87899 812.42561 868.48724 C
812.20564 868.07820 811.95165 867.75477 811.68094 867.49909 C
811.22372 867.05631 810.66529 866.74961 810.00482 866.59625 C
809.64935 866.51093 809.26016 866.45991 808.80293 866.45991 C
807.70252 866.45991 806.75433 866.86866 805.99266 867.66945 C
805.23099 868.48724 804.84151 869.61146 804.84151 871.05940 C
804.84151 872.49033 805.23099 873.64885 806.00967 874.55169 C
806.77134 875.45452 807.78699 875.89757 809.02290 875.89757 C
@c
811.39294 871.94523 m
811.34249 872.59266 811.18998 873.12076 810.97002 873.51250 C
810.56353 874.22797 809.88633 874.58570 808.93843 874.58570 C
808.24422 874.58570 807.66879 874.33030 807.21156 873.83622 C
806.75433 873.34214 806.50063 872.71200 806.48362 871.94523 C
811.39294 871.94523 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
814.79565 875.69320 m
816.20107 875.69320 L
816.20107 874.15994 L
816.31928 874.44964 816.60728 874.82438 817.06422 875.25014 C
817.52117 875.67619 818.02913 875.89757 818.62157 875.89757 C
818.63887 875.89757 818.68932 875.89757 818.75707 875.88057 C
818.82482 875.88057 818.94331 875.86356 819.09553 875.84655 C
819.09553 874.26227 L
819.01106 874.27928 818.92630 874.29628 818.85883 874.29628 C
818.77408 874.31329 818.68932 874.31329 818.60457 874.31329 C
817.85991 874.31329 817.28447 874.07490 816.87798 873.58082 C
816.48850 873.08674 816.28554 872.54164 816.28554 871.91121 C
816.28554 866.78362 L
814.79565 866.78362 L
814.79565 875.69320 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
819.87420 875.69320 m
821.34737 875.69320 L
821.34737 874.43263 L
821.70283 874.85839 822.02457 875.18211 822.31200 875.38649 C
822.80296 875.72721 823.36167 875.89757 823.98813 875.89757 C
824.68233 875.89757 825.25776 875.72721 825.68069 875.36948 C
825.93496 875.16510 826.15493 874.87540 826.34117 874.48365 C
826.67962 874.96072 827.06910 875.31846 827.50932 875.53984 C
827.96655 875.77824 828.45723 875.89757 829.01594 875.89757 C
830.20082 875.89757 831.01351 875.45452 831.45373 874.58570 C
831.67370 874.12592 831.79219 873.49550 831.79219 872.71200 C
831.79219 866.78362 L
830.25184 866.78362 L
830.25184 872.96740 L
830.25184 873.56381 830.09934 873.97257 829.81162 874.19395 C
829.52362 874.41534 829.15115 874.53468 828.72822 874.53468 C
828.13578 874.53468 827.64482 874.33030 827.22132 873.93855 C
826.79839 873.54680 826.57814 872.88236 826.57814 871.96224 C
826.57814 866.78362 L
825.07153 866.78362 L
825.07153 872.59266 L
825.07153 873.20608 825.00378 873.64885 824.85156 873.92154 C
824.63131 874.34731 824.20809 874.55169 823.59893 874.55169 C
823.03994 874.55169 822.51524 874.33030 822.05830 873.88724 C
821.60107 873.44447 821.36409 872.64369 821.36409 871.50246 C
821.36409 866.78362 L
819.87420 866.78362 L
819.87420 875.69320 L
@c
F

@rax %Note: Object
609.32013 862.86557 849.31398 879.90094 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
834.02702 869.57745 m
834.07805 869.08337 834.19625 868.69162 834.39950 868.43594 C
834.77225 867.94214 835.41515 867.70346 836.34661 867.70346 C
836.90504 867.70346 837.37928 867.82280 837.80220 868.06120 C
838.22542 868.31688 838.42894 868.69162 838.42894 869.18570 C
838.42894 869.57745 838.25943 869.86715 837.92098 870.05452 C
837.70072 870.17357 837.27751 870.32693 836.65106 870.48028 C
835.46617 870.78699 L
834.70422 870.97436 834.16252 871.17874 833.80706 871.41713 C
833.16359 871.82617 832.84214 872.38828 832.84214 873.10375 C
832.84214 873.93855 833.14687 874.62000 833.73959 875.14809 C
834.34876 875.67619 835.16145 875.93159 836.17710 875.93159 C
837.51449 875.93159 838.47940 875.53984 839.07184 874.73906 C
839.42731 874.24498 839.61354 873.69987 839.59682 873.13776 C
838.19169 873.13776 L
838.17468 873.46148 838.05619 873.76819 837.83622 874.05761 C
837.49748 874.44964 836.90504 874.63701 836.05861 874.63701 C
835.50019 874.63701 835.07669 874.53468 834.78898 874.31329 C
834.50126 874.09191 834.34876 873.81921 834.34876 873.46148 C
834.34876 873.06973 834.53499 872.76302 834.92419 872.52463 C
835.14444 872.38828 835.46617 872.26894 835.90611 872.16690 C
836.88831 871.92822 L
837.95471 871.67282 838.66564 871.41713 839.03811 871.16173 C
839.61354 870.78699 839.90154 870.19058 839.90154 869.35606 C
839.90154 868.57228 839.59682 867.89083 839.00438 867.31172 C
838.41165 866.73260 837.49748 866.44290 836.27858 866.44290 C
834.95849 866.44290 834.02702 866.74961 833.46860 867.34573 C
832.92690 867.94214 832.63890 868.69162 832.58816 869.57745 C
834.02702 869.57745 L
@c
F

@rax %Note: Object
607.71997 863.09858 829.91424 864.16328 @E
/$fm 0 def
 0 O 0 @g
0.8549 0.6118 0.0000 0.0000  create_cmyk_color set_solid_fill
607.71997 864.16328 m
607.71997 863.09858 L
829.91424 863.09858 L
829.91424 864.16328 L
607.71997 864.16328 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
564.87997 858.81883 m
566.36986 858.81883 L
566.36986 854.25335 L
566.72532 854.71313 567.04706 855.01984 567.31776 855.20721 C
567.80872 855.53093 568.40117 855.68428 569.11209 855.68428 C
570.39902 855.68428 571.27918 855.22422 571.73613 854.32139 C
571.99011 853.82731 572.10888 853.14614 572.10888 852.26003 C
572.10888 846.55332 L
570.56825 846.55332 L
570.56825 852.17499 L
570.56825 852.82243 570.48350 853.29921 570.33099 853.60592 C
570.06028 854.10000 569.55260 854.33839 568.80765 854.33839 C
568.18120 854.33839 567.62249 854.11701 567.13153 853.69124 C
566.62384 853.26520 566.36986 852.46469 566.36986 851.27216 C
566.36986 846.55332 L
564.87997 846.55332 L
564.87997 858.81883 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
574.08945 857.95002 m
575.59606 857.95002 L
575.59606 855.46290 L
577.00120 855.46290 L
577.00120 854.23635 L
575.59606 854.23635 L
575.59606 848.42731 L
575.59606 848.12060 575.69754 847.91622 575.90079 847.79688 C
576.01928 847.74586 576.22252 847.71184 576.49351 847.71184 C
576.56098 847.71184 576.62901 847.71184 576.71348 847.71184 C
576.79795 847.71184 576.89972 847.71184 577.00120 847.72885 C
577.00120 846.55332 L
576.83197 846.50230 576.66274 846.46828 576.47650 846.45099 C
576.29027 846.43398 576.10375 846.41698 575.88378 846.41698 C
575.18957 846.41698 574.71591 846.58734 574.46192 846.94507 C
574.20794 847.30280 574.08945 847.77987 574.08945 848.34198 C
574.08945 854.23635 L
572.88756 854.23635 L
572.88756 855.46290 L
574.08945 855.46290 L
574.08945 857.95002 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
578.45140 857.95002 m
579.95830 857.95002 L
579.95830 855.46290 L
581.36343 855.46290 L
581.36343 854.23635 L
579.95830 854.23635 L
579.95830 848.42731 L
579.95830 848.12060 580.05950 847.91622 580.26274 847.79688 C
580.38123 847.74586 580.58447 847.71184 580.85546 847.71184 C
580.92293 847.71184 580.99096 847.71184 581.07543 847.71184 C
581.15991 847.71184 581.26167 847.71184 581.36343 847.72885 C
581.36343 846.55332 L
581.19392 846.50230 581.02469 846.46828 580.83846 846.45099 C
580.65222 846.43398 580.46570 846.41698 580.24573 846.41698 C
579.55181 846.41698 579.07786 846.58734 578.82387 846.94507 C
578.56989 847.30280 578.45140 847.77987 578.45140 848.34198 C
578.45140 854.23635 L
577.24951 854.23635 L
577.24951 855.46290 L
578.45140 855.46290 L
578.45140 857.95002 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
586.25008 847.55849 m
586.94428 847.55849 587.51972 847.84791 587.97694 848.44431 C
588.43389 849.02343 588.67087 849.89225 588.67087 851.06778 C
588.67087 851.76624 588.56939 852.37937 588.36614 852.89046 C
587.97694 853.86161 587.28274 854.35540 586.25008 854.35540 C
585.21742 854.35540 584.52321 853.84460 584.13402 852.80542 C
583.93077 852.24302 583.82929 851.54457 583.82929 850.69304 C
583.82929 850.01159 583.93077 849.43219 584.13402 848.93839 C
584.52321 848.01827 585.21742 847.55849 586.25008 847.55849 C
@c
582.40715 855.42888 m
583.84602 855.42888 L
583.84602 854.23635 L
584.13402 854.64510 584.47247 854.95181 584.82794 855.17320 C
585.31890 855.51392 585.91162 855.68428 586.58882 855.68428 C
587.58718 855.68428 588.45061 855.29254 589.14482 854.52576 C
589.83874 853.74227 590.19449 852.63506 590.19449 851.20384 C
590.19449 849.26183 589.68652 847.88220 588.68787 847.04740 C
588.04441 846.51931 587.29975 846.24661 586.45332 846.24661 C
585.79285 846.24661 585.23443 846.39997 584.77720 846.68967 C
584.50649 846.86003 584.21849 847.14945 583.89676 847.55849 C
583.89676 843.01002 L
582.40715 843.01002 L
582.40715 855.42888 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
592.47978 849.34715 m
592.53080 848.85307 592.64901 848.46132 592.85225 848.20564 C
593.22472 847.71184 593.86791 847.47317 594.79909 847.47317 C
595.35780 847.47317 595.83175 847.59250 596.25496 847.83090 C
596.67817 848.08658 596.88142 848.46132 596.88142 848.95540 C
596.88142 849.34715 596.71219 849.63685 596.37345 849.82422 C
596.15320 849.94328 595.73027 850.09663 595.10381 850.24998 C
593.91893 850.55669 L
593.15698 850.74406 592.61528 850.94844 592.25981 851.18683 C
591.61635 851.59587 591.29490 852.15798 591.29490 852.87345 C
591.29490 853.70825 591.59934 854.38970 592.19206 854.91780 C
592.80151 855.44589 593.61420 855.70129 594.62986 855.70129 C
595.96696 855.70129 596.93216 855.30954 597.52460 854.50876 C
597.88006 854.01468 598.06630 853.46957 598.04929 852.90746 C
596.64416 852.90746 L
596.62743 853.23118 596.50866 853.53789 596.28869 853.82731 C
595.95024 854.21934 595.35780 854.40671 594.51137 854.40671 C
593.95266 854.40671 593.52945 854.30438 593.24173 854.08299 C
592.95373 853.86161 592.80151 853.58891 592.80151 853.23118 C
592.80151 852.83943 592.98775 852.53272 593.37694 852.29433 C
593.59720 852.15798 593.91893 852.03865 594.35887 851.93660 C
595.34079 851.69792 L
596.40746 851.44252 597.11839 851.18683 597.49087 850.93143 C
598.06630 850.55669 598.35430 849.96028 598.35430 849.12576 C
598.35430 848.34198 598.04929 847.66054 597.45685 847.08142 C
596.86441 846.50230 595.95024 846.21260 594.73134 846.21260 C
593.41096 846.21260 592.47978 846.51931 591.92107 847.11543 C
591.37937 847.71184 591.09165 848.46132 591.04091 849.34715 C
592.47978 849.34715 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
601.52003 855.34356 m
603.24690 855.34356 L
603.24690 853.53789 L
601.52003 853.53789 L
601.52003 855.34356 L
@c
601.52003 848.35899 m
603.24690 848.35899 L
603.24690 846.55332 L
601.52003 846.55332 L
601.52003 848.35899 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
607.86283 858.76781 m
609.11546 858.76781 L
605.25553 846.55332 L
604.00290 846.55332 L
607.86283 858.76781 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
612.39402 858.76781 m
613.64665 858.76781 L
609.78699 846.55332 L
608.53436 846.55332 L
612.39402 858.76781 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
614.87688 855.46290 m
617.24693 848.20564 L
619.71846 855.46290 L
621.34356 855.46290 L
618.00860 846.55332 L
616.41751 846.55332 L
613.15002 855.46290 L
614.87688 855.46290 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
626.13468 855.66728 m
626.76113 855.66728 627.37058 855.51392 627.96331 855.22422 C
628.55546 854.91780 628.99597 854.52576 629.31742 854.06598 C
629.60513 853.60592 629.80838 853.09483 629.90986 852.49871 C
629.99433 852.08995 630.04535 851.42551 630.04535 850.52268 C
623.54494 850.52268 L
623.57868 849.61956 623.79865 848.90409 624.18784 848.35899 C
624.57732 847.81389 625.20378 847.54148 626.03320 847.54148 C
626.81187 847.54148 627.43833 847.79688 627.89528 848.30797 C
628.14926 848.59767 628.33550 848.95540 628.45427 849.34715 C
629.90986 849.34715 L
629.87613 849.02343 629.75764 848.64869 629.53767 848.25694 C
629.31742 847.84791 629.06343 847.52447 628.79272 847.26879 C
628.33550 846.82602 627.77707 846.51931 627.11660 846.36595 C
626.76113 846.28063 626.37194 846.22961 625.91471 846.22961 C
624.81430 846.22961 623.86611 846.63836 623.10444 847.43915 C
622.34277 848.25694 621.95329 849.38117 621.95329 850.82910 C
621.95329 852.26003 622.34277 853.41855 623.12145 854.32139 C
623.88312 855.22422 624.89906 855.66728 626.13468 855.66728 C
@c
628.50501 851.71493 m
628.45427 852.36236 628.30176 852.89046 628.08180 853.28220 C
627.67531 853.99767 626.99811 854.35540 626.05020 854.35540 C
625.35600 854.35540 624.78057 854.10000 624.32334 853.60592 C
623.86611 853.11184 623.61241 852.48170 623.59540 851.71493 C
628.50501 851.71493 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
635.27641 855.71830 m
636.27534 855.71830 637.08775 855.47991 637.71420 854.98583 C
638.34038 854.49175 638.71285 853.65694 638.84835 852.46469 C
637.39247 852.46469 L
637.30772 853.02680 637.10476 853.46957 636.78302 853.82731 C
636.47858 854.18504 635.97061 854.37269 635.27641 854.37269 C
634.32822 854.37269 633.65102 853.91263 633.24482 852.97578 C
632.99112 852.37937 632.85562 851.62989 632.85562 850.74406 C
632.85562 849.84123 633.04186 849.09146 633.41433 848.49534 C
633.78652 847.88220 634.37924 847.57550 635.17493 847.57550 C
635.80139 847.57550 636.29235 847.76287 636.64781 848.15461 C
637.00328 848.52935 637.25698 849.04044 637.39247 849.70488 C
638.84835 849.70488 L
638.67912 848.52935 638.25591 847.66054 637.59572 847.11543 C
636.93524 846.57033 636.08882 846.29792 635.05644 846.29792 C
633.90529 846.29792 632.99112 846.72369 632.29691 847.57550 C
631.60299 848.42731 631.26425 849.48350 631.26425 850.76107 C
631.26425 852.32835 631.63672 853.53789 632.39839 854.40671 C
633.16035 855.27553 634.10825 855.71830 635.27641 855.71830 C
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
640.54120 855.46290 m
641.94661 855.46290 L
641.94661 853.92964 L
642.06510 854.21934 642.35282 854.59408 642.80976 855.01984 C
643.26699 855.44589 643.77496 855.66728 644.36740 855.66728 C
644.38441 855.66728 644.43515 855.66728 644.50290 855.65027 C
644.57065 855.65027 644.68885 855.63326 644.84135 855.61625 C
644.84135 854.03197 L
644.75688 854.04898 644.67213 854.06598 644.60438 854.06598 C
644.51962 854.08299 644.43515 854.08299 644.35039 854.08299 C
643.60545 854.08299 643.03002 853.84460 642.62353 853.35052 C
642.23433 852.85644 642.03109 852.31134 642.03109 851.68091 C
642.03109 846.55332 L
640.54120 846.55332 L
640.54120 855.46290 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
646.77118 848.92110 m
646.77118 848.49534 646.92369 848.15461 647.24542 847.89921 C
647.56687 847.64353 647.93906 847.52447 648.36255 847.52447 C
648.88724 847.52447 649.37820 847.64353 649.86917 847.89921 C
650.69858 848.29096 651.12208 848.95540 651.12208 849.87524 C
651.12208 851.08479 L
650.93584 850.96545 650.69858 850.88041 650.41087 850.79509 C
650.12315 850.71005 649.85216 850.65874 649.56444 850.62472 C
648.66728 850.50567 L
648.12557 850.43735 647.71909 850.31802 647.44838 850.16494 C
646.99115 849.90926 646.77118 849.48350 646.77118 848.92110 C
@c
650.37685 851.95361 m
650.71559 852.00463 650.93584 852.14098 651.05405 852.37937 C
651.12208 852.51572 651.15581 852.70309 651.15581 852.95849 C
651.15581 853.46957 650.96957 853.84460 650.61411 854.06598 C
650.25865 854.28737 649.73395 854.40671 649.07348 854.40671 C
648.29480 854.40671 647.73609 854.20233 647.41436 853.77628 C
647.22813 853.55490 647.10992 853.19717 647.05890 852.73710 C
645.67077 852.73710 L
645.68778 853.84460 646.04324 854.61109 646.73745 855.03685 C
647.41436 855.46290 648.21005 855.68428 649.10721 855.68428 C
650.13987 855.68428 650.98658 855.47991 651.62976 855.07115 C
652.28995 854.67912 652.61169 854.04898 652.61169 853.21417 C
652.61169 848.08658 L
652.61169 847.93323 652.64542 847.79688 652.69644 847.71184 C
652.76391 847.62652 652.89940 847.57550 653.10265 847.57550 C
653.17011 847.57550 653.23814 847.57550 653.32261 847.57550 C
653.40737 847.59250 653.49184 847.60951 653.59361 847.62652 C
653.59361 846.51931 L
653.35663 846.45099 653.17011 846.39997 653.05191 846.38296 C
652.93342 846.36595 652.78091 846.36595 652.56094 846.36595 C
652.05298 846.36595 651.68050 846.55332 651.44381 846.91106 C
651.32504 847.09843 651.24028 847.37112 651.18954 847.72885 C
650.88482 847.33682 650.44488 846.97909 649.88617 846.68967 C
649.32746 846.39997 648.70101 846.24661 648.00709 846.24661 C
647.17739 846.24661 646.51720 846.50230 645.99250 847.01339 C
645.46753 847.50718 645.21383 848.13761 645.21383 848.88709 C
645.21383 849.72189 645.46753 850.35231 645.97550 850.81209 C
646.50019 851.27216 647.17739 851.54457 648.00709 851.64690 C
650.37685 851.95361 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
656.26838 849.34715 m
656.31912 848.85307 656.43761 848.46132 656.64057 848.20564 C
657.01332 847.71184 657.65650 847.47317 658.58769 847.47317 C
659.14639 847.47317 659.62035 847.59250 660.04356 847.83090 C
660.46649 848.08658 660.67002 848.46132 660.67002 848.95540 C
660.67002 849.34715 660.50079 849.63685 660.16205 849.82422 C
659.94180 849.94328 659.51858 850.09663 658.89213 850.24998 C
657.70753 850.55669 L
656.94529 850.74406 656.40387 850.94844 656.04813 851.18683 C
655.40494 851.59587 655.08350 852.15798 655.08350 852.87345 C
655.08350 853.70825 655.38794 854.38970 655.98066 854.91780 C
656.58983 855.44589 657.40252 855.70129 658.41846 855.70129 C
659.75556 855.70129 660.72076 855.30954 661.31320 854.50876 C
661.66866 854.01468 661.85490 853.46957 661.83789 852.90746 C
660.43276 852.90746 L
660.41575 853.23118 660.29726 853.53789 660.07729 853.82731 C
659.73883 854.21934 659.14639 854.40671 658.29969 854.40671 C
657.74126 854.40671 657.31776 854.30438 657.03033 854.08299 C
656.74233 853.86161 656.58983 853.58891 656.58983 853.23118 C
656.58983 852.83943 656.77606 852.53272 657.16554 852.29433 C
657.38580 852.15798 657.70753 852.03865 658.14746 851.93660 C
659.12939 851.69792 L
660.19578 851.44252 660.90699 851.18683 661.27918 850.93143 C
661.85490 850.55669 662.14261 849.96028 662.14261 849.12576 C
662.14261 848.34198 661.83789 847.66054 661.24545 847.08142 C
660.65272 846.50230 659.73883 846.21260 658.51994 846.21260 C
657.19956 846.21260 656.26838 846.51931 655.70967 847.11543 C
655.16797 847.71184 654.87997 848.46132 654.82923 849.34715 C
656.26838 849.34715 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
665.03764 848.35899 m
666.78123 848.35899 L
666.78123 846.55332 L
665.03764 846.55332 L
665.03764 848.35899 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
672.63307 855.71830 m
673.63200 855.71830 674.44441 855.47991 675.07087 854.98583 C
675.69704 854.49175 676.06951 853.65694 676.20501 852.46469 C
674.74913 852.46469 L
674.66438 853.02680 674.46142 853.46957 674.13969 853.82731 C
673.83524 854.18504 673.32728 854.37269 672.63307 854.37269 C
671.68488 854.37269 671.00769 853.91263 670.60148 852.97578 C
670.34778 852.37937 670.21228 851.62989 670.21228 850.74406 C
670.21228 849.84123 670.39852 849.09146 670.77099 848.49534 C
671.14318 847.88220 671.73591 847.57550 672.53159 847.57550 C
673.15805 847.57550 673.64901 847.76287 674.00447 848.15461 C
674.35994 848.52935 674.61364 849.04044 674.74913 849.70488 C
676.20501 849.70488 L
676.03578 848.52935 675.61257 847.66054 674.95238 847.11543 C
674.29219 846.57033 673.44548 846.29792 672.41310 846.29792 C
671.26195 846.29792 670.34778 846.72369 669.65386 847.57550 C
668.95965 848.42731 668.62091 849.48350 668.62091 850.76107 C
668.62091 852.32835 668.99339 853.53789 669.75506 854.40671 C
670.51701 855.27553 671.46491 855.71830 672.63307 855.71830 C
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
681.53783 847.52447 m
682.51975 847.52447 683.19694 847.89921 683.56942 848.64869 C
683.92488 849.39817 684.11112 850.23298 684.11112 851.15282 C
684.11112 851.98762 683.97562 852.65206 683.72164 853.18016 C
683.29843 853.99767 682.58750 854.40671 681.55455 854.40671 C
680.64066 854.40671 679.98019 854.06598 679.57398 853.36753 C
679.15106 852.66907 678.94781 851.81726 678.94781 850.82910 C
678.94781 849.89225 679.15106 849.09146 679.57398 848.46132 C
679.98019 847.83090 680.64066 847.52447 681.53783 847.52447 C
@c
681.58885 855.71830 m
682.72299 855.71830 683.68791 855.34356 684.48331 854.57707 C
685.27928 853.81030 685.66847 852.66907 685.66847 851.18683 C
685.66847 849.75591 685.33002 848.56337 684.63581 847.62652 C
683.94161 846.68967 682.85849 846.22961 681.40261 846.22961 C
680.18372 846.22961 679.21852 846.63836 678.49058 847.47317 C
677.77965 848.30797 677.42419 849.41518 677.42419 850.81209 C
677.42419 852.31134 677.79666 853.50387 678.55833 854.38970 C
679.32028 855.27553 680.31893 855.71830 681.58885 855.71830 C
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
686.92110 855.46290 m
688.39427 855.46290 L
688.39427 854.20233 L
688.74973 854.62809 689.07146 854.95181 689.35890 855.15619 C
689.84986 855.49691 690.40857 855.66728 691.03502 855.66728 C
691.72923 855.66728 692.30466 855.49691 692.72787 855.13918 C
692.98186 854.93480 693.20183 854.64510 693.38806 854.25335 C
693.72652 854.73043 694.11600 855.08816 694.55622 855.30954 C
695.01345 855.54794 695.50413 855.66728 696.06312 855.66728 C
697.24772 855.66728 698.06041 855.22422 698.50063 854.35540 C
698.72088 853.89562 698.83909 853.26520 698.83909 852.48170 C
698.83909 846.55332 L
697.29874 846.55332 L
697.29874 852.73710 L
697.29874 853.33351 697.14652 853.74227 696.85852 853.96365 C
696.57052 854.18504 696.19833 854.30438 695.77512 854.30438 C
695.18268 854.30438 694.69172 854.10000 694.26822 853.70825 C
693.84529 853.31650 693.62532 852.65206 693.62532 851.73194 C
693.62532 846.55332 L
692.11843 846.55332 L
692.11843 852.36236 L
692.11843 852.97578 692.05096 853.41855 691.89846 853.69124 C
691.67820 854.11701 691.25499 854.32139 690.64583 854.32139 C
690.08683 854.32139 689.56214 854.10000 689.10520 853.65694 C
688.64797 853.21417 688.41099 852.41339 688.41099 851.27216 C
688.41099 846.55332 L
686.92110 846.55332 L
686.92110 855.46290 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
702.95301 858.76781 m
704.20564 858.76781 L
700.34598 846.55332 L
699.09307 846.55332 L
702.95301 858.76781 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
708.44939 847.55849 m
709.14331 847.55849 709.71902 847.84791 710.17597 848.44431 C
710.63291 849.02343 710.87017 849.89225 710.87017 851.06778 C
710.87017 851.76624 710.76841 852.37937 710.56545 852.89046 C
710.17597 853.86161 709.48205 854.35540 708.44939 854.35540 C
707.41672 854.35540 706.72252 853.84460 706.33332 852.80542 C
706.12980 852.24302 706.02831 851.54457 706.02831 850.69304 C
706.02831 850.01159 706.12980 849.43219 706.33332 848.93839 C
706.72252 848.01827 707.41672 847.55849 708.44939 847.55849 C
@c
704.60646 855.42888 m
706.04532 855.42888 L
706.04532 854.23635 L
706.33332 854.64510 706.67150 854.95181 707.02696 855.17320 C
707.51792 855.51392 708.11065 855.68428 708.78784 855.68428 C
709.78649 855.68428 710.64992 855.29254 711.34384 854.52576 C
712.03805 853.74227 712.39351 852.63506 712.39351 851.20384 C
712.39351 849.26183 711.88554 847.88220 710.88718 847.04740 C
710.24372 846.51931 709.49877 846.24661 708.65235 846.24661 C
707.99216 846.24661 707.43345 846.39997 706.97622 846.68967 C
706.70551 846.86003 706.41780 847.14945 706.09606 847.55849 C
706.09606 843.01002 L
704.60646 843.01002 L
704.60646 855.42888 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
714.93307 848.92110 m
714.93307 848.49534 715.08529 848.15461 715.40702 847.89921 C
715.72847 847.64353 716.10094 847.52447 716.52444 847.52447 C
717.04913 847.52447 717.54009 847.64353 718.03106 847.89921 C
718.86047 848.29096 719.28369 848.95540 719.28369 849.87524 C
719.28369 851.08479 L
719.09745 850.96545 718.86047 850.88041 718.57276 850.79509 C
718.28476 850.71005 718.01405 850.65874 717.72633 850.62472 C
716.82917 850.50567 L
716.28746 850.43735 715.88098 850.31802 715.61027 850.16494 C
715.15304 849.90926 714.93307 849.48350 714.93307 848.92110 C
@c
718.53874 851.95361 m
718.87720 852.00463 719.09745 852.14098 719.21594 852.37937 C
719.28369 852.51572 719.31770 852.70309 719.31770 852.95849 C
719.31770 853.46957 719.13146 853.84460 718.77600 854.06598 C
718.42025 854.28737 717.89556 854.40671 717.23537 854.40671 C
716.45669 854.40671 715.89770 854.20233 715.57625 853.77628 C
715.39002 853.55490 715.27153 853.19717 715.22050 852.73710 C
713.83238 852.73710 L
713.84967 853.84460 714.20513 854.61109 714.89934 855.03685 C
715.57625 855.46290 716.37194 855.68428 717.26910 855.68428 C
718.30176 855.68428 719.14819 855.47991 719.79165 855.07115 C
720.45156 854.67912 720.77329 854.04898 720.77329 853.21417 C
720.77329 848.08658 L
720.77329 847.93323 720.80731 847.79688 720.85805 847.71184 C
720.92580 847.62652 721.06129 847.57550 721.26425 847.57550 C
721.33200 847.57550 721.39975 847.57550 721.48450 847.57550 C
721.56926 847.59250 721.65373 847.60951 721.75521 847.62652 C
721.75521 846.51931 L
721.51852 846.45099 721.33200 846.39997 721.21380 846.38296 C
721.09502 846.36595 720.94280 846.36595 720.72255 846.36595 C
720.21487 846.36595 719.84239 846.55332 719.60542 846.91106 C
719.48693 847.09843 719.40217 847.37112 719.35143 847.72885 C
719.04671 847.33682 718.60649 846.97909 718.04806 846.68967 C
717.48907 846.39997 716.86290 846.24661 716.16869 846.24661 C
715.33928 846.24661 714.67909 846.50230 714.15411 847.01339 C
713.62942 847.50718 713.37543 848.13761 713.37543 848.88709 C
713.37543 849.72189 713.62942 850.35231 714.13739 850.81209 C
714.66208 851.27216 715.33928 851.54457 716.16869 851.64690 C
718.53874 851.95361 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
726.66482 855.61625 m
727.35874 855.61625 727.96847 855.44589 728.47616 855.10517 C
728.76387 854.91780 729.05187 854.62809 729.33931 854.25335 C
729.33931 855.37757 L
730.71071 855.37757 L
730.71071 847.26879 L
730.71071 846.14457 730.54148 845.25874 730.22003 844.59430 C
729.59357 843.38476 728.42542 842.78863 726.71528 842.78863 C
725.76737 842.78863 724.97169 843.01002 724.31178 843.43578 C
723.66831 843.86183 723.31285 844.52598 723.22809 845.44611 C
724.73471 845.44611 L
724.81975 845.05408 724.95496 844.74765 725.17521 844.52598 C
725.49638 844.20255 726.02135 844.03219 726.74957 844.03219 C
727.88372 844.03219 728.64567 844.44094 729.00113 845.24173 C
729.20409 845.71852 729.30557 846.57033 729.28857 847.79688 C
728.98384 847.33682 728.62838 846.99638 728.20517 846.77471 C
727.78224 846.55332 727.24025 846.45099 726.54605 846.45099 C
725.58142 846.45099 724.75172 846.79172 724.04079 847.47317 C
723.31285 848.15461 722.95739 849.27912 722.95739 850.86340 C
722.95739 852.36236 723.31285 853.52088 724.04079 854.35540 C
724.76872 855.19020 725.63187 855.61625 726.66482 855.61625 C
@c
729.33931 851.05077 m
729.33931 852.15798 729.11934 852.97578 728.66239 853.50387 C
728.20517 854.03197 727.62973 854.30438 726.93581 854.30438 C
725.88614 854.30438 725.17521 853.81030 724.78545 852.82243 C
724.58249 852.29433 724.48101 851.59587 724.48101 850.74406 C
724.48101 849.73890 724.68425 848.98942 725.09017 848.46132 C
725.49638 847.93323 726.03836 847.66054 726.71528 847.66054 C
727.78224 847.66054 728.54391 848.15461 728.98384 849.12576 C
729.22110 849.67087 729.33931 850.31802 729.33931 851.05077 C
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
736.97443 855.66728 m
737.60088 855.66728 738.21005 855.51392 738.80277 855.22422 C
739.39521 854.91780 739.83543 854.52576 740.15717 854.06598 C
740.44488 853.60592 740.64784 853.09483 740.74961 852.49871 C
740.83408 852.08995 740.88510 851.42551 740.88510 850.52268 C
734.38441 850.52268 L
734.41843 849.61956 734.63839 848.90409 735.02759 848.35899 C
735.41679 847.81389 736.04324 847.54148 736.87294 847.54148 C
737.65162 847.54148 738.27808 847.79688 738.73502 848.30797 C
738.98901 848.59767 739.17524 848.95540 739.29373 849.34715 C
740.74961 849.34715 L
740.71587 849.02343 740.59710 848.64869 740.37713 848.25694 C
740.15717 847.84791 739.90318 847.52447 739.63247 847.26879 C
739.17524 846.82602 738.61654 846.51931 737.95635 846.36595 C
737.60088 846.28063 737.21169 846.22961 736.75446 846.22961 C
735.65405 846.22961 734.70586 846.63836 733.94419 847.43915 C
733.18252 848.25694 732.79304 849.38117 732.79304 850.82910 C
732.79304 852.26003 733.18252 853.41855 733.96120 854.32139 C
734.72287 855.22422 735.73852 855.66728 736.97443 855.66728 C
@c
739.34447 851.71493 m
739.29373 852.36236 739.14151 852.89046 738.92154 853.28220 C
738.51506 853.99767 737.83786 854.35540 736.88995 854.35540 C
736.19575 854.35540 735.62031 854.10000 735.16309 853.60592 C
734.70586 853.11184 734.45216 852.48170 734.43515 851.71493 C
739.34447 851.71493 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
743.76283 849.34715 m
743.81386 848.85307 743.93206 848.46132 744.13531 848.20564 C
744.50806 847.71184 745.15096 847.47317 746.08243 847.47317 C
746.64085 847.47317 747.11509 847.59250 747.53802 847.83090 C
747.96123 848.08658 748.16476 848.46132 748.16476 848.95540 C
748.16476 849.34715 747.99524 849.63685 747.65679 849.82422 C
747.43654 849.94328 747.01332 850.09663 746.38687 850.24998 C
745.20198 850.55669 L
744.44003 850.74406 743.89833 850.94844 743.54287 851.18683 C
742.89940 851.59587 742.57795 852.15798 742.57795 852.87345 C
742.57795 853.70825 742.88268 854.38970 743.47540 854.91780 C
744.08457 855.44589 744.89726 855.70129 745.91291 855.70129 C
747.25030 855.70129 748.21521 855.30954 748.80765 854.50876 C
749.16312 854.01468 749.34935 853.46957 749.33263 852.90746 C
747.92750 852.90746 L
747.91049 853.23118 747.79200 853.53789 747.57203 853.82731 C
747.23329 854.21934 746.64085 854.40671 745.79443 854.40671 C
745.23600 854.40671 744.81250 854.30438 744.52479 854.08299 C
744.23707 853.86161 744.08457 853.58891 744.08457 853.23118 C
744.08457 852.83943 744.27080 852.53272 744.66000 852.29433 C
744.88025 852.15798 745.20198 852.03865 745.64192 851.93660 C
746.62413 851.69792 L
747.69052 851.44252 748.40145 851.18683 748.77392 850.93143 C
749.34935 850.55669 749.63735 849.96028 749.63735 849.12576 C
749.63735 848.34198 749.33263 847.66054 748.74019 847.08142 C
748.14746 846.50230 747.23329 846.21260 746.01439 846.21260 C
744.69430 846.21260 743.76283 846.51931 743.20441 847.11543 C
742.66271 847.71184 742.37471 848.46132 742.32397 849.34715 C
743.76283 849.34715 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
754.78394 858.76781 m
756.03657 858.76781 L
752.17691 846.55332 L
750.92400 846.55332 L
754.78394 858.76781 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
756.58961 858.76781 m
758.07950 858.76781 L
758.07950 846.55332 L
756.58961 846.55332 L
756.58961 858.76781 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
760.63861 855.42888 m
762.16224 855.42888 L
762.16224 846.55332 L
760.63861 846.55332 L
760.63861 855.42888 L
@c
760.63861 858.76781 m
762.16224 858.76781 L
762.16224 857.08120 L
760.63861 857.08120 L
760.63861 858.76781 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
768.15808 855.71830 m
769.15701 855.71830 769.96942 855.47991 770.59587 854.98583 C
771.22205 854.49175 771.59452 853.65694 771.73002 852.46469 C
770.27414 852.46469 L
770.18939 853.02680 769.98614 853.46957 769.66441 853.82731 C
769.35997 854.18504 768.85228 854.37269 768.15808 854.37269 C
767.20989 854.37269 766.53269 853.91263 766.12649 852.97578 C
765.87279 852.37937 765.73729 851.62989 765.73729 850.74406 C
765.73729 849.84123 765.92324 849.09146 766.29572 848.49534 C
766.66819 847.88220 767.26091 847.57550 768.05631 847.57550 C
768.68277 847.57550 769.17373 847.76287 769.52920 848.15461 C
769.88494 848.52935 770.13865 849.04044 770.27414 849.70488 C
771.73002 849.70488 L
771.56050 848.52935 771.13757 847.66054 770.47710 847.11543 C
769.81691 846.57033 768.97049 846.29792 767.93811 846.29792 C
766.78668 846.29792 765.87279 846.72369 765.17858 847.57550 C
764.48438 848.42731 764.14592 849.48350 764.14592 850.76107 C
764.14592 852.32835 764.51839 853.53789 765.28006 854.40671 C
766.04202 855.27553 766.98992 855.71830 768.15808 855.71830 C
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
777.23206 855.66728 m
777.85852 855.66728 778.46769 855.51392 779.06041 855.22422 C
779.65285 854.91780 780.09307 854.52576 780.41480 854.06598 C
780.70252 853.60592 780.90548 853.09483 781.00724 852.49871 C
781.09172 852.08995 781.14274 851.42551 781.14274 850.52268 C
774.64205 850.52268 L
774.67578 849.61956 774.89575 848.90409 775.28523 848.35899 C
775.67443 847.81389 776.30088 847.54148 777.13058 847.54148 C
777.90926 847.54148 778.53572 847.79688 778.99266 848.30797 C
779.24665 848.59767 779.43288 848.95540 779.55137 849.34715 C
781.00724 849.34715 L
780.97351 849.02343 780.85474 848.64869 780.63477 848.25694 C
780.41480 847.84791 780.16082 847.52447 779.89011 847.26879 C
779.43288 846.82602 778.87417 846.51931 778.21398 846.36595 C
777.85852 846.28063 777.46904 846.22961 777.01181 846.22961 C
775.91169 846.22961 774.96350 846.63836 774.20183 847.43915 C
773.44016 848.25694 773.05039 849.38117 773.05039 850.82910 C
773.05039 852.26003 773.44016 853.41855 774.21855 854.32139 C
774.98050 855.22422 775.99616 855.66728 777.23206 855.66728 C
@c
779.60211 851.71493 m
779.55137 852.36236 779.39915 852.89046 779.17890 853.28220 C
778.77241 853.99767 778.09521 854.35540 777.14731 854.35540 C
776.45339 854.35540 775.87795 854.10000 775.42072 853.60592 C
774.96350 853.11184 774.70980 852.48170 774.69279 851.71493 C
779.60211 851.71493 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
782.95408 855.46290 m
784.37594 855.46290 L
784.37594 854.20233 L
784.79943 854.73043 785.23937 855.10517 785.71332 855.32655 C
786.17055 855.54794 786.69553 855.66728 787.27096 855.66728 C
788.52359 855.66728 789.37002 855.22422 789.81024 854.33839 C
790.06422 853.86161 790.18271 853.16315 790.18271 852.26003 C
790.18271 846.55332 L
788.65909 846.55332 L
788.65909 852.17499 L
788.65909 852.70309 788.57433 853.14614 788.42211 853.48658 C
788.16813 854.04898 787.67717 854.32139 786.98296 854.32139 C
786.62750 854.32139 786.33978 854.28737 786.11953 854.20233 C
785.71332 854.08299 785.35786 853.82731 785.05313 853.46957 C
784.79943 853.18016 784.64693 852.87345 784.56217 852.56674 C
784.47770 852.24302 784.44397 851.80025 784.44397 851.22113 C
784.44397 846.55332 L
782.95408 846.55332 L
782.95408 855.46290 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
792.75572 849.34715 m
792.80674 848.85307 792.92494 848.46132 793.12819 848.20564 C
793.50094 847.71184 794.14384 847.47317 795.07531 847.47317 C
795.63373 847.47317 796.10797 847.59250 796.53090 847.83090 C
796.95411 848.08658 797.15735 848.46132 797.15735 848.95540 C
797.15735 849.34715 796.98813 849.63685 796.64967 849.82422 C
796.42942 849.94328 796.00620 850.09663 795.37975 850.24998 C
794.19487 850.55669 L
793.43291 850.74406 792.89121 850.94844 792.53575 851.18683 C
791.89228 851.59587 791.57083 852.15798 791.57083 852.87345 C
791.57083 853.70825 791.87556 854.38970 792.46828 854.91780 C
793.07745 855.44589 793.89014 855.70129 794.90580 855.70129 C
796.24318 855.70129 797.20809 855.30954 797.80054 854.50876 C
798.15600 854.01468 798.34224 853.46957 798.32551 852.90746 C
796.92038 852.90746 L
796.90337 853.23118 796.78488 853.53789 796.56491 853.82731 C
796.22617 854.21934 795.63373 854.40671 794.78731 854.40671 C
794.22860 854.40671 793.80539 854.30438 793.51767 854.08299 C
793.22995 853.86161 793.07745 853.58891 793.07745 853.23118 C
793.07745 852.83943 793.26369 852.53272 793.65288 852.29433 C
793.87313 852.15798 794.19487 852.03865 794.63480 851.93660 C
795.61701 851.69792 L
796.68340 851.44252 797.39433 851.18683 797.76680 850.93143 C
798.34224 850.55669 798.63024 849.96028 798.63024 849.12576 C
798.63024 848.34198 798.32551 847.66054 797.73307 847.08142 C
797.14035 846.50230 796.22617 846.21260 795.00728 846.21260 C
793.68690 846.21260 792.75572 846.51931 792.19729 847.11543 C
791.65559 847.71184 791.36759 848.46132 791.31685 849.34715 C
792.75572 849.34715 L
@c
F

@rax %Note: Object
564.88847 842.63528 818.30154 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
804.86022 855.66728 m
805.48668 855.66728 806.09584 855.51392 806.68857 855.22422 C
807.28101 854.91780 807.72123 854.52576 808.04296 854.06598 C
808.33068 853.60592 808.53364 853.09483 808.63540 852.49871 C
808.71987 852.08995 808.77090 851.42551 808.77090 850.52268 C
802.27020 850.52268 L
802.30394 849.61956 802.52391 848.90409 802.91339 848.35899 C
803.30258 847.81389 803.92904 847.54148 804.75874 847.54148 C
805.53742 847.54148 806.16387 847.79688 806.62082 848.30797 C
806.87480 848.59767 807.06104 848.95540 807.17953 849.34715 C
808.63540 849.34715 L
808.60167 849.02343 808.48290 848.64869 808.26293 848.25694 C
808.04296 847.84791 807.78898 847.52447 807.51827 847.26879 C
807.06104 846.82602 806.50233 846.51931 805.84214 846.36595 C
805.48668 846.28063 805.09720 846.22961 804.63997 846.22961 C
803.53984 846.22961 802.59165 846.63836 801.82998 847.43915 C
801.06831 848.25694 800.67855 849.38117 800.67855 850.82910 C
800.67855 852.26003 801.06831 853.41855 801.84671 854.32139 C
802.60866 855.22422 803.62431 855.66728 804.86022 855.66728 C
@c
807.23027 851.71493 m
807.17953 852.36236 807.02702 852.89046 806.80706 853.28220 C
806.40057 853.99767 805.72337 854.35540 804.77546 854.35540 C
804.08154 854.35540 803.50611 854.10000 803.04888 853.60592 C
802.59165 853.11184 802.33795 852.48170 802.32094 851.71493 C
807.23027 851.71493 L
@c
F

@rax %Note: Object
796.21002 842.63528 809.94756 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
796.21852 852.07266 m
800.36617 852.07266 L
800.36617 850.52268 L
796.21852 850.52268 L
796.21852 852.07266 L
@c
F

@rax %Note: Object
801.47679 842.63528 889.67055 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
803.03414 848.92110 m
803.03414 848.49534 803.18665 848.15461 803.50838 847.89921 C
803.82983 847.64353 804.20202 847.52447 804.62551 847.52447 C
805.15020 847.52447 805.64117 847.64353 806.13213 847.89921 C
806.96154 848.29096 807.38504 848.95540 807.38504 849.87524 C
807.38504 851.08479 L
807.19880 850.96545 806.96154 850.88041 806.67383 850.79509 C
806.38611 850.71005 806.11512 850.65874 805.82740 850.62472 C
804.93024 850.50567 L
804.38854 850.43735 803.98205 850.31802 803.71134 850.16494 C
803.25411 849.90926 803.03414 849.48350 803.03414 848.92110 C
@c
806.63981 851.95361 m
806.97855 852.00463 807.19880 852.14098 807.31701 852.37937 C
807.38504 852.51572 807.41877 852.70309 807.41877 852.95849 C
807.41877 853.46957 807.23254 853.84460 806.87707 854.06598 C
806.52161 854.28737 805.99663 854.40671 805.33644 854.40671 C
804.55776 854.40671 803.99906 854.20233 803.67732 853.77628 C
803.49109 853.55490 803.37288 853.19717 803.32186 852.73710 C
801.93373 852.73710 L
801.95074 853.84460 802.30620 854.61109 803.00041 855.03685 C
803.67732 855.46290 804.47301 855.68428 805.37017 855.68428 C
806.40283 855.68428 807.24954 855.47991 807.89272 855.07115 C
808.55291 854.67912 808.87465 854.04898 808.87465 853.21417 C
808.87465 848.08658 L
808.87465 847.93323 808.90838 847.79688 808.95940 847.71184 C
809.02687 847.62652 809.16236 847.57550 809.36561 847.57550 C
809.43307 847.57550 809.50110 847.57550 809.58557 847.57550 C
809.67033 847.59250 809.75480 847.60951 809.85657 847.62652 C
809.85657 846.51931 L
809.61959 846.45099 809.43307 846.39997 809.31487 846.38296 C
809.19609 846.36595 809.04387 846.36595 808.82391 846.36595 C
808.31594 846.36595 807.94346 846.55332 807.70677 846.91106 C
807.58800 847.09843 807.50324 847.37112 807.45250 847.72885 C
807.14778 847.33682 806.70784 846.97909 806.14913 846.68967 C
805.59014 846.39997 804.96397 846.24661 804.27005 846.24661 C
803.44035 846.24661 802.78016 846.50230 802.25518 847.01339 C
801.73049 847.50718 801.47679 848.13761 801.47679 848.88709 C
801.47679 849.72189 801.73049 850.35231 802.23846 850.81209 C
802.76315 851.27216 803.44035 851.54457 804.27005 851.64690 C
806.63981 851.95361 L
@c
F

@rax %Note: Object
801.47679 842.63528 889.67055 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
814.76589 855.61625 m
815.46009 855.61625 816.06954 855.44589 816.57751 855.10517 C
816.86494 854.91780 817.15294 854.62809 817.44066 854.25335 C
817.44066 855.37757 L
818.81178 855.37757 L
818.81178 847.26879 L
818.81178 846.14457 818.64255 845.25874 818.32110 844.59430 C
817.69465 843.38476 816.52649 842.78863 814.81663 842.78863 C
813.86872 842.78863 813.07276 843.01002 812.41285 843.43578 C
811.76939 843.86183 811.41392 844.52598 811.32917 845.44611 C
812.83606 845.44611 L
812.92082 845.05408 813.05603 844.74765 813.27628 844.52598 C
813.59773 844.20255 814.12243 844.03219 814.85065 844.03219 C
815.98479 844.03219 816.74674 844.44094 817.10220 845.24173 C
817.30545 845.71852 817.40665 846.57033 817.38992 847.79688 C
817.08491 847.33682 816.72945 846.99638 816.30652 846.77471 C
815.88331 846.55332 815.34132 846.45099 814.64740 846.45099 C
813.68249 846.45099 812.85279 846.79172 812.14186 847.47317 C
811.41392 848.15461 811.05846 849.27912 811.05846 850.86340 C
811.05846 852.36236 811.41392 853.52088 812.14186 854.35540 C
812.86980 855.19020 813.73323 855.61625 814.76589 855.61625 C
@c
817.44066 851.05077 m
817.44066 852.15798 817.22041 852.97578 816.76375 853.50387 C
816.30652 854.03197 815.73080 854.30438 815.03688 854.30438 C
813.98721 854.30438 813.27628 853.81030 812.88680 852.82243 C
812.68356 852.29433 812.58208 851.59587 812.58208 850.74406 C
812.58208 849.73890 812.78532 848.98942 813.19153 848.46132 C
813.59773 847.93323 814.13972 847.66054 814.81663 847.66054 C
815.88331 847.66054 816.64498 848.15461 817.08491 849.12576 C
817.32217 849.67087 817.44066 850.31802 817.44066 851.05077 C
@c
F

@rax %Note: Object
801.47679 842.63528 889.67055 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
821.60504 855.46290 m
823.01046 855.46290 L
823.01046 853.92964 L
823.12866 854.21934 823.41666 854.59408 823.87361 855.01984 C
824.33083 855.44589 824.83852 855.66728 825.43096 855.66728 C
825.44825 855.66728 825.49899 855.66728 825.56646 855.65027 C
825.63449 855.65027 825.75269 855.63326 825.90520 855.61625 C
825.90520 854.03197 L
825.82072 854.04898 825.73597 854.06598 825.66822 854.06598 C
825.58346 854.08299 825.49899 854.08299 825.41424 854.08299 C
824.66929 854.08299 824.09386 853.84460 823.68737 853.35052 C
823.29817 852.85644 823.09493 852.31134 823.09493 851.68091 C
823.09493 846.55332 L
821.60504 846.55332 L
821.60504 855.46290 L
@c
F

@rax %Note: Object
801.47679 842.63528 889.67055 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
830.20479 855.66728 m
830.83124 855.66728 831.44069 855.51392 832.03342 855.22422 C
832.62586 854.91780 833.06608 854.52576 833.38781 854.06598 C
833.67524 853.60592 833.87849 853.09483 833.98025 852.49871 C
834.06472 852.08995 834.11575 851.42551 834.11575 850.52268 C
827.61506 850.52268 L
827.64879 849.61956 827.86876 848.90409 828.25824 848.35899 C
828.64743 847.81389 829.27389 847.54148 830.10359 847.54148 C
830.88198 847.54148 831.50844 847.79688 831.96539 848.30797 C
832.21965 848.59767 832.40589 848.95540 832.52438 849.34715 C
833.98025 849.34715 L
833.94624 849.02343 833.82775 848.64869 833.60778 848.25694 C
833.38781 847.84791 833.13354 847.52447 832.86283 847.26879 C
832.40589 846.82602 831.84718 846.51931 831.18699 846.36595 C
830.83124 846.28063 830.44205 846.22961 829.98482 846.22961 C
828.88469 846.22961 827.93650 846.63836 827.17483 847.43915 C
826.41288 848.25694 826.02340 849.38117 826.02340 850.82910 C
826.02340 852.26003 826.41288 853.41855 827.19156 854.32139 C
827.95323 855.22422 828.96917 855.66728 830.20479 855.66728 C
@c
832.57512 851.71493 m
832.52438 852.36236 832.37187 852.89046 832.15191 853.28220 C
831.74542 853.99767 831.06822 854.35540 830.12031 854.35540 C
829.42639 854.35540 828.85068 854.10000 828.39373 853.60592 C
827.93650 853.11184 827.68252 852.48170 827.66580 851.71493 C
832.57512 851.71493 L
@c
F

@rax %Note: Object
801.47679 842.63528 889.67055 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
839.78674 855.66728 m
840.41320 855.66728 841.02236 855.51392 841.61509 855.22422 C
842.20753 854.91780 842.64775 854.52576 842.96948 854.06598 C
843.25720 853.60592 843.46016 853.09483 843.56192 852.49871 C
843.64639 852.08995 843.69742 851.42551 843.69742 850.52268 C
837.19672 850.52268 L
837.23046 849.61956 837.45071 848.90409 837.83991 848.35899 C
838.22910 847.81389 838.85556 847.54148 839.68526 847.54148 C
840.46394 847.54148 841.09039 847.79688 841.54734 848.30797 C
841.80132 848.59767 841.98756 848.95540 842.10605 849.34715 C
843.56192 849.34715 L
843.52819 849.02343 843.40942 848.64869 843.18945 848.25694 C
842.96948 847.84791 842.71550 847.52447 842.44479 847.26879 C
841.98756 846.82602 841.42885 846.51931 840.76866 846.36595 C
840.41320 846.28063 840.02372 846.22961 839.56677 846.22961 C
838.46636 846.22961 837.51817 846.63836 836.75650 847.43915 C
835.99483 848.25694 835.60535 849.38117 835.60535 850.82910 C
835.60535 852.26003 835.99483 853.41855 836.77351 854.32139 C
837.53518 855.22422 838.55083 855.66728 839.78674 855.66728 C
@c
842.15679 851.71493 m
842.10605 852.36236 841.95383 852.89046 841.73386 853.28220 C
841.32737 853.99767 840.65017 854.35540 839.70227 854.35540 C
839.00806 854.35540 838.43263 854.10000 837.97540 853.60592 C
837.51817 853.11184 837.26447 852.48170 837.24746 851.71493 C
842.15679 851.71493 L
@c
F

@rax %Note: Object
801.47679 842.63528 889.67055 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
845.50876 855.46290 m
846.98164 855.46290 L
846.98164 854.20233 L
847.33710 854.62809 847.65883 854.95181 847.94655 855.15619 C
848.43751 855.49691 848.99594 855.66728 849.62268 855.66728 C
850.31660 855.66728 850.89203 855.49691 851.31524 855.13918 C
851.56923 854.93480 851.78920 854.64510 851.97543 854.25335 C
852.31417 854.73043 852.70337 855.08816 853.14359 855.30954 C
853.60082 855.54794 854.09150 855.66728 854.65049 855.66728 C
855.83537 855.66728 856.64806 855.22422 857.08828 854.35540 C
857.30825 853.89562 857.42646 853.26520 857.42646 852.48170 C
857.42646 846.55332 L
855.88639 846.55332 L
855.88639 852.73710 L
855.88639 853.33351 855.73389 853.74227 855.44589 853.96365 C
855.15817 854.18504 854.78570 854.30438 854.36249 854.30438 C
853.77005 854.30438 853.27909 854.10000 852.85587 853.70825 C
852.43266 853.31650 852.21269 852.65206 852.21269 851.73194 C
852.21269 846.55332 L
850.70580 846.55332 L
850.70580 852.36236 L
850.70580 852.97578 850.63833 853.41855 850.48583 853.69124 C
850.26557 854.11701 849.84265 854.32139 849.23320 854.32139 C
848.67449 854.32139 848.14951 854.10000 847.69257 853.65694 C
847.23534 853.21417 846.99865 852.41339 846.99865 851.27216 C
846.99865 846.55332 L
845.50876 846.55332 L
845.50876 855.46290 L
@c
F

@rax %Note: Object
801.47679 842.63528 889.67055 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
862.45455 855.66728 m
863.08101 855.66728 863.69017 855.51392 864.28290 855.22422 C
864.87534 854.91780 865.31556 854.52576 865.63729 854.06598 C
865.92501 853.60592 866.12797 853.09483 866.22973 852.49871 C
866.31420 852.08995 866.36523 851.42551 866.36523 850.52268 C
859.86454 850.52268 L
859.89855 849.61956 860.11852 848.90409 860.50772 848.35899 C
860.89691 847.81389 861.52337 847.54148 862.35307 847.54148 C
863.13175 847.54148 863.75820 847.79688 864.21515 848.30797 C
864.46913 848.59767 864.65537 848.95540 864.77386 849.34715 C
866.22973 849.34715 L
866.19600 849.02343 866.07723 848.64869 865.85726 848.25694 C
865.63729 847.84791 865.38331 847.52447 865.11260 847.26879 C
864.65537 846.82602 864.09666 846.51931 863.43647 846.36595 C
863.08101 846.28063 862.69181 846.22961 862.23458 846.22961 C
861.13417 846.22961 860.18598 846.63836 859.42431 847.43915 C
858.66265 848.25694 858.27317 849.38117 858.27317 850.82910 C
858.27317 852.26003 858.66265 853.41855 859.44132 854.32139 C
860.20299 855.22422 861.21865 855.66728 862.45455 855.66728 C
@c
864.82460 851.71493 m
864.77386 852.36236 864.62164 852.89046 864.40167 853.28220 C
863.99518 853.99767 863.31798 854.35540 862.37008 854.35540 C
861.67587 854.35540 861.10044 854.10000 860.64321 853.60592 C
860.18598 853.11184 859.93228 852.48170 859.91528 851.71493 C
864.82460 851.71493 L
@c
F

@rax %Note: Object
801.47679 842.63528 889.67055 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
868.17657 855.46290 m
869.59843 855.46290 L
869.59843 854.20233 L
870.02192 854.73043 870.46186 855.10517 870.93609 855.32655 C
871.39304 855.54794 871.91802 855.66728 872.49345 855.66728 C
873.74608 855.66728 874.59250 855.22422 875.03272 854.33839 C
875.28671 853.86161 875.40520 853.16315 875.40520 852.26003 C
875.40520 846.55332 L
873.88157 846.55332 L
873.88157 852.17499 L
873.88157 852.70309 873.79682 853.14614 873.64488 853.48658 C
873.39061 854.04898 872.89965 854.32139 872.20545 854.32139 C
871.84998 854.32139 871.56255 854.28737 871.34230 854.20233 C
870.93609 854.08299 870.58035 853.82731 870.27562 853.46957 C
870.02192 853.18016 869.86942 852.87345 869.78466 852.56674 C
869.70019 852.24302 869.66646 851.80025 869.66646 851.22113 C
869.66646 846.55332 L
868.17657 846.55332 L
868.17657 855.46290 L
@c
F

@rax %Note: Object
801.47679 842.63528 889.67055 859.67065 @E
/$fm 1 def
 0 O 0 @g
0.8500 0.6100 0.0000 0.0000  create_cmyk_color set_solid_fill
877.55528 857.95002 m
879.06189 857.95002 L
879.06189 855.46290 L
880.46702 855.46290 L
880.46702 854.23635 L
879.06189 854.23635 L
879.06189 848.42731 L
879.06189 848.12060 879.16337 847.91622 879.36661 847.79688 C
879.48510 847.74586 879.68806 847.71184 879.95906 847.71184 C
880.02680 847.71184 880.09455 847.71184 880.17931 847.71184 C
880.26378 847.71184 880.36526 847.71184 880.46702 847.72885 C
880.46702 846.55332 L
880.29780 846.50230 880.12857 846.46828 879.94233 846.45099 C
879.75609 846.43398 879.56957 846.41698 879.34961 846.41698 C
878.65540 846.41698 878.18173 846.58734 877.92746 846.94507 C
877.67376 847.30280 877.55528 847.77987 877.55528 848.34198 C
877.55528 854.23635 L
876.35310 854.23635 L
876.35310 855.46290 L
877.55528 855.46290 L
877.55528 857.95002 L
@c
F

@rax %Note: Object
563.28094 842.86885 874.35298 843.93354 @E
/$fm 0 def
 0 O 0 @g
0.8549 0.6118 0.0000 0.0000  create_cmyk_color set_solid_fill
563.28094 843.93354 m
563.28094 842.86885 L
874.35298 842.86885 L
874.35298 843.93354 L
563.28094 843.93354 L
@c
F

 @gs spg @gr
%%PageTrailer
@rs
@rs
%%Trailer
@EndSysCorelDict
end
%%DocumentSuppliedResources: procset wCorel21Dict 21.0 0
%%EOF
